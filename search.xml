<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JavaSE】Java集合(上)</title>
      <link href="/2021/09/25/javaSE1_9/"/>
      <url>/2021/09/25/javaSE1_9/</url>
      
        <content type="html"><![CDATA[<h2 id="Java集合-上"><a href="#Java集合-上" class="headerlink" title="Java集合(上)"></a>Java集合(上)</h2><blockquote><p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265109905179456">Java集合简介 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><p>仅供个人学习使用</p></blockquote><h3 id="Java集合简介"><a href="#Java集合简介" class="headerlink" title="Java集合简介"></a>Java集合简介</h3><p>什么是集合(Collection)就是“由若干确定的元素所构成的整体”例如：5只小兔子构成的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line"></span><br><span class="line">│   (\_(\     (\_/)     (\_/)     (\_/)      (\(\   │</span><br><span class="line">    ( -.-)    (•.•)     (&gt;.&lt;)     (^.^)     (=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">│  C(<span class="string">&quot;)_(&quot;</span>)  (<span class="string">&quot;)_(&quot;</span>)   (<span class="string">&quot;)_(&quot;</span>)   (<span class="string">&quot;)_(&quot;</span>)   O(_<span class="string">&quot;)&quot;</span>)  │</span><br><span class="line"></span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br></pre></td></tr></table></figure><p>在数学中，我们经常遇到集合的概念，例如：</p><ul><li>有限集合<ul><li>某宝所有商品构成的集合；</li><li>一个小组成员组成的集合；</li></ul></li><li>无限集合<ul><li>自然数：1，2，3…</li><li>有理数集合…</li></ul></li></ul><p>为何在计算机中引入集合，主要是为了能便捷处理一组类似的数据，例：</p><ul><li>计算班级总成绩和平均成绩；</li><li>列举所有商品名称和价格；</li></ul><p>在Java中，如果一个Java对象可以在内部持有若干其他Java对象，并对外提供<span class='p blue'>访问接口</span>，我们把这种Java对象称为集合:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] ss = <span class="keyword">new</span> String[<span class="number">10</span>]; <span class="comment">// 可以持有10个String对象</span></span><br><span class="line">ss[<span class="number">0</span>] = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 可以放入String对象</span></span><br><span class="line">String first = ss[<span class="number">0</span>]; <span class="comment">// 可以获取String对象</span></span><br></pre></td></tr></table></figure><p>既然Java提供了子数组这种数据类型，可以充当集合；那么，为什么还要其它集合类呢？数组的限制：</p><ul><li>数组初始化后大小不可变；</li><li>数组只能按索引顺序存取；</li></ul><p>因此，我们需要各种不同类型的集合类来处理不同的数据，例如：</p><ul><li>可变大小的顺序链表；</li><li>保证无重复元素的集合；</li></ul><p><strong>Collection</strong></p><p>Java标准库自带<code>java.util</code>包提供了集合类；<code>Collection</code>,它是除<code>Map</code>外所有其他集合类的根接口。Java的<code>java.util</code>包主要提供了以下三种类型的集合：</p><ul><li><code>List</code>：一种有序列表的集合，例如，按索引排列的<code>Student</code>的<code>List</code>；</li><li><code>Set</code>：一种保证没有重复元素的集合，例如，所有无重复名称的<code>Student</code>的<code>Set</code>；</li><li><code>Map</code>：一种通过键值(key-value)查找的映射表集合，例如，根据<code>Student</code>的<code>name</code>查找对应<code>Student</code>的<code>Map</code>。</li></ul><p>Java集合的设计有几个特点：</p><ol><li><p>实现了接口和实现类相分离，例如：有序表的几口是<code>List</code>，具体的实现类有<code>ArrayList</code>，<code>LinkedList</code>等；</p></li><li><p>支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; lsit = <span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">// 只能放入String类型</span></span><br></pre></td></tr></table></figure></li></ol><p>最后，Java访问集合总是通过统一的方式——迭代器(Iterator)来实现，它最明显的好处在于无需知道集合内部元素是按照什么方式存储的。</p><p>由于Java的集合设计非常久远，中间经历过大规模改进，我们要注意到有一小部分集合类是遗留类，不应该继续使用：</p><ul><li><del><code>Hashtable</code>：一种线程安全的<code>Map</code>实现；</del></li><li><del><code>Vector</code>：一种线程安全的<code>List</code>实现；</del></li><li><del><code>Stack</code>：基于<code>Vector</code>实现的<code>LIFO</code>的栈。</del></li></ul><p>还有一小部分一六接口，也不应该继续使用：</p><ul><li><del><code>Enumeration&lt;E&gt;</code></del>:已被<code>Iterator&lt;E&gt;</code>取代。</li></ul><p><strong>小结</strong></p><p>Java的集合类定义在<code>java.util</code>包中，支持泛型，主要提供了3中集合类，包括<code>List</code>，<code>Set</code>和<code>Map</code>。Java集合使用统一的<code>Iterator</code>遍历，尽量不使用遗留接口。</p><h3 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h3><p>在集合类中，<code>List</code>是最基础的一种集合；它是一种有序列表。</p><p><code>List</code>的行为和数组几乎完全相同：<code>List</code>内部按照放入元素的先后顺序存放，每个元素都可以通过索引(下标)确定自己的位置，<code>List</code>的索引和数组一样，从0开始。</p><p>数组和<code>List</code>类似，也是有序结构，如果我们使用数组，在添加和删除元素的时候，会非常不方便。例如，从一个已有的数组<code>&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;&#125;</code>中删除索引为<strong>2</strong>的元素：</p><p><img src="https://gitee.com/jokerdig/jokerdig-db/raw/master/images/202109251452125.png" alt="image-20210925145229064"></p><p>这个”删除”操作实际上是把C后面的元素依次往前挪一个位置，疼出来的位置给新加的元素。这两种操作，用数组实现非常麻烦。</p><p>因此，在实际应用中，需要增加或删除元素的有序列表，我们使用最多的是<code>ArrayList</code>。实际上，<code>ArrayList</code>在内部使用了数组来存储所有元素。例如：一个<code>ArrayList</code>拥有5个元素，实际数组大小为6(即有一个空位)；</p><p>size=5</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">┌───┬───┬───┬───┬───┬───┐</span></span><br><span class="line"><span class="string">│</span> <span class="string">A</span> <span class="string">│</span> <span class="string">B</span> <span class="string">│</span> <span class="string">C</span> <span class="string">│</span> <span class="string">D</span> <span class="string">│</span> <span class="string">E</span> <span class="string">│</span>   <span class="string">│</span></span><br><span class="line"><span class="string">└───┴───┴───┴───┴───┴───┘</span></span><br></pre></td></tr></table></figure><p>当添加一个元素并指定索引到<code>ArrayList</code>时，<code>ArrayList</code>自动移动需要移动的元素：</p><p>size=5</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">┌───┬───┬───┬───┬───┬───┐</span></span><br><span class="line"><span class="string">│</span> <span class="string">A</span> <span class="string">│</span> <span class="string">B</span> <span class="string">│</span>   <span class="string">│</span> <span class="string">C</span> <span class="string">│</span> <span class="string">D</span> <span class="string">│</span> <span class="string">E</span> <span class="string">│</span></span><br><span class="line"><span class="string">└───┴───┴───┴───┴───┴───┘</span></span><br></pre></td></tr></table></figure><p>然后，往内部指定索引的数组位置添加一个元素，然后把<code>size</code>加1：</p><p>size=6</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">┌───┬───┬───┬───┬───┬───┐</span></span><br><span class="line"><span class="string">│</span> <span class="string">A</span> <span class="string">│</span> <span class="string">B</span> <span class="string">│</span> <span class="string">F</span> <span class="string">│</span> <span class="string">C</span> <span class="string">│</span> <span class="string">D</span> <span class="string">│</span> <span class="string">E</span> <span class="string">│</span></span><br><span class="line"><span class="string">└───┴───┴───┴───┴───┴───┘</span></span><br></pre></td></tr></table></figure><p>继续添加元素，但是数组已经满了，没有空闲位置的时候，<code>ArrayList</code>先创建一个更大的新数组，然后把就数组的所有元素复制到新数组，紧接着用新数组取代就数组：</p><p>size=6</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">┌───┬───┬───┬───┬───┬───┬───┬───┬───┬──┐</span></span><br><span class="line"><span class="string">│</span> <span class="string">A</span> <span class="string">│</span> <span class="string">B</span> <span class="string">│</span> <span class="string">F</span> <span class="string">│</span> <span class="string">C</span> <span class="string">│</span> <span class="string">D</span> <span class="string">│</span> <span class="string">E</span> <span class="string">│</span>   <span class="string">│</span>   <span class="string">│</span>   <span class="string">│</span>  <span class="string">│</span></span><br><span class="line"><span class="string">└───┴───┴───┴───┴───┴───┴───┴───┴───┴──┘</span></span><br></pre></td></tr></table></figure><p>现在，新数组就有了空位，可以继续添加一个元素到数组末尾，同时<code>size</code>加1：</p><p>size=7</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">┌───┬───┬───┬───┬───┬───┬───┬───┬───┬──┐</span></span><br><span class="line"><span class="string">│</span> <span class="string">A</span> <span class="string">│</span> <span class="string">B</span> <span class="string">│</span> <span class="string">F</span> <span class="string">│</span> <span class="string">C</span> <span class="string">│</span> <span class="string">D</span> <span class="string">│</span> <span class="string">E</span> <span class="string">│</span> <span class="string">G</span> <span class="string">│</span>   <span class="string">│</span>   <span class="string">│</span>  <span class="string">│</span></span><br><span class="line"><span class="string">└───┴───┴───┴───┴───┴───┴───┴───┴───┴──┘</span></span><br></pre></td></tr></table></figure><p>可见，<code>ArrayList</code>把添加和删除的操作都封装起来，让我们操作<code>List</code>类似于操作数组，却不用关心内部元素如何移动。</p><p>我们考察<code>List&lt;E&gt;</code>接口，可以看到几个主要的接口方法：</p><ul><li>在末尾添加一个元素：<code>boolean add(E e)</code></li><li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li><li>删除指定索引的元素：<code>E remove(int index)</code></li><li>删除某个元素：<code>boolean remove(Object e)</code></li><li>获取指定索引的元素：<code>E get(int index)</code></li><li>获取链表大小（包含元素的个数）：<code>int size()</code></li></ul><p>但是，实现<code>List</code>并不是只能通过数组(ArrayList)来实现，另一种<code>LinkedList</code>通过”链表”也实现了List接口。在<code>LinkedList</code>中，它的内部每个元素都指向下一个元素；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        <span class="string">┌───┬───┐</span>   <span class="string">┌───┬───┐</span>   <span class="string">┌───┬───┐</span>   <span class="string">┌───┬───┐</span></span><br><span class="line"><span class="string">HEAD</span> <span class="string">──&gt;│</span> <span class="string">A</span> <span class="string">│</span> <span class="string">●─┼──&gt;│</span> <span class="string">B</span> <span class="string">│</span> <span class="string">●─┼──&gt;│</span> <span class="string">C</span> <span class="string">│</span> <span class="string">●─┼──&gt;│</span> <span class="string">D</span> <span class="string">│</span>   <span class="string">│</span></span><br><span class="line">        <span class="string">└───┴───┘</span>   <span class="string">└───┴───┘</span>   <span class="string">└───┴───┘</span>   <span class="string">└───┴───┘</span></span><br></pre></td></tr></table></figure><p><code>ArrayList</code>和<code>LinkedList</code>的区别：</p><table><thead><tr><th></th><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td>获取指定元素</td><td>速度快</td><td>需从头开始查找元素</td></tr><tr><td>添加元素到末尾</td><td>速度块</td><td>速度块</td></tr><tr><td>在指定位置添加、删除</td><td>需要移动元素</td><td>不需要移动元素</td></tr><tr><td>内存占用</td><td>少</td><td>较大</td></tr></tbody></table><p>通常情况下优先使用<code>ArrayList</code></p><p><strong>List的特点</strong></p><p>使用<code>List</code>时，我们要关注<code>List</code>接口的规范。<code>List</code>接口允许我们添加重复元素，即<code>List</code>内部的元素可以重复：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// size=1</span></span><br><span class="line">        list.add(<span class="string">&quot;pear&quot;</span>); <span class="comment">// size=2</span></span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 允许重复添加元素，size=3</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>List</code>还允许添加<code>null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// size=1</span></span><br><span class="line">        list.add(<span class="keyword">null</span>); <span class="comment">// size=2</span></span><br><span class="line">        list.add(<span class="string">&quot;pear&quot;</span>); <span class="comment">// size=3</span></span><br><span class="line">        String second = list.get(<span class="number">1</span>); <span class="comment">// null</span></span><br><span class="line">        System.out.println(second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建List</strong></p><p>除了使用<code>ArrayList</code>和<code>LinkedList</code>，还可以通过<code>List</code>接口提供的of()方法，根据给定元素快速创建<code>List</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>但是<code>List.of()</code>方法不接受<code>null</code>值，如果传入<code>null</code>，会抛出<code>NullPointerException</code>异常。</p><p><strong>遍历List</strong></p><p>和数组类型，我们要遍历一个<code>List</code>，完全可以用<code>for</code>循环根据索引配合<code>get(int)</code>方法遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种方式并<span class='p red'>不推荐</span>，一是代码复杂，二是因为<code>get(int)</code>方法只有<code>ArrayList</code>的实现是高效的，换成<code>LinkedList</code>后，索引越大，访问速度越慢。</p><p>所以我们始终坚持使用迭代器<code>Iterator</code>来访问<code>List</code>。<code>Interator</code>本身也是一个对象，但它是由<code>List</code>的实例调用<code>Iterator()</code>方法的时候创建的。<code>Interator</code>对象知道如何遍历一个<code>List</code>，并且不同的<code>List</code>类型，返回的<code>Iterator</code>对象实现也是不同的，但总是具有最高的访问效率。</p><p><code>Iterator</code>对象有两个方法：<code>boolean hasNext()</code>判断是否有下一个元素，<code>E next()</code>返回下一个元素。因此，使用<code>Iterator</code>遍历<code>List</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能使用<code>Iterator</code>访问<code>List</code>的代码比使用索引更复杂。但时，要记住<code>Inteator</code>遍历<code>List</code>永远是最高效的方式，并且，由于<code>Inteator</code>遍历十分常用，所以，Java的<code>for each</code>循环本身就可以帮我们使用<code>Iterator</code>遍历。把上面的代码再改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是我们编写遍历<code>List</code>的常见代码。</p><p>实际上，只要实现了<code>Iterable</code>接口的集合类都可以直接用<code>for each</code>循环来遍历，Java编译器本身并不知道如何遍历集合对象，但它会自动把<code>for each</code>循环变成<code>Iterator</code>的调用，原因就在于<code>Iterable</code>接口定义了一个<code>Iterator&lt;E&gt; iterator()</code>方法，强迫集合类必须返回一个<code>Iterator</code>实例。</p><p><strong>List和Array转换</strong></p><p>把<code>List</code>变为<code>Array</code>有三种方法，第一种调用<code>toArray()</code>方法直接返回一个Object[]数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        Object[] array = list.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object s : array) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法会丢失类型信息，所以实际应用很少。</p><p>第二种方式是给<code>toArray(T[])</code>传入一个类型相同的<code>Array</code>，<code>List</code>内部自动把元素复制到传入的<code>Array</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">        Integer[] array = list.toArray(<span class="keyword">new</span> Integer[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span> (Integer n : array) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个<code>toArray(T[])</code>方法的泛型参数<code>&lt;T&gt;</code>并不是<code>List</code>接口定义的泛型参数<code>&lt;E&gt;</code>，所以，我们实际上可以传入其他类型的数组，例如我们传入<code>Number</code>类型的数组，返回的仍然是<code>Number</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">        Number[] array = list.toArray(<span class="keyword">new</span> Number[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span> (Number n : array) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果我们传入类型不匹配的数组，例如，<code>String[]</code>类型的数组，由于<code>List</code>的元素是<code>Integer</code>，所以无法放入<code>String</code>数组，这个方法会抛出<code>ArrayStoreException</code>。</p><p>如果我们传入的数组大小和<code>List</code>实际的元素个数不一致怎么办？根据<a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/List.html#toArray(T[])">List接口文档</a>，我们可以知道：</p><p>如果传入的数组不够大，那么<code>List</code>内部会创建一个新的刚好够大的数组，填充后返回；如果传入的数组比<code>List</code>元素还要多，那么填充完元素后，剩下的数组元素一律填充<code>null</code>。</p><p>实际上，最常用的是传入一个“恰好”大小的数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> Integer[list.size()]);</span><br></pre></td></tr></table></figure><p>最后一种更简洁的写法是通过<code>List</code>接口定义的<code>T[] toArray(IntFunction&lt;T[]&gt; generator)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = list.toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><p>这种函数式写法我们会在后续讲到。</p><p>反过来，把<code>Array</code>变为<code>List</code>就简单多了，通过<code>List.of(T...)</code>方法最简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);</span><br></pre></td></tr></table></figure><p>对于JDK 11之前的版本，可以使用<code>Arrays.asList(T...)</code>方法把数组转换成<code>List</code>。</p><p>要注意的是，返回的<code>List</code>不一定就是<code>ArrayList</code>或者<code>LinkedList</code>，因为<code>List</code>只是一个接口，如果我们调用<code>List.of()</code>，它返回的是一个只读<code>List</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>);</span><br><span class="line">        list.add(<span class="number">999</span>); <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对只读<code>List</code>调用<code>add()</code>、<code>remove()</code>方法会抛出,<code>UnsupportedOperationException</code>。</p><p><strong>小练习：</strong></p><p>给定一组连续的整数，例如：10，11，12，……，20，但其中缺失一个数字，试找出缺失的数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/25 - 16:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lesson1</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 构造从start到end的序列：</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> start = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> end = <span class="number">20</span>;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 随机删除List中的一个元素:</span></span><br><span class="line">            <span class="keyword">int</span> removed = list.remove((<span class="keyword">int</span>) (Math.random() * list.size()));</span><br><span class="line">            <span class="keyword">int</span> found = findMissingNumber(start, end, list);</span><br><span class="line">            System.out.println(list.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;missing number: &quot;</span> + found);</span><br><span class="line">            System.out.println(removed == found ? <span class="string">&quot;测试成功&quot;</span> : <span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMissingNumber</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list2= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> back=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt;= end; j++) &#123;</span><br><span class="line">            list2.add(j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(list.get(i)!=list2.get(i))&#123;</span><br><span class="line">                back=list2.get(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> back;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强版：和上述题目一样，但整数不再有序，试找出缺失的数字：</p><p><del>还没做，(o゜▽゜)o☆</del></p><p><strong>小结</strong></p><p><code>List</code>是按索引顺序访问的长度可变的有序表，优先使用<code>ArrayList</code>而不是<code>LinkedList</code>；</p><p>可以直接使用<code>for each</code>遍历<code>List</code>；</p><p><code>List</code>可以和<code>Array</code>相互转换。</p><h3 id="编写equals方法"><a href="#编写equals方法" class="headerlink" title="编写equals方法"></a>编写equals方法</h3><h3 id="使用Map"><a href="#使用Map" class="headerlink" title="使用Map"></a>使用Map</h3><h3 id="编写equals和hashCode"><a href="#编写equals和hashCode" class="headerlink" title="编写equals和hashCode"></a>编写equals和hashCode</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(6)</title>
      <link href="/2021/09/22/assembly1_6/"/>
      <url>/2021/09/22/assembly1_6/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-6"><a href="#二进制到汇编-6" class="headerlink" title="二进制到汇编(6)"></a>二进制到汇编(6)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=11">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="汇编学习环境及必要说明"><a href="#汇编学习环境及必要说明" class="headerlink" title="汇编学习环境及必要说明"></a>汇编学习环境及必要说明</h3><p>机器语言就是位运算。都是电路来实现的。者就是计算机的最底层的本质。</p><p>通过机器语言来实现加法计算器，设计电路。</p><p><strong>汇编语言环境：</strong></p><p>通过指令来代替我们的二进制编码！</p><p>通过汇编指令可以给计算机发一些操作，然后让计算机执行，编译器的发展，底层更古老。</p><p>掌握环境的配置。</p><blockquote><p>vc6 od 抓包工具 加密解密工具与</p></blockquote><p><strong>学汇编不是为了写代码</strong></p><p>理解程序的本质，懂汇编。</p><p>《汇编语言》 16位的汇编 -&gt;32位 -&gt; 64位(本质架构区别不大，寻址能力增加)</p><p> 入门：了解汇编和程序的对应关系，程序的本质即可！</p><p><a href="https://imgtu.com/i/4Nwi1U"><img src="https://z3.ax1x.com/2021/09/22/4Nwi1U.png" alt="4Nwi1U.png"></a></p><h3 id="寄存器理解"><a href="#寄存器理解" class="headerlink" title="寄存器理解"></a>寄存器理解</h3><p>寄存器：</p><p>存储数据：CPU&gt;内存&gt;硬盘</p><p>32位CPU 8 16 32</p><p>64位CPU 8 16 32 64</p><p><strong>通用寄存器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 32位的通用寄存器只有8个值</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4NwGBd"><img src="https://z3.ax1x.com/2021/09/22/4NwGBd.png" alt="4NwGBd.png"></a></p><p>存志的范围0-FFFFFFFF</p><p>对于二进制来说，直接修改值</p><p><strong>计算机如何向寄存器存值</strong></p><p><strong>mov指令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov 存的地址,存的值</span><br><span class="line">mov 存的地址1,存的地址1</span><br></pre></td></tr></table></figure><p>可以将数字写入到寄存器，可以将寄存器中的值写到寄存器。(计算机=计算力)</p><p><strong>不同的寄存器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> FFFF  FF  0000 0000</span><br><span class="line">2位  16位  8位</span><br><span class="line">EAX   AX   AL</span><br><span class="line">ECX   CX   CL</span><br><span class="line">EDX   DX   DL</span><br><span class="line">EBX   BX   BL</span><br><span class="line">ESP   SP   AH</span><br><span class="line">EBP   BP   CH</span><br><span class="line">ESI   SI   DH</span><br><span class="line">EDI   DI   BH</span><br></pre></td></tr></table></figure><p>8位：L低8位，H高8位</p><p><a href="https://imgtu.com/i/4N0Hsg"><img src="https://z3.ax1x.com/2021/09/22/4N0Hsg.png" alt="4N0Hsg.png"></a></p><p>除了这些通用寄存器之外，那么其他的寄存器每一位都有自己特定的功能。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(7)</title>
      <link href="/2021/09/22/assembly1_7/"/>
      <url>/2021/09/22/assembly1_7/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-7"><a href="#二进制到汇编-7" class="headerlink" title="二进制到汇编(7)"></a>二进制到汇编(7)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=13">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="内存的理解"><a href="#内存的理解" class="headerlink" title="内存的理解"></a>内存的理解</h3><p>寄存器小，不够用，所以数据放到内存中！(内存条)</p><p>每个应用程序都有4G的内存空间，空头支票。</p><p><a href="https://imgtu.com/i/4NDw36"><img src="https://z3.ax1x.com/2021/09/22/4NDw36.png" alt="4NDw36.png"></a></p><p>程序真正运行的时候，才会用到物理内存。</p><p>1b=8bit</p><p>1Kb=1024b</p><p>1Mb=1024Kb</p><p>1Gb=1024Mb</p><p>4G的内存，4096-&gt;最终计算为位，就是可以存储的最大容量。</p><p>计算机中内存地址很多，空间很大。</p><p><strong>内存地址</strong></p><p>存一个数：占用的大小，数据宽度！存到哪里？</p><p>计算机内存地址很多，空间很大，每个空间分配一个地址，名字。(32位 8个 16进制的值)</p><p>32位：寻址能力！4GB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFFFFFFF+1 =100000000</span><br></pre></td></tr></table></figure><p>位是如何限制内存大小的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100000000 内存地址*8 =位：800000000</span><br><span class="line">转位10进制/8: 4,967,296</span><br><span class="line">按规则/1024，最后就是4GB</span><br></pre></td></tr></table></figure><p>64位：</p><p>每个内存地址都有一个编号，可以通过编号来存值。</p><p><a href="https://imgtu.com/i/4NrszV"><img src="https://z3.ax1x.com/2021/09/22/4NrszV.png" alt="4NrszV.png"></a></p><p>内存如何存值？</p><ul><li><p>数据宽度：byte word dword</p></li><li><p>地址的位置 0xFFFFFFF</p></li><li><p>不是任意的地址都可以写值的，申请使用，程序申请过的内存地址才能使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">汇编如何向内存写值</span></span><br><span class="line">mov  数据宽度 内存地址 值</span><br><span class="line">mov (byte/word/dword/qword)</span><br><span class="line"><span class="meta">#</span><span class="bash">写法举例：</span></span><br><span class="line">mov byte ptr ds:[0x19FF90],1</span><br><span class="line"><span class="meta">#</span><span class="bash">注意传值大小，一定要与数据宽度相等</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4Ns1w4"><img src="https://z3.ax1x.com/2021/09/22/4Ns1w4.png" alt="4Ns1w4.png"></a></p></li></ul><p><strong>内存地址有多种写法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 内存地址偏移</span></span><br><span class="line">ds:[0x19FF70+4]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 寄存器</span></span><br><span class="line">ds:[eax]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 寄存器偏移</span></span><br><span class="line">ds:[eax+4]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 数组[]</span></span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 偏移</span></span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;+4]</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p><strong>努力的你一定绽放光芒！</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(5)</title>
      <link href="/2021/09/20/assembly1_5/"/>
      <url>/2021/09/20/assembly1_5/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-5"><a href="#二进制到汇编-5" class="headerlink" title="二进制到汇编(5)"></a>二进制到汇编(5)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=9">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="位运算理解"><a href="#位运算理解" class="headerlink" title="位运算理解"></a>位运算理解</h3><p>寄存器：mov寄存器 存值</p><p><a href="https://imgtu.com/i/4831XD"><img src="https://z3.ax1x.com/2021/09/19/4831XD.png" alt="4831XD.png"></a></p><p><strong>位运算：</strong></p><p>计算机现在可以存储所有数字(正数，浮点，字符)的运算。</p><p>0 1</p><p>位运算：</p><p>2*8最高高效计算方式。(位运算最高效)</p><p>很多底层的调试器，需要通过位来判断CPU的状态。</p><p><strong>与运算(and &amp;)</strong></p><p><a href="https://imgtu.com/i/488CEd"><img src="https://z3.ax1x.com/2021/09/19/488CEd.png" alt="488CEd.png"></a></p><p>全true为true，一false为false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">-------------- 与运算</span><br><span class="line">1001 0000 </span><br></pre></td></tr></table></figure><p><strong>或运算(or |)</strong></p><p><a href="https://imgtu.com/i/488Oaj"><img src="https://z3.ax1x.com/2021/09/19/488Oaj.png" alt="488Oaj.png"></a></p><p>true|false为true，false|false为false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">-----------或运算</span><br><span class="line">1111 1001</span><br></pre></td></tr></table></figure><p><strong>异或运算(xor ^)</strong></p><p><a href="https://imgtu.com/i/48Gay8"><img src="https://z3.ax1x.com/2021/09/19/48Gay8.png" alt="48Gay8.png"></a></p><p>不一样就是1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">-----------异或运算</span><br><span class="line">0110 1001</span><br></pre></td></tr></table></figure><p><strong>非运算(单目运算符 not ~ !)</strong></p><p>0就是1，1就是0，取反</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1101 1000</span><br><span class="line">-----------</span><br><span class="line">0010 0111</span><br></pre></td></tr></table></figure><p>通过这些可以完成加减乘除！位运算来实现加减乘除！</p><p>位运算(移动位)</p><ul><li><p>左移:(shl&lt;&lt;)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 @ 所有二进制位全部左移若干位，高位就丢弃了，低位补0</span><br><span class="line">0000 0010</span><br></pre></td></tr></table></figure></li><li><p>右移:(shr&gt;&gt;)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000 0001  @ 所有二进制位全部右移若干位，低位就丢弃了，高位就需要补0,1(符号位决定)</span><br><span class="line">0000 0000</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0000 0001  1</span><br><span class="line"></span><br><span class="line">0000 0010  2</span><br><span class="line"></span><br><span class="line">0000 0100  4</span><br><span class="line"></span><br><span class="line">0000 1000  8</span><br></pre></td></tr></table></figure><h3 id="位运算真实加减乘除"><a href="#位运算真实加减乘除" class="headerlink" title="位运算真实加减乘除"></a>位运算真实加减乘除</h3><p>计算机只认识 0 1</p><p>基本数学是建立在 加减乘除。(加法)</p><p><strong>4+5</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">计算机是怎么操作的</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">----------- (加法，计算机不会直接加)</span><br><span class="line"><span class="meta">#</span><span class="bash">了解计算机的实现原理</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步，异或，如果不考虑进位，异或就可以直接出结果。</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">------------</span><br><span class="line">0000 0001</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二步，与运算(判断进位，如果与运算结果位0，那就没有进位。)</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">------------</span><br><span class="line">0000 0100</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">第三步，将与运算的结果座左移一位。</span> </span><br><span class="line">0000 0100 -&gt; 0000 1000</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">第四步，异或</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">------------</span><br><span class="line">0000 1001</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">第五步，与运算(判断进位,如果与运算运算结果位0，没有进位。)</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">------------</span><br><span class="line">0000 0000</span><br><span class="line"><span class="meta">#</span><span class="bash">所以最终结果就是与运算为0的结果的上一个异或运算。</span></span><br><span class="line">4+5=9</span><br></pre></td></tr></table></figure><p><strong>4-5</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">计算机是怎么操作的</span></span><br><span class="line">4+(-5)</span><br><span class="line">0000 0100</span><br><span class="line">1111 1011</span><br><span class="line">----------- (减法，计算机不会直接加)</span><br><span class="line">1111 1111 -&gt;ff</span><br><span class="line"><span class="meta">#</span><span class="bash">了解计算机的实现原理</span></span><br><span class="line">0000 0100</span><br><span class="line">1111 1011</span><br><span class="line">----------异或(如果不考虑进位，异或就可以直接出结果)</span><br><span class="line">1111 1111</span><br><span class="line"></span><br><span class="line">0000 0100</span><br><span class="line">1111 1011</span><br><span class="line">----------与运算(判断进位，如果与运算结果位0，那就没有进位)</span><br><span class="line">0000 0000</span><br><span class="line">最终结果：</span><br><span class="line">1111 1111 -&gt;ff</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">符号位</span></span><br><span class="line">ff  -1  255</span><br></pre></td></tr></table></figure><p>乘：x*y，就是y个x相加，还是加法。</p><p>除：x/y，本质就是减法，就是x能减去多少个y。</p><p><strong>计算机只会加法！</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Tag Plugins】Tag Plugins Plus</title>
      <link href="/2021/09/20/tag_plugins/"/>
      <url>/2021/09/20/tag_plugins/</url>
      
        <content type="html"><![CDATA[<h2 id="Tag-Plugins-Plus"><a href="#Tag-Plugins-Plus" class="headerlink" title="Tag Plugins Plus"></a>Tag Plugins Plus</h2><blockquote><p>参考自：<a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus | Akilarの糖果屋</a>和<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p><p><a href="https://jokerdig.com/">Hey,Joker - Blog (jokerdig.com)</a></p><p>仅作个人使用。</p></blockquote><p> <strong>正在努力更新中( •̀ ω •́ )✧</strong></p><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><ol><li><p>安装插件，在博客根目录打开<code>[Git Bash Here]</code>终端，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-buterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure><p>hexo自带markdown选完插件<code>hexo-renderer-marked</code>与外挂标签的语法兼容性差，建议替换为<code>hexo-renderer-kramed</code>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code> 或者主题配置文件<code>_config.yml</code> 中添加如下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/carousel-touch.min.js</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p><table><thead><tr><th align="left">参数</th><th align="left">备选值 / 类型</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">enable</td><td align="left">true/false</td><td align="left">【必选】控制开关</td></tr><tr><td align="left">priority</td><td align="left">number</td><td align="left">【可选】过滤器优先级，数值越小，执行越早，默认为 10，选填</td></tr><tr><td align="left">issues</td><td align="left">true/false</td><td align="left">【可选】issues 标签控制开关，默认为 false</td></tr><tr><td align="left">CDN.anima</td><td align="left">URL</td><td align="left">【可选】动画标签 anima 的依赖</td></tr><tr><td align="left">CDN.jquery</td><td align="left">URL</td><td align="left">【可选】issues 标签依赖</td></tr><tr><td align="left">CDN.issues</td><td align="left">URL</td><td align="left">【可选】issues 标签依赖</td></tr><tr><td align="left">CDN.iconfont</td><td align="left">URL</td><td align="left">【可选】iconfont 标签 symbol 样式引入</td></tr><tr><td align="left">CDN.carousel</td><td align="left">URL</td><td align="left">【可选】carousel 旋转相册标签鼠标拖动依赖</td></tr></tbody></table></li></ol><h3 id="2-行内文本样式-text"><a href="#2-行内文本样式-text" class="headerlink" title="2. 行内文本样式 text"></a>2. 行内文本样式 text</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test1-1">默认</button></li><li class="tab"><button type="button" data-href="#test1-2">样式展示</button></li><li class="tab"><button type="button" data-href="#test1-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test1-1"><p>仅作演示</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(4)</title>
      <link href="/2021/09/17/assembly1_4/"/>
      <url>/2021/09/17/assembly1_4/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-4"><a href="#二进制到汇编-4" class="headerlink" title="二进制到汇编(4)"></a>二进制到汇编(4)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=7">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="有符号数和无符号数规则理解"><a href="#有符号数和无符号数规则理解" class="headerlink" title="有符号数和无符号数规则理解"></a>有符号数和无符号数规则理解</h3><p>数据都是有宽度的，每个数据代表什么意思呢？ 二进制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 1 0 1 0 1</span><br></pre></td></tr></table></figure><p><strong>规则：</strong>二进制解码增加一个规则？</p><p>例如：解析一个音频：mp3解码规则</p><p><strong>无符号数规则</strong></p><p>你这数字是什么，那就是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 0 0 1 1 0 1 0 十六进制：0x9A </span><br></pre></td></tr></table></figure><p><strong>有符号数规则</strong></p><p>最高位是符号位：1(负数) 0(正数)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 0 0 1 1 0 1 0  如何转化？</span><br></pre></td></tr></table></figure><h3 id="原码反码补码理解"><a href="#原码反码补码理解" class="headerlink" title="原码反码补码理解"></a>原码反码补码理解</h3><p><strong>编码规则</strong></p><p><strong>有符号数的编码规则</strong></p><p>原码：最高位是符号位，对其它位进行本身绝对值即可</p><p>反码：</p><ul><li>正数：反码和原码相同</li><li>负数：符号位一定是1，其余位对原码取反。</li></ul><p>补码：</p><ul><li><p>正数：反码和原码相同</p></li><li><p>负数：符号位一定是1，反码+1</p><table><thead><tr><th></th><th>正数</th></tr></thead><tbody><tr><td>0</td><td>0000</td></tr><tr><td>1</td><td>0001</td></tr><tr><td>2</td><td>0010</td></tr><tr><td>3</td><td>0011</td></tr><tr><td>4</td><td>0100</td></tr><tr><td>5</td><td>0101</td></tr><tr><td>6</td><td>0110</td></tr><tr><td>7</td><td>0111</td></tr></tbody></table><p>负数为相反数</p></li></ul><blockquote><p>测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">8位算法</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果是正数，这三个都是一样的</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash">原码 0 0 0 0 0 0 0 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">反码 0 0 0 0 0 0 0 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">补码 1 0 0 0 0 0 0 1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果是负数</span></span><br><span class="line">-1</span><br><span class="line"><span class="meta">#</span><span class="bash">原码 0 0 0 0 0 0 0 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">反码 1 1 1 1 1 1 1 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">补码 1 1 1 1 1 1 1 1</span></span><br><span class="line"></span><br><span class="line">-7</span><br><span class="line"><span class="meta">#</span><span class="bash">原码 1 0 0 0 0 1 1 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">反码 1 1 1 1 1 0 0 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">补码 1 1 1 1 1 0 0 1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">二进制标志</span></span><br><span class="line">2  10</span><br><span class="line">4  100</span><br><span class="line">8  1000</span><br><span class="line">16 10000</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>如果看到一个数字，二进制的，需要了解它是有符号数还是无符号数。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(3)</title>
      <link href="/2021/09/16/assembly1_3/"/>
      <url>/2021/09/16/assembly1_3/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-3"><a href="#二进制到汇编-3" class="headerlink" title="二进制到汇编(3)"></a>二进制到汇编(3)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=5">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="二进制和16进制的深层理解"><a href="#二进制和16进制的深层理解" class="headerlink" title="二进制和16进制的深层理解"></a>二进制和16进制的深层理解</h3><p><strong>二进制</strong></p><hr><p>计算机使用二进制0 1 ! 状态！电子！</p><p>物理极限：摩尔定律！硬操作!</p><p>追求语言的极限！并发语言！软操作！</p><p><strong>量子计算机：</strong></p><p>可以实现量子计算的机器</p><p>传统计算器：集成电路！0 1 硅晶片</p><p>量子计算机的单位：昆比特(量子比特！)量子的两态来表示。</p><p>光子：正交偏振方向。</p><p>磁场：电子的自旋方向。</p><p>21世纪。计算力快到尽头了！</p><p><strong>量子计算机：</strong>提高计算力。</p><p>量子比特、量子叠加态、量子纠缠、量子并行原理…</p><blockquote><p>2019年，Google研究人员展示其最新54比特量子计算机，该计算机只用200秒便可计算完毕当前世界最大的超级计算机需1万年进行的运算。</p><p>2020年，6.18 量子体积64的量子计算机！</p><p>霍尼韦尔还表示，将在一年之内得到至少10个有效量子比特，相当于1024个量子体积。量产！</p></blockquote><p><strong>电子计算机</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二进制  0  1111</span><br><span class="line"></span><br><span class="line">0 1 10 11 100 101 110 111 1000 10001 1010 1011 1100 1101 1110</span><br></pre></td></tr></table></figure><p>二进制这么写很麻烦!二进制能否简写！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 a b c d e f</span><br></pre></td></tr></table></figure><p>这就是16进制(计算机操作系统原理)</p><p><strong>课程上的教学！2进制转化那位10进制。然后计算！</strong></p><p><strong>为什么要学习理解二进制</strong></p><p>寄存器、内存、位！底层的每一个为位都是由含义的。汇编入门</p><p>汇编高级：了解程序的深层，操作系统的内核！</p><h3 id="数据宽度理解"><a href="#数据宽度理解" class="headerlink" title="数据宽度理解"></a>数据宽度理解</h3><p>计算机：内存！给计算机增加数据宽度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bit    ▭</span><br><span class="line">Byte   ▭▭▭▭▭▭▭▭</span><br><span class="line">Word   16位</span><br><span class="line">Dword  32 位</span><br></pre></td></tr></table></figure><p>C和C++、Java都需要定义数据类型、计算机底层需要我们给数据定义宽度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">位    0  1</span><br><span class="line">字节  0-0xFF</span><br><span class="line">字    0-0xFFFF</span><br><span class="line">双字  0-0xFFFFFFFF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(2)</title>
      <link href="/2021/09/15/assembly1_2/"/>
      <url>/2021/09/15/assembly1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-2"><a href="#二进制到汇编-2" class="headerlink" title="二进制到汇编(2)"></a>二进制到汇编(2)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=3">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="进制的思想本质"><a href="#进制的思想本质" class="headerlink" title="进制的思想本质"></a>进制的思想本质</h3><p><strong>二进制？</strong> 0 1</p><p>学习进制的障碍？</p><p>人类为什么天然选择了10进制，因为人有10个指头；学好二进制要跳出固有思维。</p><p><strong>二进制</strong></p><p>思想：每一种进制都是完美的，都有自己的计算方式！</p><p><strong>进制</strong></p><p>1进制：逢一进一,结绳记事，1 1</p><p>2进制：逢二进一，计算机01 01 10</p><p>8进制：逢八进一，8个符号组成：0 1 2 3 4 5 6 7</p><p>10进制：逢10进一，10个符号组成：0 1 2 3 4 5 6 7 8 9</p><p>16进制：逢16进一，16个符号组成：0 1 2 3 4 5 6 7 8 9 a b c d e f</p><p>学好进制最关键是：<strong>查数</strong></p><p><strong>测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一进制</span></span><br><span class="line">1</span><br><span class="line">11</span><br><span class="line">111</span><br><span class="line">1111</span><br><span class="line">.....</span><br><span class="line"><span class="meta">#</span><span class="bash">三进制</span></span><br><span class="line">0 1 2</span><br><span class="line">10 11 12</span><br><span class="line">20 21 22</span><br><span class="line">100 101 102</span><br><span class="line">110 111 112</span><br><span class="line">.....</span><br><span class="line"><span class="meta">#</span><span class="bash">七进制</span></span><br><span class="line">0 1 2 3 4 5 6</span><br><span class="line">10 11 12 13 14 15 16</span><br><span class="line">20 21 22 23 24 25 26</span><br><span class="line"><span class="meta">#</span><span class="bash">一组符号，逢几进几</span></span><br></pre></td></tr></table></figure><p>问题：你真的理解进制了吗 1+1=3对吗？</p><p>十进制 0 1 2 3 4 5 6 7 8 9 </p><p>机密解密：程序员、破解程序的人！<strong>进制的加密</strong></p><h3 id="进制的运算"><a href="#进制的运算" class="headerlink" title="进制的运算"></a>进制的运算</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">八进制计算</span></span><br><span class="line">2+3=5</span><br><span class="line">2*3=6</span><br><span class="line">4+5=11</span><br><span class="line">4*5=24</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运算的本质就是查数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">8进制</span></span><br><span class="line">0 1 2 3 4 5 6 7 </span><br><span class="line">10 11 12 13 14 15 16 17</span><br><span class="line">20 21 22 23 24 25 26 27 </span><br><span class="line"><span class="meta">#</span><span class="bash">8进制计算下面的结果</span></span><br><span class="line">277+333=?</span><br><span class="line">276*54=?</span><br><span class="line">237-54=?</span><br><span class="line">234/4=?</span><br></pre></td></tr></table></figure><p><strong>八进制加法表：</strong></p><table><thead><tr><th>1+1=2</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1+2=3</td><td>2+2=4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1+3=4</td><td>2+3=5</td><td>3+3=6</td><td></td><td></td><td></td><td></td></tr><tr><td>1+4=5</td><td>2+4=6</td><td>3+4=7</td><td>4+4=10</td><td></td><td></td><td></td></tr><tr><td>1+5=6</td><td>2+5=7</td><td>3+5=10</td><td>4+5=11</td><td>5+5=12</td><td></td><td></td></tr><tr><td>1+6=7</td><td>2+6=10</td><td>3+6=11</td><td>4+6=12</td><td>5+6=13</td><td>6+6=14</td><td></td></tr><tr><td>1+7=10</td><td>2+7=11</td><td>3+7=12</td><td>4+7=13</td><td>5+7=14</td><td>6+7=15</td><td>7+7=16</td></tr></tbody></table><p><strong>八进制乘法表：</strong></p><table><thead><tr><th>1*1=1</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1*2=2</td><td>2*2=4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1*3=3</td><td>2*3=6</td><td>3*3=11</td><td></td><td></td><td></td><td></td></tr><tr><td>1*4=4</td><td>2*4=10</td><td>3*4=14</td><td>4*4=20</td><td></td><td></td><td></td></tr><tr><td>1*5=5</td><td>2*5=12</td><td>3*5=17</td><td>4*5=24</td><td>5*5=31</td><td></td><td></td></tr><tr><td>1*6=6</td><td>2*6=14</td><td>3*6=22</td><td>4*6=30</td><td>5*6=36</td><td>6*6=44</td><td></td></tr><tr><td>1*7=7</td><td>2*7=16</td><td>3*7=25</td><td>4*7=34</td><td>5*7=43</td><td>6*7=52</td><td>7*7=61</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">277</span><br><span class="line">333  +</span><br><span class="line">-------</span><br><span class="line">632</span><br><span class="line"></span><br><span class="line">276</span><br><span class="line"> 54  x</span><br><span class="line">-------</span><br><span class="line"> 1370</span><br><span class="line">1666 +</span><br><span class="line">--------</span><br><span class="line">20250</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">除法的本质</span></span><br><span class="line">234</span><br><span class="line">  4  ÷</span><br><span class="line">-------</span><br><span class="line">  47</span><br></pre></td></tr></table></figure><p><strong>结论：无论什么进制，本身都有一套完整的运算体系的，我们都可以通过列表的方式将它计算出来！</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机底层】二进制到汇编(1)</title>
      <link href="/2021/09/14/assembly1_1/"/>
      <url>/2021/09/14/assembly1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制到汇编-1"><a href="#二进制到汇编-1" class="headerlink" title="二进制到汇编(1)"></a>二进制到汇编(1)</h2><blockquote><p>前言：</p><p>推荐免费计算机底层入门讲解视频：<a href="https://www.bilibili.com/video/BV1ni4y1G7B9?p=1">【狂神说】最通俗易懂的计算机底层教学，二进制到汇编学习！_哔哩哔哩bilibili</a></p></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>汇编语言是你的必经之路</p><p><strong>语言</strong></p><p><strong>进制</strong></p><p><strong>进制如何运算</strong></p><p><strong>二进制</strong></p><p><strong>数据宽度</strong></p><p><strong>有符号树和无符号数</strong></p><p><strong>源码反码补码</strong></p><p><strong>位运算</strong></p><p><strong>位运算计算</strong></p><p><strong>汇编</strong></p><p><strong>寄存器</strong></p><p><strong>内存</strong></p><p><strong>汇编指令</strong></p><p><strong>内存复制</strong></p><p><strong>堆栈的指令</strong></p><p><strong>汇编如何写函数</strong></p><p><strong>堆栈传参</strong></p><p><strong>堆栈平衡</strong></p><p><strong>写辅助<del>到入狱</del></strong></p><h3 id="为什么要学习汇编语言"><a href="#为什么要学习汇编语言" class="headerlink" title="为什么要学习汇编语言"></a>为什么要学习汇编语言</h3><p><strong>语言：</strong></p><p>比如：人与人的沟通，学习计算机的语言。</p><p><strong>什么是机器语言</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我们目前主流的电子计算机！</span></span><br><span class="line">状态：0 和 1</span><br><span class="line"><span class="meta">#</span><span class="bash">最早的程序员，穿孔卡带</span></span><br><span class="line">四则运算(加减乘除)</span><br><span class="line">0100 0000</span><br><span class="line">0100 1000</span><br><span class="line">0100 1000</span><br><span class="line">0100 1000</span><br></pre></td></tr></table></figure><p>这些复杂的机器语言，能简化吗？助记符！汇编语言！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加 ICN  编译器-&gt;  0100 0000</span><br><span class="line">减 DEC  编译器-&gt;  0100 1000</span><br><span class="line">乘 MUL  编译器-&gt;  0100 1000</span><br><span class="line">除 DIV  编译器-&gt;  0100 1000</span><br></pre></td></tr></table></figure><p>离程序的本质：有隔阂，汇编一般用于底层的编写，单片机</p><p><strong>C语言</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加 A+B  编译器-&gt;  0100 0000</span><br><span class="line">减 A-B  编译器-&gt;  0100 1000</span><br><span class="line">乘 A*B  编译器-&gt;  0100 1000</span><br><span class="line">除 A/B  编译器-&gt;  0100 1000</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4kbCcR"><img src="https://z3.ax1x.com/2021/09/14/4kbCcR.png" alt="4kbCcR.png"></a></p><p>使用工具：<a href="https://jokerdig.lanzoui.com/iIAgju0349g">VC6</a>  <a href="https://jokerdig.lanzoui.com/iMnICu0321g">OD</a></p><blockquote><p>下载密码：joker</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaAAR】Java注解和反射(6)</title>
      <link href="/2021/09/11/javaAAR1_6/"/>
      <url>/2021/09/11/javaAAR1_6/</url>
      
        <content type="html"><![CDATA[<h2 id="Java注解和反射-6"><a href="#Java注解和反射-6" class="headerlink" title="Java注解和反射(6)"></a>Java注解和反射(6)</h2><blockquote><p>前言：</p><p>推荐免费Java注解和反射讲解视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3?p=16">【狂神说Java】注解和反射_哔哩哔哩_bilibili</a></p><p>Java注解和反射(AAR)笔记代码下载地址：</p><p>蓝奏云：<a href="https://jokerdig.lanzoui.com/iJinhtvx43a">下载地址</a> 密码：joker</p><p>百度云：<a href="https://pan.baidu.com/s/15IR6PohT1bZy8FdMVm4EwQ">下载地址</a> 提取码：0y6a</p></blockquote><h3 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h3><p><strong>反射操作注解</strong></p><ul><li>getAnnotations</li><li>getAnnotation</li></ul><p><strong>练习：ORM</strong></p><ul><li><p>了解什么是ORM</p><ul><li>Object relationship Mapping –&gt; 对象关系映射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>001</td><td>张三</td><td>22</td></tr><tr><td>002</td><td>李四</td><td>23</td></tr></tbody></table></li><li><p>类和表结构对应</p></li><li><p>属性和字段对应</p></li><li><p>对象和记录对应</p></li><li><p>要求：利用注解和反射完成类和表结构的银蛇关系</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/11 - 20:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//练习反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;com.jokerdig.reflection.Student1&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解value的值</span></span><br><span class="line">        Stu annotation = (Stu) c1.getAnnotation(Stu.class);</span><br><span class="line">        String value = annotation.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        FieldStu annotation1 = name.getAnnotation(FieldStu.class);</span><br><span class="line">        System.out.println(annotation1.colunName());</span><br><span class="line">        System.out.println(annotation1.type());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Stu(&quot;db_student&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span></span>&#123;</span><br><span class="line">    <span class="meta">@FieldStu(colunName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@FieldStu(colunName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@FieldStu(colunName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student1&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span>  Stu&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FieldStu&#123;</span><br><span class="line">    <span class="function">String <span class="title">colunName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaAAR】Java注解和反射(5)</title>
      <link href="/2021/09/10/javaAAR1_5/"/>
      <url>/2021/09/10/javaAAR1_5/</url>
      
        <content type="html"><![CDATA[<h2 id="Java注解和反射-5"><a href="#Java注解和反射-5" class="headerlink" title="Java注解和反射(5)"></a>Java注解和反射(5)</h2><blockquote><p>前言：</p><p>推荐免费Java注解和反射讲解视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3?p=13">【狂神说Java】注解和反射_哔哩哔哩_bilibili</a></p></blockquote><h3 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h3><p><strong>有了Class对象，能做什么：</strong></p><ul><li>创建类的对象：调用Class对象的newInstance()方法：<ul><li>类必须有一个无参数的构造器。</li><li>类的构造器的访问权限需要足够。</li></ul></li></ul><p>思考：难道没有无参的构造器就不能创建对象了吗？只要操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。</p><ul><li>步骤如下：<ul><li>通过Class类的<code>getDeclaredConstructor(Class...parameterTypes</code>取得本类的指定形参类型的构造器。</li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。</li><li>通过Constructor实例化对象。</li></ul></li></ul><p><strong>调用指定的方法：</strong></p><p>​    通过反射，调用类中的方法，通过Method类完成。</p><ul><li><p>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</p></li><li><p>之后使用Object invoke(Object obj,Object[]args)进行调用，并向方法中传递要设置的obj对象的参数信息。</p><p><a href="https://imgtu.com/i/hvVNtO"><img src="https://z3.ax1x.com/2021/09/10/hvVNtO.png" alt="hvVNtO.png"></a></p></li></ul><p><strong>调用指定的方法：</strong></p><p>​    Object invoke(Object obj,Object… args)</p><ul><li>Object对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[]args为null</li><li>若原方法声明为private，则需要在调用此invoke()方法前，显示调用方法对象的<code>setAccessible(true)</code>方法，将可访问private的方法</li></ul><p><strong>setAccessible</strong></p><ul><li><p>Method和Field、Constructor对象都有setAccessible()方法。</p></li><li><p>setAccessible作用是启动和禁用访问安全检查的开关。</p></li><li><p>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。</p><ul><li>提高反射的效率，如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true</li><li>使原本无法访问的私有乘员也可以访问</li></ul></li><li><p>参数值为false则指示反射的对象应该实施Java语言访问检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/10 - 19:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.jokerdig.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        User user =(User) c1.newInstance();<span class="comment">//调用无参构造器(过时)</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        User user1 =(User) constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用方法</span></span><br><span class="line">        User user3 =(User) c1.newInstance();<span class="comment">//调用无参构造器</span></span><br><span class="line">        <span class="comment">//通过反射获取方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//invoke:激活</span></span><br><span class="line">        <span class="comment">//用法：(对象,&quot;方法的值&quot;)</span></span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user4 =(User) c1.newInstance();<span class="comment">//调用无参构造器</span></span><br><span class="line">        Field name =c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//关掉权限检测,来访问私有属性</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);<span class="comment">//关闭检测,默认为false</span></span><br><span class="line">        name.set(user4,<span class="string">&quot;张三2&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="性能对比分析"><a href="#性能对比分析" class="headerlink" title="性能对比分析"></a>性能对比分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/10 - 19:40</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//分析性能问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法执行10000次需要&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = user.getClass();</span><br><span class="line">        Method getName = c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方法执行10000次需要&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//放射方式调用，关闭检查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = user.getClass();</span><br><span class="line">        Method getName = c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">false</span>);<span class="comment">//关闭检测</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">           getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭检测反射方法执行10000次需要&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取泛型信息"><a href="#获取泛型信息" class="headerlink" title="获取泛型信息"></a>获取泛型信息</h3><p><strong>反射操作泛型：</strong></p><ul><li>Java采用泛型擦除的机制来引入泛型，Java中的泛型仅仅是给编译器javac使用的，确保数据的安全性和免去强制类型转换问题；但是，一旦编译完成，所有和泛型有关的类型全部擦除。</li><li>为了通过反射操作这些类型，Java新增了ParameterizedType，GenericArrayType，TypeVariable和WildcardType几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型。</li></ul><ul><li><p>ParameterizedType：表示一种参数化类型，比如<code>Collection&lt;String&gt;</code></p></li><li><p>GenericArrayType：表示一种元素类型是参数化类型或者类型变量的数组类型</p></li><li><p>TypeVarable：是各种类型变量的公共父接口</p></li><li><p>WildcardType：代表一种通配符类型表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/10 - 19:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,User&gt; <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method method = Demo09.class.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class,List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; &quot;</span>+genericParameterType);</span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">             Type[] actual =((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type type : actual) &#123;</span><br><span class="line">                    System.out.println(type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        method = Demo09.class.getMethod(<span class="string">&quot;test2&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        Type  genericReturnType=method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualType =((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type type : actualType) &#123;</span><br><span class="line">                System.out.println(type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaAAR】Java注解和反射(4)</title>
      <link href="/2021/09/09/javaAAR1_4/"/>
      <url>/2021/09/09/javaAAR1_4/</url>
      
        <content type="html"><![CDATA[<h2 id="Java注解和反射-4"><a href="#Java注解和反射-4" class="headerlink" title="Java注解和反射(4)"></a>Java注解和反射(4)</h2><blockquote><p>前言：</p><p>推荐免费Java注解和反射讲解视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3?p=10">【狂神说Java】注解和反射_哔哩哔哩_bilibili</a></p></blockquote><h3 id="分析类初始化"><a href="#分析类初始化" class="headerlink" title="分析类初始化"></a>分析类初始化</h3><p> <strong>什么时候会发生类初始化：</strong></p><ul><li><p>类的主动引用(一定会发生类的初始化)</p><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员(除了final常量)和静态方法</li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li><p>类的被动引用(不会发生类的初始化)</p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化。</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化(常量链接阶段就存入调用类的常量池中了)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/9 - 17:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;main类被加载&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//主动调用</span></span><br><span class="line">         Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        <span class="comment">//反射会产生主动引用</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.jokerdig.reflection.Son&quot;</span>);</span><br><span class="line">        <span class="comment">//不会产生类的引用方法</span></span><br><span class="line">        System.out.println(Son.b);</span><br><span class="line">        Son[] array = <span class="keyword">new</span> Son[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//常量不会引起类初始化</span></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m =<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p><strong>类加载器的作用</strong></p><ul><li><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后再堆中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区中类数据的访问入口。</p></li><li><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p><p><a href="https://imgtu.com/i/hL4qLF"><img src="https://z3.ax1x.com/2021/09/09/hL4qLF.png" alt="hL4qLF.png"></a></p></li><li><p>类加载器作用时用来把类(class)装载进内存的。JVM规范定义了如下类型的类的加载器。</p><p><a href="https://imgtu.com/i/hL703R"><img src="https://z3.ax1x.com/2021/09/09/hL703R.md.png" alt="hL703R.md.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/9 - 18:14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        ClassLoader systemC = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载器-&gt;扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemC.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        <span class="comment">//获取扩展类的父类加载器-&gt;根加载器(C/C++)</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader=Class.forName(<span class="string">&quot;com.jokerdig.reflection.Demo05&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当JDK内部类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader1=Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">        <span class="comment">//如何获得系统类加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取类的运行时结构"><a href="#获取类的运行时结构" class="headerlink" title="获取类的运行时结构"></a>获取类的运行时结构</h3><p>通过反射获取运行时类的完整结构：</p><p>Filed、Method、Constructor、Superclass、Interface、Annotation</p><ul><li>实现的全部接口</li><li>所继承的父类</li><li>全部的构造器</li><li>全部的方法</li><li>全部的Field</li><li>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jokerdig.reflection.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/9 - 18:44</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//获得类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.jokerdig.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        c1 = user.getClass();</span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public</span></span><br><span class="line">        fields=c1.getDeclaredFields();<span class="comment">//找到所有的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定属性</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获得本类及其父类的全部public方法</span></span><br><span class="line">        <span class="keyword">for</span>(Method method :methods)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的:&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();<span class="comment">//获得本类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span>(Method method :methods)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods:&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        <span class="comment">//重载</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors)&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        constructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;D:&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        Constructor declaredConstructors = c1.getDeclaredConstructor(String.class, String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span>+declaredConstructors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//User类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String password, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><ul><li>在实际的操作中，取得类的信息的操作代码，并不会经常开发。</li><li>一定要熟悉<code>java.lang.reflect</code>包的作用，反射机制。</li><li>如何取得实行、方法、构造器的名称，修饰符等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaAAR】Java注解和反射(3)</title>
      <link href="/2021/09/08/javaAAR1_3/"/>
      <url>/2021/09/08/javaAAR1_3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java注解和反射-3"><a href="#Java注解和反射-3" class="headerlink" title="Java注解和反射(3)"></a>Java注解和反射(3)</h2><blockquote><p>前言：</p><p>推荐免费Java注解和反射讲解视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3?p=7">【狂神说Java】注解和反射_哔哩哔哩_bilibili</a></p></blockquote><h3 id="得到Class类的几种方式"><a href="#得到Class类的几种方式" class="headerlink" title="得到Class类的几种方式"></a>得到Class类的几种方式</h3><p><strong>Class类：</strong></p><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。</p><p>对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的时一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><strong>Class类的常用方法：</strong></p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassforName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体(类，接口，数组类或void)的名称</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMothed(String name,Class.. T)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><p><strong>获取Class类的实例：</strong></p><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cla = Person.class;</span><br></pre></td></tr></table></figure><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cla = Person.getClass();</span><br></pre></td></tr></table></figure><p>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出<code>ClassNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cla = Class.forName(<span class="string">&quot;demo01.Student&quot;</span>);</span><br></pre></td></tr></table></figure><p>内置基本数据类型可以直接用<code>类名.Type</code></p><p>还可以利用ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/8 - 13:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试Class类的创建方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是：&quot;</span>+person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法一：通过对象获得</span></span><br><span class="line">        Class cla1 = person.getClass();</span><br><span class="line">        System.out.println(cla1.hashCode());</span><br><span class="line">        <span class="comment">//方法二：forName获得</span></span><br><span class="line">        Class&lt;?&gt; cla2 = Class.forName(<span class="string">&quot;com.jokerdig.reflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(cla2.hashCode());</span><br><span class="line">        <span class="comment">//方式三：通过类名.class获得</span></span><br><span class="line">        Class cla3 = Student.class;</span><br><span class="line">        System.out.println(cla3.hashCode());</span><br><span class="line">        <span class="comment">//方式四：基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        Class&lt;Integer&gt; cla4= Integer.TYPE;</span><br><span class="line">        System.out.println(cla4.hashCode());</span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        Class cla5 = cla1.getSuperclass();</span><br><span class="line">        System.out.println(cla5.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=<span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有类型的Class对象"><a href="#所有类型的Class对象" class="headerlink" title="所有类型的Class对象"></a>所有类型的Class对象</h3><ul><li>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类。</li><li>interface：接口</li><li>[]：数组</li><li>enum：美剧</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/8 - 14:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//所有类型的class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 = Object.class;<span class="comment">//类</span></span><br><span class="line">        Class c2 = Comparable.class;<span class="comment">//接口</span></span><br><span class="line">        Class c3 = String[].class;<span class="comment">//一维数组</span></span><br><span class="line">        Class c4 = <span class="keyword">int</span>[][].class;<span class="comment">//二位数组</span></span><br><span class="line">        Class c5 = Override.class;<span class="comment">//注解</span></span><br><span class="line">        Class c6 = ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        Class c7 = Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8 = <span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        Class c9 = Class.class;<span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> []a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> []b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">//只要元素类型和维度一样，就是同一个Class</span></span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h3><p><a href="https://imgtu.com/i/h74g2D"><img src="https://z3.ax1x.com/2021/09/08/h74g2D.png" alt="h74g2D.png"></a></p><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><a href="https://imgtu.com/i/h75PRU"><img src="https://z3.ax1x.com/2021/09/08/h75PRU.png" alt="h75PRU.png"></a></p><p><strong>类的加载与ClassLoader的理解：</strong></p><ul><li><p>加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的<code>java.lang.Class</code>对象。</p></li><li><p>连接：将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题；</li><li>准备：正式未类变量(static)分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配；</li><li>解析：虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程;</li></ul></li><li><p>初始化：</p><ul><li><p>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中所有类变量的复制动作和静态代码块中的语句合并产生的。(类构造器时构造类信息的，不是构造该类对象的构造器)。</p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先出发其父类的初始化。</p></li><li><p>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</p><p><a href="https://imgtu.com/i/h7HEUs"><img src="https://z3.ax1x.com/2021/09/08/h7HEUs.md.png" alt="h7HEUs.md.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/8 - 14:44</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         1.加载到内存，会产生一个类对应class对象</span></span><br><span class="line"><span class="comment">         2.链接，连接结束后m=0</span></span><br><span class="line"><span class="comment">         3.初始化</span></span><br><span class="line"><span class="comment">           &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;A类静态代码块初始化&quot;);</span></span><br><span class="line"><span class="comment">                m=300;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m=<span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaAAR】Java注解和反射(2)</title>
      <link href="/2021/09/07/javaAAR1_2/"/>
      <url>/2021/09/07/javaAAR1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="Java注解和反射-2"><a href="#Java注解和反射-2" class="headerlink" title="Java注解和反射(2)"></a>Java注解和反射(2)</h2><blockquote><p>前言：</p><p>推荐免费Java注解和反射讲解视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3?p=4">【狂神说Java】注解和反射_哔哩哔哩_bilibili</a></p></blockquote><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ul><li><p>使用@interface自定义注解时，自动继承了<code>java.lang.annotation.Annotation</code>接口</p></li><li><p>分析：</p><ul><li>@interface用来声明一个注释，格式：public@interface注释名{定义内容}</li><li>其中的每一个方法实际上是声明了一个配置参数。</li><li>方法的名称就是参数的名称。</li><li>返回值类型就是参数的类型{返回值只能是基本类型,Class,String,enum}</li><li>可以通过default来声明参数的默认值。</li><li>如果只有一个参数成员，一般参数名为value</li><li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串”0”作为默认值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/7 - 16:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义了默认值就可不传参，否则不传参会报错</span></span><br><span class="line">    <span class="meta">@MyAnnotation1(name=&quot;自定义注解&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型+参数名()</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//默认值-1代表不存在</span></span><br><span class="line">    String[] schools() <span class="keyword">default</span>&#123;<span class="string">&quot;家里蹲大学&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;<span class="comment">//value可以不传参</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h3><p><strong>静态和动态语言</strong></p><p>​    动态语言：</p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或时其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。</li><li>主要动态语言：Object-C，C#，JavaScript，PHP，Python等。</li></ul><p>​    静态语言：</p><ul><li>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java，C，C++</li><li>Java不是动态语言，但Java可以称之为”准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</li></ul><p><strong>Java Reflection</strong></p><ul><li><p>Reflection(反射)是Java被视为动态语言的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，通过这个镜子看到类的结构，所以我们形象的称之为：反射。</p><p><a href="https://imgtu.com/i/hoKx74"><img src="https://z3.ax1x.com/2021/09/07/hoKx74.md.png" alt="hoKx74.md.png"></a></p></li></ul><h3 id="获得反射对象"><a href="#获得反射对象" class="headerlink" title="获得反射对象"></a>获得反射对象</h3><p>​    <strong>Java反射机制提供的功能：</strong></p><ul><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时获取泛型信息。</li><li>在运行时调用任意一个对象的成员变量和方法。</li><li>在运行时处理注释。</li><li>生成动态代理。</li><li>……</li></ul><p>​    <strong>反射的优点：</strong></p><ul><li>可以实现动态创建对象和编译，体现出很大的灵活性。</li></ul><p>​    <strong>反射的缺点：</strong></p><ul><li>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</li></ul><p>​    <strong>反射相关的主要API：</strong></p><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li><li>……</li></ul><p>​    <strong>Class类</strong></p><p>​    在Object类中定义了以下的方法，此方法将被所有子类继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p><p><a href="https://imgtu.com/i/ho87h4"><img src="https://z3.ax1x.com/2021/09/07/ho87h4.png" alt="ho87h4.png"></a></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/7 - 17:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//什么叫反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.jokerdig.demo.User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.jokerdig.demo.User&quot;</span>);</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类 pojo,entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaAAR】Java注解和反射(1)</title>
      <link href="/2021/09/06/javaAAR1_1/"/>
      <url>/2021/09/06/javaAAR1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="Java注解和反射-1"><a href="#Java注解和反射-1" class="headerlink" title="Java注解和反射(1)"></a>Java注解和反射(1)</h2><blockquote><p>前言：</p><p>推荐免费Java注解和反射讲解视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3?p=1">【狂神说Java】注解和反射_哔哩哔哩_bilibili</a></p></blockquote><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><ul><li><p>Annotation是从JDK5.0开始引入的新技术</p></li><li><p>Annotation的作用：</p><ul><li>不是程序本身，可以对程序作出结束(这一点和注释(comment)没什么区别)</li><li><strong>可以被其他程序(如:编译器等)读取</strong></li></ul></li><li><p>Annotation的格式：</p><ul><li>注解是以”@注释名”在代码中存在的，还可以添加一些参数值，例如：@SuppressWarnings(value=”unchecked”)</li></ul></li><li><p>Annotation在哪里使用：</p><ul><li>可以附加在package,class,method,field等上面，相当于给它们添加了额外的辅助信息，可以通过反射机制编程实现对这些元数据的访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/6 - 21:04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//什么是注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul><li><p>@Override:定义在<code>java.lang.Override</code>中，此注解只适用于修辞手法，表似一个方法声明打算重写超类中的另一个方法声明。</p></li><li><p>@Deprecated:定义在<code>java.lang.Deprecated</code>中，此注释可以用于修辞方法，属性，类，表示不鼓励了程序员使用这样的元素，通常是因为它很危险或者有更好的选择。</p></li><li><p>@SuppressWarnings:定义在<code>java.lang.SuppressWarnings</code>中,用来抑制编译时的警告信息。</p></li><li><p>与前两个注释有所不同，你需要添加一个参数才能正确使用，这些参数都是已经定义好的：</p><ul><li>@SuppressWarnings(“all”)</li><li>@SuppressWarnings(“unchecked”)</li><li>@SupressWarnings(value={“unchecked”,”deprecation”})</li><li>…..</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/6 - 21:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span><span class="comment">//取消警告提示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Override  重写的注释</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//过时的，已被淘汰的</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test();<span class="comment">//已过时，但也能用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul><li><p>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-nanotation类型，它们被用来提供对其他annotation类型作说明。</p></li><li><p>这些类型和它们所支持的类在<code>java.lang.annotation</code>包中可以找到(@Target,@Retention,@Documented,@Inherited)</p><ul><li><strong>@Target</strong>:用于描述注解的使用范围(即:被描述的注解可以用在什么地方)</li><li><strong>@Retention</strong>:表示需要在什么级别保存该注释信息，用于描述注解的生命周期<ul><li>(SOURCE&lt;CLASS&lt;RUNTIME)</li></ul></li><li>@Document:说明该注释将被包含在javadoc中</li><li>@Inherited:说明子类可以<strong>继承</strong>父类中的该注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/6 - 21:28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个注释</span></span><br><span class="line"><span class="comment">//@Target 目标,表示注解能用在那些地方</span></span><br><span class="line"><span class="meta">@Target(value= &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment">//Retention 表示注解在什么地方还有效</span></span><br><span class="line"><span class="comment">//runtime&gt;class&gt;source</span></span><br><span class="line"><span class="meta">@Retention(value= RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//Documented  表示是否将我们的注解生成在Javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//InHerited  子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java注解和反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaNET】Java网路编程(4)</title>
      <link href="/2021/09/04/javaNET1_4/"/>
      <url>/2021/09/04/javaNET1_4/</url>
      
        <content type="html"><![CDATA[<h2 id="Java网路编程-4"><a href="#Java网路编程-4" class="headerlink" title="Java网路编程(4)"></a>Java网路编程(4)</h2><blockquote><p>前言：</p><p>推荐免费Java网络编程实战讲解视频：<a href="https://www.bilibili.com/video/BV1LJ411z7vY?p=10">【狂神说Java】网络编程实战讲解_哔哩哔哩_bilibili</a></p><p>Java网络编程(NET)笔记代码下载地址：</p><p>蓝奏云：<a href="https://jokerdig.lanzouw.com/ixwvmtlac8f">下载地址</a> 密码：joker</p><p>百度云：<a href="https://pan.baidu.com/s/1i87WzEIxY_m0UpzzEhbpug">下载地址</a> 提取码：jpvx</p></blockquote><h3 id="UDP聊天实现"><a href="#UDP聊天实现" class="headerlink" title="UDP聊天实现"></a>UDP聊天实现</h3><p><strong>循环发送消息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 10:37</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpSenderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备数据，控制台读取 System.in</span></span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环发送</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String data=reader.readLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = data.getBytes();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">6666</span>));</span><br><span class="line"></span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环接收消息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 10:37</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServerDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//准备接收包裹</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="comment">//断开</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">            String s = <span class="keyword">new</span> String(data,<span class="number">0</span>, packet.getLength());<span class="comment">//packet.length()会无法停止</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();<span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP多线程在线咨询"><a href="#UDP多线程在线咨询" class="headerlink" title="UDP多线程在线咨询"></a>UDP多线程在线咨询</h3><p><strong>在线咨询：</strong></p><p>两个人都可以是发送方，也都可以是接收方。</p><p><strong>发送端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 12:49</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSeed</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkSeed</span><span class="params">(<span class="keyword">int</span> fromPort, String toIp, <span class="keyword">int</span> toPort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="keyword">this</span>.toIp = toIp;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">            <span class="comment">//准备数据，控制台读取 System.in</span></span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//循环发送</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String data= <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                data = reader.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = data.getBytes();</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length,<span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIp,<span class="keyword">this</span>.toPort));</span><br><span class="line">                socket.send(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 13:23</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">    DatagramPacket packet=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String fromMsg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(<span class="keyword">int</span> port,String fromMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.fromMsg = fromMsg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//准备接收包裹</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                packet = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">                <span class="comment">//断开</span></span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">                String s = <span class="keyword">new</span> String(data,<span class="number">0</span>, packet.getLength());<span class="comment">//packet.length()会无法停止</span></span><br><span class="line">                System.out.println(fromMsg+<span class="string">&quot;发送：&quot;</span>+s);</span><br><span class="line">                <span class="keyword">if</span>(s.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();<span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用户：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.chat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 13:35</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启两个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSeed(<span class="number">7777</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">9999</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">8888</span>,<span class="string">&quot;客户&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.chat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 13:36</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//客户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSeed(<span class="number">6666</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">9999</span>,<span class="string">&quot;用户&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP下载网络资源"><a href="#UDP下载网络资源" class="headerlink" title="UDP下载网络资源"></a>UDP下载网络资源</h3><p>URL：统一资源定位符，定位互联网某一资源。</p><p>DNS域名解析：<a href="http://www.jokerdig.com/">www.jokerdig.com</a></p><hr><p>协议：//ip地址：端口/项目名/资源</p><p><strong>URL方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 13:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">      URL url=  <span class="keyword">new</span> URL(<span class="string">&quot;https://localhost:8080/helloword/index.jsp?username=name&amp;password=123&quot;</span>);</span><br><span class="line">        System.out.println(url.getProtocol());<span class="comment">//协议</span></span><br><span class="line">        System.out.println(url.getHost());<span class="comment">//主机ip</span></span><br><span class="line">        System.out.println(url.getPort());<span class="comment">//端口</span></span><br><span class="line">        System.out.println(url.getPath());<span class="comment">//文件</span></span><br><span class="line">        System.out.println(url.getFile());<span class="comment">//全路径</span></span><br><span class="line">        System.out.println(url.getQuery());<span class="comment">//参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>URL文件下载：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/4 - 14:05</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlFileDownload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      <span class="comment">//下载地址</span></span><br><span class="line">      URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://jokerdig.com/images/avatar.png&quot;</span>);</span><br><span class="line">      <span class="comment">//连接资源</span></span><br><span class="line">      HttpURLConnection http=(HttpURLConnection) url.openConnection();</span><br><span class="line">        InputStream inputStream = http.getInputStream();</span><br><span class="line">        FileOutputStream file = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;avatar.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            file.write(buffer,<span class="number">0</span>,len);<span class="comment">//写出数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        file.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        http.disconnect();<span class="comment">//断开</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java网路编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaNET】Java网路编程(3)</title>
      <link href="/2021/09/03/javaNET1_3/"/>
      <url>/2021/09/03/javaNET1_3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java网路编程-3"><a href="#Java网路编程-3" class="headerlink" title="Java网路编程(3)"></a>Java网路编程(3)</h2><blockquote><p>前言：</p><p>推荐免费Java网络编程实战讲解视频：<a href="https://www.bilibili.com/video/BV1LJ411z7vY?p=7">【狂神说Java】网络编程实战讲解_哔哩哔哩_bilibili</a></p></blockquote><h3 id="TCP文件上传实现"><a href="#TCP文件上传实现" class="headerlink" title="TCP文件上传实现"></a>TCP文件上传实现</h3><p><strong>文件上传</strong></p><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/3 - 19:04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//输出端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Socket连接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//创建一个输出流</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;OIP.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//写出文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=fileInputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通知服务器，已经传输完了</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//传输完毕</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定服务器接收完毕，才能断开连接</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//String byte[]</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2014</span>];</span><br><span class="line">        <span class="keyword">int</span> len1;</span><br><span class="line">        <span class="keyword">while</span>((len1=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(bytes,<span class="number">0</span>,len1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(byteArrayOutputStream.toString());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/2 - 19:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteStream = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//我得有一个地址</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9988</span>);</span><br><span class="line">            <span class="comment">//等待客户端连接过来</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//读取客户端消息</span></span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">/*    int len;</span></span><br><span class="line"><span class="comment">            while((len=inputStream.read(buffer))!=1)&#123;</span></span><br><span class="line"><span class="comment">                String msg=  new String(buffer,0,len);</span></span><br><span class="line"><span class="comment">                System.out.println(msg);</span></span><br><span class="line"><span class="comment">                //这样中文进来会乱码</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            byteStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(byteStream.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (byteStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    byteStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初识Tomcat"><a href="#初识Tomcat" class="headerlink" title="初识Tomcat"></a>初识Tomcat</h3><blockquote><p><a href="https://tomcat.apache.org/download-80.cgi#8.5.70">Tomcat下载</a></p></blockquote><p>服务端</p><ul><li>自定义S</li><li>Tomcat服务器</li></ul><p>客户端</p><ul><li>自定义C</li><li>浏览器B</li></ul><p>解决服务器运行乱码：</p><p>​    Tomcat安装目录&gt;conf&gt;logging文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将该处UTF-8改为GBK</span></span><br><span class="line"><span class="string">java.util.logging.ConsoleHandler.level</span> <span class="string">=</span> <span class="string">FINE</span></span><br><span class="line"><span class="string">java.util.logging.ConsoleHandler.formatter</span> <span class="string">=</span> <span class="string">org.apache.juli.OneLineFormatter</span></span><br><span class="line"><span class="string">java.util.logging.ConsoleHandler.encoding</span> <span class="string">=</span> <span class="string">GBK</span></span><br></pre></td></tr></table></figure><h3 id="UDP消息发送"><a href="#UDP消息发送" class="headerlink" title="UDP消息发送"></a>UDP消息发送</h3><p>发短信，不用连接，需要知道对方的地址。</p><p><strong>发送端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/3 - 20:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//不需要连接服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//建立一个socket</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//建个包</span></span><br><span class="line">        String manage=<span class="string">&quot;你好，服务器！&quot;</span>;</span><br><span class="line">        <span class="comment">//发送的地址</span></span><br><span class="line">        InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> port =<span class="number">9090</span>;</span><br><span class="line">        <span class="comment">//数据 数据的长度起始，发送给谁</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(manage.getBytes(),<span class="number">0</span>, manage.getBytes().length, localhost, port);</span><br><span class="line">        <span class="comment">//发送包</span></span><br><span class="line">        datagramSocket.send(packet);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/3 - 20:08</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//还要等待客户端的连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpDemo3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//接收数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        socket.receive(packet);<span class="comment">//阻塞数据</span></span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java网路编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaNET】Java网路编程(2)</title>
      <link href="/2021/09/02/javaNET1_2/"/>
      <url>/2021/09/02/javaNET1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="Java网路编程-2"><a href="#Java网路编程-2" class="headerlink" title="Java网路编程(2)"></a>Java网路编程(2)</h2><blockquote><p>前言：</p><p>推荐免费Java网络编程实战讲解视频：<a href="https://www.bilibili.com/video/BV1LJ411z7vY?p=4">【狂神说Java】网络编程实战讲解_哔哩哔哩_bilibili</a></p></blockquote><h3 id="端口Port"><a href="#端口Port" class="headerlink" title="端口Port"></a>端口Port</h3><p>端口表示计算机上的一个程序的进程：</p><ul><li><p>不同的进程有不同的端口号！用来区分软件。</p></li><li><p>规定0-65535</p></li><li><p>TCP,UDP：65535*2 tcp:80，udp:80，单个协议下，端口不能冲突</p></li><li><p>端口分类：</p><ul><li><p>公有端口 0-1023</p><ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telent：23</li></ul></li><li><p>程序注册端口：1024-49151，分配用户或程序</p><ul><li>Tomcat：8080</li><li>MySQL：3360</li><li>Oracle：1521</li></ul></li><li><p>动态、私有：49152-65535</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">netstat</span> <span class="string">-ano</span> <span class="comment">#查看所有的端口</span></span><br><span class="line"><span class="string">netstat</span> <span class="string">-ano|findstr&quot;8080&quot;</span> <span class="comment">#查看指定端口</span></span><br><span class="line"><span class="string">tasklist|findstr&quot;端口号&quot;</span> <span class="comment">#查看指定端口的进程</span></span><br></pre></td></tr></table></figure><p>任务管理器：Ctrl+Shift+Esc</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/2 - 19:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        InetSocketAddress inetSocketAddress1 = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        System.out.println(inetSocketAddress);</span><br><span class="line">        System.out.println(inetSocketAddress1);</span><br><span class="line"></span><br><span class="line">        System.out.println(inetSocketAddress.getAddress());<span class="comment">//地址</span></span><br><span class="line">        System.out.println(inetSocketAddress.getHostName());<span class="comment">//域名</span></span><br><span class="line">        System.out.println(inetSocketAddress.getPort());<span class="comment">//端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>协议：约定，就好比沟通语言的类型(普通话)</p><p><strong>网络通信协议：</strong>速率，传输码率，代码结构，传输控制…</p><p><strong>问题：</strong>非常的复杂</p><p>大事化小：分层</p><p>TCP/IP协议：</p><ul><li><p>TCP：用户传输协议</p></li><li><p>UDP：用户数据报协议</p></li><li><p>IP：网络互联协议</p></li></ul><p>TCP/UDP对比：</p><ul><li>TCP：打电话<ul><li>连接，稳定</li><li>三次握手，四次挥手</li><li>客户端、服务端</li><li>传输完成，释放连接，效率低</li></ul></li><li>UDP：发短信<ul><li>不连接，不稳定</li><li>客户端，服务端没有明确的界线</li><li>不管有没有准备好，都可以发给你</li><li>DDOS：洪水攻击(饱和攻击)</li></ul></li></ul><h3 id="TCP实现聊天"><a href="#TCP实现聊天" class="headerlink" title="TCP实现聊天"></a>TCP实现聊天</h3><p>客户端</p><ul><li><p>连接服务器Socket</p></li><li><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/2 - 19:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 要知到服务器的地址</span></span><br><span class="line">            InetAddress serverIP = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="comment">//端口号</span></span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建一个socket连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(serverIP,port);</span><br><span class="line">            <span class="comment">//发送消息IO流</span></span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;Hello World send-&gt;&quot;</span>.getBytes());<span class="comment">//转换为字节</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>服务器</p><ul><li><p>建立服务的端口ServerSocket</p></li><li><p>等待用户的连接 accept</p></li><li><p>接收用户消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/2 - 19:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteStream = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//我得有一个地址</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//等待客户端连接过来</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//读取客户端消息</span></span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">/*    int len;</span></span><br><span class="line"><span class="comment">            while((len=inputStream.read(buffer))!=1)&#123;</span></span><br><span class="line"><span class="comment">                String msg=  new String(buffer,0,len);</span></span><br><span class="line"><span class="comment">                System.out.println(msg);</span></span><br><span class="line"><span class="comment">                //这样中文进来会乱码</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            byteStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(byteStream.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (byteStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    byteStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java网路编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaNET】Java网路编程(1)</title>
      <link href="/2021/09/01/javaNET1_1/"/>
      <url>/2021/09/01/javaNET1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="Java网路编程-1"><a href="#Java网路编程-1" class="headerlink" title="Java网路编程(1)"></a>Java网路编程(1)</h2><blockquote><p>前言：</p><p>推荐免费Java网络编程实战讲解视频：<a href="https://www.bilibili.com/video/BV1LJ411z7vY?p=1">【狂神说Java】网络编程实战讲解_哔哩哔哩_bilibili</a></p></blockquote><h3 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h3><ul><li><p>概述：</p><p>计算机网络是指将<a href="https://baike.baidu.com/item/%E5%9C%B0%E7%90%86">地理</a>位置不同的具有独立功能的多台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>及其外部设备，通过通信线路连接起来，在<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3997">网络操作系统</a>，<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/6579078">网络管理软件</a>及<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/4438611">网络通信协议</a>的管理和协调下，实现<a href="https://baike.baidu.com/item/%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/233480">资源共享</a>和信息传递的计算机系统。*-百度百科*</p></li><li><p>网络编程目的：</p><p>无线电台，传播交流信息，数据交换，通信。</p></li><li><p>达到的效果：</p><ul><li>如何准确的定位网络上的一台主机 IP：端口，定位到计算机某个资源。</li><li>找到了这个主机，如何传输数据呢？</li></ul><p>Javaweb:   网页编程   B/S</p><p>Java网络编程: TCP/IP  C/S</p></li></ul><h3 id="网络通信的两个要素"><a href="#网络通信的两个要素" class="headerlink" title="网络通信的两个要素"></a>网络通信的两个要素</h3><p>如何实现网络的通信？</p><p><strong>通信双方的地址：</strong></p><ul><li>IP</li><li>端口号</li></ul><p><strong>规则：网络通信协议</strong></p><p>TCP/IP通信(OSI七层网络模型)</p><p><a href="https://imgtu.com/i/hBX4wd"><img src="https://z3.ax1x.com/2021/09/01/hBX4wd.md.gif" alt="hBX4wd.md.gif"></a></p><p><strong>传输层为本课程重点</strong></p><p>万物皆对象</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址(InetAddress)</p><ul><li><p>定位唯一网络上的计算机</p></li><li><p>127.0.0.1：本机localhost</p></li><li><p>IP地址的分类</p><ul><li>IPv4/IPv6<ul><li><strong>IPv4：</strong>127.0.0.1,四个字节组成，0-255，42亿；30亿在北美，亚洲4亿(2001年就用尽)</li><li><strong>IPv6：</strong>fe80::10de:752a:458c:7cbd%28，128位，8个无符号整数。</li></ul></li><li>公网(互联网)和私网(局域网)<ul><li>ABCD地址:<a href="https://zhidao.baidu.com/question/53554208.html">IP地址的ABCD类</a></li><li>192.168.xx.xx，专门给某些组织内部使用</li></ul></li><li>域名：记忆IP问题<ul><li>IP：<a href="http://www.jokerdig.com/">www.jokerdig.com</a></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.netDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/9/1 - 22:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试ip</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询本地地址,127，0.0.1 / localhost/getLocalHost()</span></span><br><span class="line">            InetAddress byName = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">           <span class="comment">//查询网络IP地址</span></span><br><span class="line">            InetAddress byName1 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            InetAddress byName2 = InetAddress.getByName(<span class="string">&quot;www.jokerdig.com&quot;</span>);</span><br><span class="line">           <span class="comment">//输出</span></span><br><span class="line">            System.out.println(byName);</span><br><span class="line">            System.out.println(byName1);</span><br><span class="line">            System.out.println(byName2);</span><br><span class="line">            <span class="comment">//常用方法</span></span><br><span class="line">            System.out.println(byName2.getCanonicalHostName());<span class="comment">//规范的名字</span></span><br><span class="line">            System.out.println(byName2.getHostAddress());<span class="comment">//ip</span></span><br><span class="line">            System.out.println(byName2.getHostName());<span class="comment">//域名，或自己电脑名</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java网路编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】Python第三方模块安装</title>
      <link href="/2021/08/31/pythonPage/"/>
      <url>/2021/08/31/pythonPage/</url>
      
        <content type="html"><![CDATA[<h2 id="Python第三方模块安装"><a href="#Python第三方模块安装" class="headerlink" title="Python第三方模块安装"></a>Python第三方模块安装</h2><blockquote><p>前言</p><p><a href="https://pypi.org/">PyPI · Python模块下载</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载和安装第三方模块，可用 Python 提供的 pip 命令实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install|uninstall|<span class="built_in">list</span> 模块名</span><br></pre></td></tr></table></figure><ul><li>install：用于安装第三方模块，当 pip 使用 install 作为参数时，后面的模块名不能省略。</li><li>uninstall；用于卸载已经安装的第三方模块，选择 uninstall 作为参数，后面的模块名也不能省略。</li><li>list：用于显示已经安装的第三方模块。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以安装 numpy(用于进行科学计算) 模块为例，在命令行窗口中输入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><p>执行此代码，它会在线自动安装 numpy 模块。</p><p><a href="https://imgtu.com/i/ha9mrQ"><img src="https://z3.ax1x.com/2021/08/31/ha9mrQ.md.png" alt="安装成功"></a></p><p>如果显示找不到pip命令，则要手动安装，即在cmd输入以下内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/ha9nbj"><img src="https://z3.ax1x.com/2021/08/31/ha9nbj.md.png" alt="ha9nbj.md.png"></a></p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>报错<code>SyntaxError: invalid syntax</code></p><p>解决办法：<a href="https://pip.pypa.io/en/stable/installation/">点文档 v21.2.4 (pypa.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python第三方模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】Java多线程(4)</title>
      <link href="/2021/08/23/javaMUL1_4/"/>
      <url>/2021/08/23/javaMUL1_4/</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程-4"><a href="#Java多线程-4" class="headerlink" title="Java多线程(4)"></a>Java多线程(4)</h2><blockquote><p>前言：</p><p>推荐免费Java多线程讲解视频：<a href="https://www.bilibili.com/video/BV1V4411p7EF?p=22">【狂神说Java】多线程详解_哔哩哔哩_bilibili</a></p><p>Java多线程(Multithreading)笔记代码下载地址：</p><p>蓝奏云：<a href="https://jokerdig.lanzoui.com/inULLt1l3ze">下载地址</a> 密码：joker</p><p>百度云：<a href="https://pan.baidu.com/s/1hwMrZCipwe3tiZQRKs-ycQ">下载地址</a> 提取码：jbe6</p></blockquote><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形。某一个同步块同时拥有<strong>两个以上对象的锁</strong>时，就可能会发生”死锁”的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/23 - 10:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//死锁：多个线程互相抱着对方的资源，然后形成死锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup mk = <span class="keyword">new</span> Makeup(<span class="number">0</span>,<span class="string">&quot;灰姑娘&quot;</span>);</span><br><span class="line">        Makeup mk2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mk.start();</span><br><span class="line">        mk2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//化妆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//static来保证需要的资源只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstic = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName;<span class="comment">//使用化妆的人</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice, String girlName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//互相持有对方的锁</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstic)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (lipstic)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产生死锁的四个必要条件：</p><ul><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul></li></ul><p><em>上面列出了死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件就可以避免死锁发生。</em></p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><ul><li>从JDK5.0开始，Java提供了更强大的线程同步机制—通过显式定义同步锁对象实现同步。同步锁使用Lock对象充当。</li><li><code>java.util.concurrent.locks.Lock</code>接口时控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次之恶能有一个线程对Lock对象加锁，线程开始访共享资源之前应先获得Lock对象。</li><li><code>ReentrantLock</code>类实现了Lock，它拥有与<code>synchronized</code>相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>，可以显式加锁，释放锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/23 - 10:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试Lock锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 tk = <span class="keyword">new</span> TestLock2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(tk).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tk).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tk).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tickeN = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span>(tickeN&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(tickeN--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>synchronized与Lock的对比：</strong></p><ul><li>Lock是显式锁(手动开启和关闭锁，别忘记关闭所)synochronized是隐式锁，出了作用域自动释放。</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁。</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性(提供更多的子类)。</li><li>优先使用顺序：<ul><li>Lock&gt;同步代码块(已经进入了方法体，分配了相应资源)&gt;同步方法(在方法体之外)。</li></ul></li></ul><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p><strong>线程通信：</strong></p><ul><li><p>应用场景：生产者和消费者问题：</p><ul><li><p>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费。</p></li><li><p>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止。</p></li><li><p>如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</p><p><a href="https://imgtu.com/i/h959eg"><img src="https://z3.ax1x.com/2021/08/23/h959eg.png" alt="h959eg.png"></a></p></li></ul></li><li><p>Java提供了几个方法解决线程之间的通信问题。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td></tr></tbody></table></li><li><p>注意：均为Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常<code>IIIegaIMonitorStateException</code>。</p></li></ul><p><strong>线程通信-分析：</strong></p><p>​    这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</p><ul><li>对于生产者，没有生产产品之前，要通知消费者等待，而生产了产品之后，又需要马上通知消费者消费。</li><li>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品以供消费。</li><li>在生产者消费者问题中，仅有synchronized是不够的：<ul><li>synchronized可阻止并发更新同一个共享资源，实现了同步。</li><li>synchronized不能用来实现不同线程之间的消息传递(通信)。</li></ul></li></ul><p><strong>解决方式1：</strong></p><p>​    并发协作模型”生产者/消费者模式”-&gt;管程法</p><ul><li><p>生产者：负责生产数据的模块(可能是方法，对象，线程，进程)；</p></li><li><p>消费者：负责处理数据的模块(可能是方法，对象，线程，进程)；</p></li><li><p>缓冲区：消费者不能直接使用生产者的数据，它们之间有个”缓冲区”；</p><p>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据。</p></li></ul><p><strong>解决方式2：</strong></p><ul><li>并发协作模型”生产者/消费者模式”-&gt;信号灯法</li></ul><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/23 - 12:11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试：生产者消费者模型-&gt;利用缓冲区解决：管程法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Syncontainer con = <span class="keyword">new</span> Syncontainer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Productor(con).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(con).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Syncontainer con;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(Syncontainer con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.con = con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            con.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Syncontainer con;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Syncontainer con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.con = con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了-&gt;&quot;</span>+con.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Syncontainer</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == chickens.length) &#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有满，我们就放入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//可以通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line">        <span class="comment">//通知生产者生产</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/23 - 12:38</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试生产者消费者问题，信号灯法，标志位解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者--&gt;演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    TV tv = <span class="keyword">new</span> TV();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;是首相正在热播&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;宫崎骏电影轮播&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者--&gt;观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv = <span class="keyword">new</span> TV();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品--&gt;节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="comment">//演员表演，观众等地啊</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//观众观看，演员等待</span></span><br><span class="line">    String voice;<span class="comment">//表演节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了：&quot;</span> + voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();<span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了：&quot;</span>+voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag=!<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><strong>使用线程池：</strong></p><ul><li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li><li>好处：<ul><li>提高响应速度(减少了创建新线程的时间)</li><li>降低资源消耗(重复利用线程池中线程，不需要每次都创建)</li><li>便于线程管理(…)<ul><li>corePoolSize：核心池的大小；</li><li>maximumPoolSize：最大线程数；</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止；</li></ul></li></ul></li></ul><p><strong>线程池总结：</strong></p><ul><li>JDK5.0开始提供了线程池相关API：<code>ExecutorService</code>和<code>Executors</code></li><li>ExecutorService：真正的线程池接口。常见子类<code>ThreadPoolExecutor</code><ul><li><code>void execute(Runnable command)</code>：执行任务/命令，没有返回值，一般用来执行<code>Runnable</code>；</li><li><code>&lt;T&gt;Future&lt;T&gt;submit(Callable&lt;T&gt;task)</code>：执行任务，有返回值，一般用来执行<code>Callable</code>;</li><li><code>void shutdown()</code>：关闭连接池；</li></ul></li><li>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/23 - 13:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread1().start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2()).start();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> MyThread3());</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer integer =futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实现Runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.实现Callable接口</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】Java多线程(3)</title>
      <link href="/2021/08/22/javaMUL1_3/"/>
      <url>/2021/08/22/javaMUL1_3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程-3"><a href="#Java多线程-3" class="headerlink" title="Java多线程(3)"></a>Java多线程(3)</h2><blockquote><p>前言：</p><p>推荐免费Java多线程讲解视频：<a href="https://www.bilibili.com/video/BV1V4411p7EF?p=15">【狂神说Java】多线程详解_哔哩哔哩_bilibili</a></p></blockquote><h3 id="观测线程状态"><a href="#观测线程状态" class="headerlink" title="观测线程状态"></a>观测线程状态</h3><p><strong>Thread State：</strong></p><ul><li>NEW</li><li>RUNNABLE</li><li>BLOCKED</li><li>WAITING</li><li>TIMED_WAITING</li><li>TERMINATED</li></ul><p><a href="https://imgtu.com/i/fz7eo9"><img src="https://z3.ax1x.com/2021/08/22/fz7eo9.png" alt="fz7eo9.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 10:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试线程状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;////////&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//new</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state=thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//Run</span></span><br><span class="line">        <span class="comment">//只要不中止就一直输出状态</span></span><br><span class="line">        <span class="keyword">while</span>(state!=Thread.State.TERMINATED)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            state= thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//死亡后的线程不能在启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ul><li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级据欸的那个应该调度哪个线程来执行。</p></li><li><p>线程的优先级用数字表示，范围从1~10：</p><ul><li>Thread.MIN_PRIORITY = 1;</li><li>Thread.MAX_PRIORITY = 10;</li><li>Thread.NORM_PRIORITY = 5;</li></ul></li><li><p>使用以下方式改变或获取优先级：</p><ul><li>getPriority().setPriority(int xx);</li></ul></li><li><p>优先级的设定建议在start()调度之前。</p></li><li><p>优先级低只意味着获得调度概率低，并不是优先级低就不会被调用，一切看CUP速度；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 10:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试线程优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul><li><p>线程分为用户线程和守护(daemon)线程；</p></li><li><p>虚拟机必须确保用户线程执行完毕；</p></li><li><p>虚拟机不用等待守护线程执行完毕；</p></li><li><p>如：后台记录,操作日志,监控内存,垃圾回收等待等…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 11:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试守护线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);<span class="comment">//默认是false</span></span><br><span class="line"></span><br><span class="line">        thread.start();<span class="comment">//上帝守护线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();<span class="comment">//you启动</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//god</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑着你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//you</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你一生都开心的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-========goodbye! world========--&quot;</span>);<span class="comment">//hello world</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><ul><li><p>并发：同一个对象被多个线程同时操作；</p><p><a href="https://imgtu.com/i/fzqMzq"><img src="https://z3.ax1x.com/2021/08/22/fzqMzq.png" alt="fzqMzq.png"></a></p></li></ul><p><strong>线程同步：</strong></p><ul><li>生活中我们会遇到”同一个资源，多个人想使用”的问题，比如食堂排队，买票排队，一个个来；</li><li>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象；这是我们就需要线程同步。</li><li>线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面线程使用完毕，下一个线程再使用。</li></ul><p><strong>队列和锁：</strong></p><p><a href="https://imgtu.com/i/fzxT00"><img src="https://z3.ax1x.com/2021/08/22/fzxT00.png" alt="fzxT00.png"></a></p><p><strong>线程同步：</strong></p><ul><li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问的正确性，在访问时加入<strong>锁机制(synchronized)</strong>,当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：<ul><li>一个线程持有锁会导致其他需要此锁的线程挂起；</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题；</li></ul></li></ul><h3 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h3><ul><li><p>多人同时买票：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 12:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//不安全的买票</span></span><br><span class="line">    <span class="comment">//线程不安全，有复数，有重复</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">&quot;小王&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">&quot;小李&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到&quot;</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多人同时取钱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 12:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line">    <span class="comment">//两个人同事去银行取一张卡里的钱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">&quot;结婚份子钱&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Drawing wife = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">&quot;wife&quot;</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        wife.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;<span class="comment">//余额</span></span><br><span class="line">    String name;<span class="comment">//卡号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行:模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;<span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;<span class="comment">//取乐的钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney;<span class="comment">//剩余的钱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//判断有没钱</span></span><br><span class="line">        <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;的钱不够了&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;账户余额：&quot;</span>+account.money);</span><br><span class="line">        <span class="comment">//卡内余额</span></span><br><span class="line">        account.money=account.money-drawingMoney;</span><br><span class="line">        <span class="comment">//手里的钱</span></span><br><span class="line">        nowMoney = nowMoney+drawingMoney;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的余额：&quot;</span>+nowMoney);</span><br><span class="line">        System.out.println(<span class="string">&quot;账户余额：&quot;</span>+account.money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出数据丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 12:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步方法及同步块"><a href="#同步方法及同步块" class="headerlink" title="同步方法及同步块"></a>同步方法及同步块</h3><p><strong>同步方法：</strong></p><ul><li><p>由于我们可以通过<code>private</code>关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是<code>synchronized</code>关键字，它包括两种用法：<code>synchronized</code>方法和<code>synchronized</code>块；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同步方法：<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> args)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>synchronized</code>方法控制对”对象”的访问，每个对象对应一把锁，每个<code>synchronized</code>方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，后面被阻塞的线程才能获得这个锁，继续执行；</p><p><strong>缺陷：</strong>若将一个大的方法声明为<code>synchronized</code>将会影响效率；</p></li></ul><p><strong>解决买票问题：</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 12:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//不安全的买票</span></span><br><span class="line">    <span class="comment">//线程不安全，有复数，有重复</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">&quot;小王&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">&quot;小李&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//synchronize 同步方法，锁的时this</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到&quot;</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步方法弊端：</strong></p><ul><li><p>方法里需要修改的内容才需要锁，锁太多浪费资源。</p><p><a href="https://imgtu.com/i/hSih5t"><img src="https://z3.ax1x.com/2021/08/22/hSih5t.png" alt="hSih5t.png"></a></p></li></ul><p><strong>同步块：</strong></p><ul><li>同步块：<code>synchronized(Obj)&#123;&#125;</code></li><li>Obj称之为<strong>同步监视器</strong><ul><li><strong>Obj</strong>可以是任何对象，但是推荐使用共享资源作为同步监视器；</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是<code>this</code>，就是这个对象本身，或者是<code>class</code>[反射中讲解]</li></ul></li><li>同步监视器的执行过程：<ul><li>第一个线程访问，锁定同步监视器，执行其中代码；</li><li>第二个线程访问，发现同步监视器被锁定，无法访问；</li><li>第一个线程访问完毕，解锁同步监视器；</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问；</li></ul></li></ul><p><strong>解决取钱和集合丢失问题：</strong></p><ul><li><p>解决取钱问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 12:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line">    <span class="comment">//两个人同事去银行取一张卡里的钱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">&quot;结婚份子钱&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Drawing wife = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">&quot;wife&quot;</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        wife.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;<span class="comment">//余额</span></span><br><span class="line">    String name;<span class="comment">//卡号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行:模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;<span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;<span class="comment">//取乐的钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney;<span class="comment">//剩余的钱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这种synchronized无法锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用synchronized块,锁变化的量</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">            <span class="comment">//判断有没钱</span></span><br><span class="line">            <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;的钱不够了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;账户余额：&quot;</span>+account.money);</span><br><span class="line">            <span class="comment">//卡内余额</span></span><br><span class="line">            account.money=account.money-drawingMoney;</span><br><span class="line">            <span class="comment">//手里的钱</span></span><br><span class="line">            nowMoney = nowMoney+drawingMoney;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的余额：&quot;</span>+nowMoney);</span><br><span class="line">            System.out.println(<span class="string">&quot;账户余额：&quot;</span>+account.money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据丢失问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 12:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">              <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                  list.add(Thread.currentThread().getName());</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ConpyOnWriteArrayList"><a href="#ConpyOnWriteArrayList" class="headerlink" title="ConpyOnWriteArrayList"></a>ConpyOnWriteArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/22 - 13:28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试JUC安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; clist = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                clist.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(clist.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】Java多线程(2)</title>
      <link href="/2021/08/21/javaMUL1_2/"/>
      <url>/2021/08/21/javaMUL1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程-2"><a href="#Java多线程-2" class="headerlink" title="Java多线程(2)"></a>Java多线程(2)</h2><blockquote><p>前言：</p><p>推荐免费Java多线程讲解视频：<a href="https://www.bilibili.com/video/BV1V4411p7EF?p=8">【狂神说Java】多线程详解_哔哩哔哩_bilibili</a></p></blockquote><h3 id="实现Callable接口-仅作了解"><a href="#实现Callable接口-仅作了解" class="headerlink" title="实现Callable接口(仅作了解)"></a>实现Callable接口(仅作了解)</h3><ol><li>实现Callable接口，需要返回值类型；</li><li>重写call方法，需要抛出异常；</li><li>创建目标对象；</li><li>创建执行服务：<code>ExecutorService service = Executors.newFixedThreadPool(创建线程数量);</code></li><li>提交执行：<code>Future&lt;Boolean&gt; result1 = service.submit(t1);</code></li><li>获取结果：<code>boolean r1 = result1.get();</code></li><li>关闭服务：<code>service.shutdownNow();</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jokerdig.demo1.TestThread2;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 11:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//线程创建方式三：实现Callable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//网路地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件名为：&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png&quot;</span>, <span class="string">&quot;autor.png&quot;</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png&quot;</span>, <span class="string">&quot;autor1.png&quot;</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png&quot;</span>, <span class="string">&quot;autor2.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  1. 创建执行服务：</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">      <span class="comment">//  2. 提交执行：</span></span><br><span class="line">        Future&lt;Boolean&gt; result1 = service.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; result2 = service.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; result3 = service.submit(t3);</span><br><span class="line">      <span class="comment">//  3. 获取结果：</span></span><br><span class="line">        <span class="keyword">boolean</span> r1 = result1.get();</span><br><span class="line">        <span class="keyword">boolean</span> r2 = result2.get();</span><br><span class="line">        <span class="keyword">boolean</span> r3 = result3.get();</span><br><span class="line">       <span class="comment">// 4. 关闭服务：</span></span><br><span class="line">        service.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><p><strong>静态代理：(以结婚举例)</strong></p><ul><li>你：真实角色</li><li>婚庆公司：代理你，帮你处理结婚事务</li><li>结婚：实现结婚接口即可</li></ul><p><strong>总结：</strong></p><ul><li>真是对象和代理对象都要实现同一接口；</li><li>代理对象要代理真实角色；</li></ul><p><strong>好处：</strong></p><ul><li><p>代理对象可以做很多真实对象做不了的事情；</p></li><li><p>真实对象专注做自己的事情；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 11:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You());</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结婚接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//你实现结婚的接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自己</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小王开心的结婚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//婚庆公司</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">WeddingCompany</span><span class="params">(Marry target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结婚前</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结婚后</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><ul><li><p>λ希腊字母表中排序第十一位的字母，英语名称为Lambda；</p></li><li><p>避免匿名内部类定义过多；</p></li><li><p>其实质属于函数式编程的概念；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(params) -&gt; expression[表达式]</span><br><span class="line">(params) -&gt; statement[语句]</span><br><span class="line">(params) -&gt; expression[表达式]</span><br></pre></td></tr></table></figure><p><code>a-&gt; System.out.println(&quot;it&#39;s is lambda&quot;+a);</code></p><p><code>new Thread(()-&gt;System.out.println(&quot;多线程学习&quot;)).start();</code></p></li><li><p>为什么要使用lambda表达式</p><ul><li>避免匿名内部类定义过到；</li><li>让代码看起来更简介；</li><li>去掉大量无意义代码，只留下核心的逻辑；</li></ul></li><li><p>也去你会说，我看了Lambda表达式，反而觉得更乱了，看不懂了。多用就能习惯了;</p></li></ul><ul><li><p>理解Functional Interface(函数式接口)是学习Java8 lambda表达式的关键所在;</p></li><li><p>函数时接口的定义：</p><ul><li><p>任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象;</p></li></ul></li><li><p>简化过程代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 12:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">Likes</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Likes like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">Likes</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        <span class="keyword">new</span> Like3().lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> Likes()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like Lambda5&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Likes</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">Likes</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Lambda简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 13:14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//lambda表达式简化</span></span><br><span class="line">       ILove love =(<span class="keyword">int</span> a)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love you&quot;</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//1.简化参数类型</span></span><br><span class="line">        love =(a)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love you&quot;</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.简化括号</span></span><br><span class="line">        love = a -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love you&quot;</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//3.简化大括号</span></span><br><span class="line">        love = a -&gt; System.out.println(<span class="string">&quot;I love you&quot;</span>+a);;</span><br><span class="line">        love.love(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ILove</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>总结：</strong></p><ul><li>lambda表达式只有一行代码的情况下才能简化成一行的形式，如果有多行，那么就用代码块包裹。</li><li>前提是接口位函数式接口。</li><li>多个参数也可以去掉参数类型，要去掉必须加括号。</li></ul><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><p><strong>线程状态：</strong></p><p>​    <a href="https://imgtu.com/i/fv8A2j"><img src="https://z3.ax1x.com/2021/08/21/fv8A2j.png" alt="fv8A2j.png"></a></p><p>​    <a href="https://imgtu.com/i/fv85WQ"><img src="https://z3.ax1x.com/2021/08/21/fv85WQ.md.png" alt="fv85WQ.md.png"></a></p><p><strong>线程方法：</strong></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setPriority(int newPriority)</td><td align="center">更改线程的优先级</td></tr><tr><td align="center">static void sleep(long millis)</td><td align="center">在指定的毫秒数内让当前正在执行的线程休眠</td></tr><tr><td align="center">void join()</td><td align="center">等待该线程终止</td></tr><tr><td align="center">static void yield()</td><td align="center">暂停当前正在执行的线程对象，并执行其他前程</td></tr><tr><td align="center">void interrupt()</td><td align="center">中断线程，尽量不使用该方法</td></tr><tr><td align="center">boolean isAlive()</td><td align="center">测试线程是否处于活动状态</td></tr></tbody></table><p><strong>停止线程：</strong></p><ul><li><p>不推荐使用JDK提懂得stop(),destroy()方法。(已废弃)</p></li><li><p>推荐线程自己停止下来。</p></li><li><p>建议使用一个标志位进行终止变量，当flag=false,则终止线程运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 13:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试stop</span></span><br><span class="line">    <span class="comment">//1.建议线程正常停止</span></span><br><span class="line">    <span class="comment">//2.建议使用标志位</span></span><br><span class="line">    <span class="comment">//3.不要使用stop或者destroy等过时方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">900</span>)&#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(i+<span class="string">&quot;停止线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程休眠sleep"><a href="#线程休眠sleep" class="headerlink" title="线程休眠sleep"></a>线程休眠sleep</h3><p><strong>线程休眠：</strong></p><ul><li>sleep(时间)指定当前线程阻塞的毫秒数；</li><li>sleep存在异常interruptedException；</li><li>sleep时间达到后线程进入就绪状态；</li><li>sleep可以模拟网络延时，倒计时等；</li><li>每一个对象都有一个锁，sleep不会释放锁；</li></ul><p><strong>模拟倒计时：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 14:02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//模拟倒计时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tenDown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印当前系统时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获得当前时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(startTime));</span><br><span class="line">                startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//更新时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num =<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;时间结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程礼让yield"><a href="#线程礼让yield" class="headerlink" title="线程礼让yield"></a>线程礼让yield</h3><p><strong>线程礼让：</strong></p><ul><li><p>礼让线程，让当前正在执行的线程暂停，但不阻塞；</p></li><li><p>将线程从运行状态转为就绪状态；</p></li><li><p><strong>让CPU重新调度，礼让不一定成功！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 14:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//礼让线程，不一定成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.yield();<span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程强制执行join"><a href="#线程强制执行join" class="headerlink" title="线程强制执行join"></a>线程强制执行join</h3><ul><li><p>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞；</p></li><li><p>可以想象成插队；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/21 - 14:23</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//测试Join方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">100</span>)&#123;</span><br><span class="line">               <span class="comment">//start放这里防止vip线程提前同普通线程一起启动</span></span><br><span class="line">                thread.start();</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;普通线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插队</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程vip来了&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】Java多线程(1)</title>
      <link href="/2021/08/20/javaMUL1_1/"/>
      <url>/2021/08/20/javaMUL1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程-1"><a href="#Java多线程-1" class="headerlink" title="Java多线程(1)"></a>Java多线程(1)</h2><blockquote><p>前言：</p><p>推荐免费Java多线程讲解视频：<a href="https://www.bilibili.com/video/BV1V4411p7EF?p=1">【狂神说Java】多线程详解_哔哩哔哩_bilibili</a></p></blockquote><h3 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h3><p><strong>讲解大纲：</strong></p><ul><li>线程简介</li><li><strong>线程实现</strong></li><li>线程状态</li><li><strong>线程同步</strong></li><li>线程通信问题</li><li>高级主题</li></ul><h3 id="线程、进程、多线程"><a href="#线程、进程、多线程" class="headerlink" title="线程、进程、多线程"></a>线程、进程、多线程</h3><p><strong>多任务：</strong></p><ul><li>边吃饭边玩手机等，现实中太多这样同时做多件事情的例子了，看起来是多个人物都在做，其实本质上我们的大脑在同一时间依旧只做了一件事情。</li></ul><p><strong>多线程：</strong></p><ul><li>原来是一条路，慢慢因为车太多了，道路阻塞，效率极低。</li><li>为了提高使用的效率，能够充分利用道路，于是加了多个车道。</li><li>网络游戏，编程等等</li></ul><p><strong>普通方法调用和多线程：</strong></p><p><img src="https://z3.ax1x.com/2021/08/20/fXQ1c6.png" alt="fXQ1c6.png"></p><p><strong>程序、进程、线程：</strong></p><p><a href="https://imgtu.com/i/fXQ5vV"><img src="https://z3.ax1x.com/2021/08/20/fXQ5vV.png" alt="fXQ5vV.png"></a></p><p><strong>Process与Thread：</strong></p><ul><li>说起进程，就不得不说程序。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li><li>而进程则是执行程序的一次执行过程，它是一个动态概念。是系统资源分配的单位。</li><li>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</li><li>注意：很多多线程是模拟出来的，真正的多线程是指有多个CPU，即多核，如服务器。如果是模拟出来的多线程，即在一个CPU的情况下，在同一个时间点，CPU只能执行一个代码，因为切换的很快，所以就有同时执行的错觉。</li></ul><p><strong>本章核心概念：</strong></p><ul><li>线程就是独立的执行路径；</li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程；</li><li><code>main()</code>称之为主线程，为系统的入口，用于执行整个程序；</li><li>在一个进程中，如果开辟了多个线程，现成的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的;</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发通知；</li><li>线程会带来额外的开销，如CPU调度事件，并发通知开销；</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</li></ul><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p><strong>线程三种创建方式：</strong></p><p><a href="https://imgtu.com/i/fX80Ig"><img src="https://z3.ax1x.com/2021/08/20/fX80Ig.png" alt="fX80Ig.png"></a></p><p><strong>Thread类：(多查看JDK帮助文档)</strong></p><ul><li><p>自定义线程继承Thread类</p></li><li><p>重写<code>run()</code>方法，编写线程执行体</p></li><li><p>new当前类，直接调用<code>start()</code>方法启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/20 - 18:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//创建线程方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main方法</span></span><br><span class="line">        TestThread1 testThread1 = <span class="keyword">new</span> TestThread1();</span><br><span class="line">        <span class="comment">//调用start()方法i</span></span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学习多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>总结：</p><ul><li>注意，线程开启不一定立即执行，由CPU调度执行。</li></ul><h3 id="网图下载"><a href="#网图下载" class="headerlink" title="网图下载"></a>网图下载</h3><p><strong>下载图片：</strong></p><p><a href="https://imgtu.com/i/fXNsKA"><img src="https://z3.ax1x.com/2021/08/20/fXNsKA.png" alt="fXNsKA.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/20 - 18:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//练习Thread,实现多线程同步图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//网路地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread2</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下载图片线程执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件名为：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread2 testThread2 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png&quot;</span>,<span class="string">&quot;autor.png&quot;</span>);</span><br><span class="line">        TestThread2 testThread2_1 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png&quot;</span>,<span class="string">&quot;autor1.png&quot;</span>);</span><br><span class="line">        TestThread2 testThread2_2 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png&quot;</span>,<span class="string">&quot;autor2.png&quot;</span>);</span><br><span class="line">        testThread2.start();</span><br><span class="line">        testThread2_1.start();</span><br><span class="line">        testThread2_2.start();</span><br><span class="line">        <span class="comment">//并不是按顺序依次下载,是同时执行</span></span><br><span class="line">        <span class="comment">/*下载顺序：</span></span><br><span class="line"><span class="comment">         下载文件名为：autor2.png</span></span><br><span class="line"><span class="comment">         下载文件名为：autor.png</span></span><br><span class="line"><span class="comment">         下载文件名为：autor1.png</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ul><li><p>定义MyRunnable类实现Runnable接口</p></li><li><p>重写<code>run()</code>方法，编写线程执行体</p></li><li><p>创建线程对象，调用<code>start()</code>方法启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/20 - 19:04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//创建线程方式2：实现runnable接口，重写run方法，执行线程丢入runnable接口实现类，调用start方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main方法</span></span><br><span class="line">        TestThread3 testThread3 = <span class="keyword">new</span> TestThread3();</span><br><span class="line">        <span class="comment">//创建线程对象，来开启start</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testThread3);</span><br><span class="line">        <span class="comment">//调用start()方法i</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学习多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>小结：</strong></p><ul><li>继承Thread类<ul><li>子类继承Thread类具备多线程额能力；</li><li>启动线程：子类对象.<code>start()</code>;</li><li><strong>不建议使用：避免OOP单继承局限性；</strong></li></ul></li><li>实现Runnable接口<ul><li>实现接口Runnable具有多线程能力；</li><li>启动线程：传入目标对象+Thread对象.<code>start()</code>;</li><li><strong>推荐使用：避免单继承局限性，灵活方便，便于同一个对象被多个线程使用；</strong></li></ul></li></ul><h3 id="初始并发问题"><a href="#初始并发问题" class="headerlink" title="初始并发问题"></a>初始并发问题</h3><ul><li><p>买火车票；</p></li><li><p>发现问题：多个线程操作同一个资源，线程不安全，数据紊乱(并发问题)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/20 - 19:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//多个线程同时操作一个独享</span></span><br><span class="line">    <span class="comment">//买火车票例子</span></span><br><span class="line">    <span class="comment">//发现问题：多个线程操作同一个资源，线程不安全，数据紊乱(并发问题)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//没有票，退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 拿到了第&quot;</span>+ticketNums+<span class="string">&quot; 票&quot;</span>);</span><br><span class="line">            ticketNums--;<span class="comment">//售出票后减少</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread4 ticket = <span class="keyword">new</span> TestThread4();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;张三&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;李四&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><p><strong>龟兔赛跑-Race：</strong></p><ul><li>首先来个赛道距离，然后要离终点越来越近；</li><li>判断比赛是否结束；</li><li>打印出胜利者；</li><li>龟兔赛跑开始；</li><li>故事中是乌龟赢，兔子需要睡觉，我们来模拟兔子睡觉；</li><li>终于，乌龟赢得比赛；</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/20 - 19:51</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//模拟兔子睡觉</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">//判断比赛是否结束</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否完成比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;&#123;</span><br><span class="line">            <span class="keyword">if</span>(steps &gt;=<span class="number">100</span>)&#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;winner is&quot;</span>+winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaGUI】JavaGUI入门到小游戏实战(4)</title>
      <link href="/2021/08/19/javaGUI1_4/"/>
      <url>/2021/08/19/javaGUI1_4/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaGUI入门到小游戏实战-4"><a href="#JavaGUI入门到小游戏实战-4" class="headerlink" title="JavaGUI入门到小游戏实战(4)"></a>JavaGUI入门到小游戏实战(4)</h2><blockquote><p>前言：</p><p>推荐免费JavaGUI入门视频：<a href="https://www.bilibili.com/video/BV1DJ411B75F?p=21">【狂神说Java】GUI编程入门到游戏实战_哔哩哔哩_bilibili</a></p><p>JavaGUI笔记代码下载地址：</p><p>蓝奏云：<a href="https://jokerdig.lanzoui.com/iavjlsuqtha">下载地址</a> 密码：joker</p><p>百度云：<a href="https://pan.baidu.com/s/1noxtZITuZFAZDDrz0J1Weg">下载地址</a> 提取码：fxcj</p></blockquote><h3 id="贪吃蛇界面绘制"><a href="#贪吃蛇界面绘制" class="headerlink" title="贪吃蛇界面绘制"></a>贪吃蛇界面绘制</h3><ul><li><p>StartGame类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏主启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">&quot;贪吃蛇-jokerdig.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);<span class="comment">//窗口大小不可变</span></span><br><span class="line">        frame.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">900</span>,<span class="number">725</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);<span class="comment">//显示界面</span></span><br><span class="line">        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); <span class="comment">//可关闭</span></span><br><span class="line">        <span class="comment">//内容在面板中</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> GamePanel());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GmaePanel类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏面板</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制面板,游戏中所有东西都用这支画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//绘制静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.WHITE);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Data类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//数据中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="comment">//相对路径：xx.jpg</span></span><br><span class="line">    <span class="comment">//绝对路径：/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL headerURL = Data.class.getResource(<span class="string">&quot;static/header.png&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL upURL = Data.class.getResource(<span class="string">&quot;static/up.png&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL downURL = Data.class.getResource(<span class="string">&quot;static/down.png&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL leftURL = Data.class.getResource(<span class="string">&quot;static/left.png&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL rightURL = Data.class.getResource(<span class="string">&quot;static/right.png&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL bodyURL = Data.class.getResource(<span class="string">&quot;static/body.png&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> URL foodURL = Data.class.getResource(<span class="string">&quot;static/food.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon header = <span class="keyword">new</span> ImageIcon(headerURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon up = <span class="keyword">new</span> ImageIcon(upURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon down = <span class="keyword">new</span> ImageIcon(downURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon left = <span class="keyword">new</span> ImageIcon(leftURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon right = <span class="keyword">new</span> ImageIcon(rightURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon body = <span class="keyword">new</span> ImageIcon(bodyURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon food = <span class="keyword">new</span> ImageIcon(foodURL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="绘制静态的小蛇"><a href="#绘制静态的小蛇" class="headerlink" title="绘制静态的小蛇"></a>绘制静态的小蛇</h3><ul><li><p>GamePanel类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏面板</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义蛇的数据结构</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//🐍长度</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeX = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">600</span>];<span class="comment">//蛇的X坐标</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeY = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">500</span>];<span class="comment">//蛇的Y坐标</span></span><br><span class="line">    <span class="comment">//方向</span></span><br><span class="line">    String direction;<span class="comment">//初始方向向右</span></span><br><span class="line">    <span class="comment">//游戏当前的状态:开始，停止</span></span><br><span class="line">    <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;<span class="comment">//默认不开始</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        length=<span class="number">3</span>;</span><br><span class="line">        snakeX[<span class="number">0</span>]=<span class="number">100</span>; snakeY[<span class="number">0</span>]=<span class="number">100</span>;<span class="comment">//头坐标</span></span><br><span class="line">        snakeX[<span class="number">1</span>]=<span class="number">75</span>; snakeY[<span class="number">1</span>]=<span class="number">100</span>;<span class="comment">//第一个身体坐标</span></span><br><span class="line">        snakeX[<span class="number">2</span>]=<span class="number">50</span>; snakeY[<span class="number">2</span>]=<span class="number">100</span>;<span class="comment">//第二个身体坐标</span></span><br><span class="line">        direction =<span class="string">&quot;R&quot;</span>;<span class="comment">//初始方向向右</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制面板,游戏中所有东西都用这支画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//绘制静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.WHITE);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//把小蛇画上去,通过方向来判断</span></span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            Data.right.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//头初始化向右</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            Data.left.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向左</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            Data.up.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向上</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            Data.down.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//身体坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Data.body.paintIcon(<span class="keyword">this</span>,g,snakeX[i],snakeY[i]);<span class="comment">//身体坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//游戏状态</span></span><br><span class="line">        <span class="keyword">if</span>(isStart==<span class="keyword">false</span>)&#123;</span><br><span class="line">            g.setColor(Color.WHITE);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">40</span>));<span class="comment">//设置字体</span></span><br><span class="line">            g.drawString(<span class="string">&quot;按下空格开始游戏&quot;</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="让小蛇动起来"><a href="#让小蛇动起来" class="headerlink" title="让小蛇动起来"></a>让小蛇动起来</h3><ul><li><p>GamePanel类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏面板</span></span><br><span class="line">    <span class="comment">//实现 KeyListener 接口,重写接口方法</span></span><br><span class="line">    <span class="comment">//实现 ActionListener(定时器)接口,重写接口方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>, <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义蛇的数据结构</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//🐍长度</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeX = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">600</span>];<span class="comment">//蛇的X坐标</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeY = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">500</span>];<span class="comment">//蛇的Y坐标</span></span><br><span class="line">    <span class="comment">//方向</span></span><br><span class="line">    String direction;<span class="comment">//初始方向向右</span></span><br><span class="line">    <span class="comment">//游戏当前的状态:开始，停止</span></span><br><span class="line">    <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;<span class="comment">//默认不开始</span></span><br><span class="line">    <span class="comment">//定时器,300ms = 1s执行一次</span></span><br><span class="line">    Timer timer=<span class="keyword">new</span> Timer(<span class="number">300</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//获得焦点和键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//获得键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//游戏开始</span></span><br><span class="line">        timer.start();<span class="comment">//定时器开启</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        length=<span class="number">3</span>;</span><br><span class="line">        snakeX[<span class="number">0</span>]=<span class="number">100</span>; snakeY[<span class="number">0</span>]=<span class="number">100</span>;<span class="comment">//头坐标</span></span><br><span class="line">        snakeX[<span class="number">1</span>]=<span class="number">75</span>; snakeY[<span class="number">1</span>]=<span class="number">100</span>;<span class="comment">//第一个身体坐标</span></span><br><span class="line">        snakeX[<span class="number">2</span>]=<span class="number">50</span>; snakeY[<span class="number">2</span>]=<span class="number">100</span>;<span class="comment">//第二个身体坐标</span></span><br><span class="line">        direction =<span class="string">&quot;R&quot;</span>;<span class="comment">//初始方向向右</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制面板,游戏中所有东西都用这支画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//绘制静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.WHITE);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//把小蛇画上去,通过方向来判断</span></span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            Data.right.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//头初始化向右</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            Data.left.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向左</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            Data.up.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向上</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            Data.down.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//身体坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Data.body.paintIcon(<span class="keyword">this</span>,g,snakeX[i],snakeY[i]);<span class="comment">//身体坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//游戏状态</span></span><br><span class="line">        <span class="keyword">if</span>(isStart==<span class="keyword">false</span>)&#123;</span><br><span class="line">            g.setColor(Color.WHITE);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">40</span>));<span class="comment">//设置字体</span></span><br><span class="line">            g.drawString(<span class="string">&quot;按下空格开始游戏&quot;</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘监听事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> keyCode = e.getKeyCode();<span class="comment">//获得键盘按键</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.VK_SPACE)&#123;</span><br><span class="line">            isStart = !isStart;<span class="comment">//取反</span></span><br><span class="line">            repaint();<span class="comment">//重新绘制</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定时器监听</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isStart)&#123;  <span class="comment">//如果游戏开始,就让小蛇动起来</span></span><br><span class="line">            <span class="comment">//右移</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;<span class="number">0</span> ; i--) &#123;</span><br><span class="line">                <span class="comment">//移动，后一截移动到前一截</span></span><br><span class="line">                snakeX[i]= snakeX[i-<span class="number">1</span>];</span><br><span class="line">                snakeY[i]= snakeY[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            snakeX[<span class="number">0</span>]=snakeX[<span class="number">0</span>]+<span class="number">25</span>;</span><br><span class="line">            <span class="comment">//边界判断</span></span><br><span class="line">            <span class="keyword">if</span>(snakeX[<span class="number">0</span>]&gt;<span class="number">850</span>)&#123;</span><br><span class="line">                snakeX[<span class="number">0</span>]=<span class="number">25</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            repaint();<span class="comment">//重绘</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();<span class="comment">//定时器开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="键盘控制小蛇移动"><a href="#键盘控制小蛇移动" class="headerlink" title="键盘控制小蛇移动"></a>键盘控制小蛇移动</h3><ul><li><p>GamePanel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏面板</span></span><br><span class="line">    <span class="comment">//实现 KeyListener 接口,重写接口方法</span></span><br><span class="line">    <span class="comment">//实现 ActionListener(定时器)接口,重写接口方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>, <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义蛇的数据结构</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//🐍长度</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeX = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">600</span>];<span class="comment">//蛇的X坐标</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeY = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">500</span>];<span class="comment">//蛇的Y坐标</span></span><br><span class="line">    <span class="comment">//方向</span></span><br><span class="line">    String direction;<span class="comment">//初始方向向右</span></span><br><span class="line">    <span class="comment">//游戏当前的状态:开始，停止</span></span><br><span class="line">    <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;<span class="comment">//默认不开始</span></span><br><span class="line">    <span class="comment">//定时器,300ms = 1s执行一次</span></span><br><span class="line">    Timer timer=<span class="keyword">new</span> Timer(<span class="number">300</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//获得焦点和键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//获得键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//游戏开始</span></span><br><span class="line">        timer.start();<span class="comment">//定时器开启</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        length=<span class="number">3</span>;</span><br><span class="line">        snakeX[<span class="number">0</span>]=<span class="number">100</span>; snakeY[<span class="number">0</span>]=<span class="number">100</span>;<span class="comment">//头坐标</span></span><br><span class="line">        snakeX[<span class="number">1</span>]=<span class="number">75</span>; snakeY[<span class="number">1</span>]=<span class="number">100</span>;<span class="comment">//第一个身体坐标</span></span><br><span class="line">        snakeX[<span class="number">2</span>]=<span class="number">50</span>; snakeY[<span class="number">2</span>]=<span class="number">100</span>;<span class="comment">//第二个身体坐标</span></span><br><span class="line">        direction =<span class="string">&quot;R&quot;</span>;<span class="comment">//初始方向向右</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制面板,游戏中所有东西都用这支画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//绘制静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.WHITE);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//把小蛇画上去,通过方向来判断</span></span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            Data.right.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//头初始化向右</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            Data.left.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向左</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            Data.up.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向上</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            Data.down.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//身体坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Data.body.paintIcon(<span class="keyword">this</span>,g,snakeX[i],snakeY[i]);<span class="comment">//身体坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//游戏状态</span></span><br><span class="line">        <span class="keyword">if</span>(isStart==<span class="keyword">false</span>)&#123;</span><br><span class="line">            g.setColor(Color.WHITE);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">40</span>));<span class="comment">//设置字体</span></span><br><span class="line">            g.drawString(<span class="string">&quot;按下空格开始游戏&quot;</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘监听事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> keyCode = e.getKeyCode();<span class="comment">//获得键盘按键</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.VK_SPACE)&#123;</span><br><span class="line">            isStart = !isStart;<span class="comment">//取反</span></span><br><span class="line">            repaint();<span class="comment">//重新绘制</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//控制小蛇上下左右移动,且小蛇不能直接回头</span></span><br><span class="line">        <span class="keyword">if</span>((keyCode == KeyEvent.VK_UP||keyCode == KeyEvent.VK_W)&amp;&amp;!direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;U&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_DOWN||keyCode == KeyEvent.VK_S)&amp;&amp;!direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;D&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_LEFT||keyCode == KeyEvent.VK_A)&amp;&amp;!direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;L&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_RIGHT||keyCode == KeyEvent.VK_D)&amp;&amp;!direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;R&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定时器监听</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isStart) &#123;  <span class="comment">//如果游戏开始,就让小蛇动起来</span></span><br><span class="line">            <span class="comment">//身体移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="comment">//移动，后一截移动到前一截</span></span><br><span class="line">                snakeX[i] = snakeX[i - <span class="number">1</span>];</span><br><span class="line">                snakeY[i] = snakeY[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//头控制身体移动</span></span><br><span class="line">            <span class="keyword">if</span> (direction.equals(<span class="string">&quot;R&quot;</span>)) &#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>] + <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeX[<span class="number">0</span>] &gt; <span class="number">850</span>) &#123;</span><br><span class="line">                    snakeX[<span class="number">0</span>] = <span class="number">25</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>] - <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeX[<span class="number">0</span>] &lt; <span class="number">25</span>) &#123;</span><br><span class="line">                    snakeX[<span class="number">0</span>] = <span class="number">850</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;U&quot;</span>)) &#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>] - <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeY[<span class="number">0</span>] &lt; <span class="number">75</span>) &#123;</span><br><span class="line">                    snakeY[<span class="number">0</span>] = <span class="number">650</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>] + <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeY[<span class="number">0</span>] &gt; <span class="number">650</span>) &#123;</span><br><span class="line">                    snakeY[<span class="number">0</span>] = <span class="number">75</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();<span class="comment">//重绘</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();<span class="comment">//定时器开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小蛇吃食物长大"><a href="#小蛇吃食物长大" class="headerlink" title="小蛇吃食物长大"></a>小蛇吃食物长大</h3><ul><li><p>GamePanel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏面板</span></span><br><span class="line">    <span class="comment">//实现 KeyListener 接口,重写接口方法</span></span><br><span class="line">    <span class="comment">//实现 ActionListener(定时器)接口,重写接口方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>, <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义蛇的数据结构</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//🐍长度</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeX = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">600</span>];<span class="comment">//蛇的X坐标</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeY = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">500</span>];<span class="comment">//蛇的Y坐标</span></span><br><span class="line">    <span class="comment">//方向</span></span><br><span class="line">    String direction;<span class="comment">//初始方向向右</span></span><br><span class="line">    <span class="comment">//食物的坐标</span></span><br><span class="line">    <span class="keyword">int</span> foodX;</span><br><span class="line">    <span class="keyword">int</span> foodY;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//游戏当前的状态:开始，停止</span></span><br><span class="line">    <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;<span class="comment">//默认不开始</span></span><br><span class="line">    <span class="comment">//定时器,200ms = 1s执行一次</span></span><br><span class="line">    Timer timer=<span class="keyword">new</span> Timer(<span class="number">200</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//获得焦点和键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//获得键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//游戏开始</span></span><br><span class="line">        timer.start();<span class="comment">//定时器开启</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        length=<span class="number">3</span>;</span><br><span class="line">        snakeX[<span class="number">0</span>]=<span class="number">100</span>; snakeY[<span class="number">0</span>]=<span class="number">100</span>;<span class="comment">//头坐标</span></span><br><span class="line">        snakeX[<span class="number">1</span>]=<span class="number">75</span>; snakeY[<span class="number">1</span>]=<span class="number">100</span>;<span class="comment">//第一个身体坐标</span></span><br><span class="line">        snakeX[<span class="number">2</span>]=<span class="number">50</span>; snakeY[<span class="number">2</span>]=<span class="number">100</span>;<span class="comment">//第二个身体坐标</span></span><br><span class="line">        direction =<span class="string">&quot;R&quot;</span>;<span class="comment">//初始方向向右</span></span><br><span class="line">        <span class="comment">//随机食物坐标</span></span><br><span class="line">        foodX=<span class="number">25</span>+<span class="number">25</span>*random.nextInt(<span class="number">34</span>);</span><br><span class="line">        foodY=<span class="number">75</span>+<span class="number">25</span>*random.nextInt(<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制面板,游戏中所有东西都用这支画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//绘制静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.WHITE);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//把小蛇画上去,通过方向来判断</span></span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            Data.right.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//头初始化向右</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            Data.left.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向左</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            Data.up.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向上</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            Data.down.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//身体坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Data.body.paintIcon(<span class="keyword">this</span>,g,snakeX[i],snakeY[i]);<span class="comment">//身体坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        Data.food.paintIcon(<span class="keyword">this</span>,g,foodX,foodY);</span><br><span class="line">        <span class="comment">//游戏状态</span></span><br><span class="line">        <span class="keyword">if</span>(isStart==<span class="keyword">false</span>)&#123;</span><br><span class="line">            g.setColor(Color.WHITE);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">40</span>));<span class="comment">//设置字体</span></span><br><span class="line">            g.drawString(<span class="string">&quot;按下空格开始游戏&quot;</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘监听事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> keyCode = e.getKeyCode();<span class="comment">//获得键盘按键</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.VK_SPACE)&#123;</span><br><span class="line">            isStart = !isStart;<span class="comment">//取反</span></span><br><span class="line">            repaint();<span class="comment">//重新绘制</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//控制小蛇上下左右移动,且小蛇不能直接回头</span></span><br><span class="line">        <span class="keyword">if</span>((keyCode == KeyEvent.VK_UP||keyCode == KeyEvent.VK_W)&amp;&amp;!direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;U&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_DOWN||keyCode == KeyEvent.VK_S)&amp;&amp;!direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;D&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_LEFT||keyCode == KeyEvent.VK_A)&amp;&amp;!direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;L&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_RIGHT||keyCode == KeyEvent.VK_D)&amp;&amp;!direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;R&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定时器监听</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isStart) &#123;  <span class="comment">//如果游戏开始,就让小蛇动起来</span></span><br><span class="line">            <span class="comment">//身体移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="comment">//移动，后一截移动到前一截</span></span><br><span class="line">                snakeX[i] = snakeX[i - <span class="number">1</span>];</span><br><span class="line">                snakeY[i] = snakeY[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//头控制身体移动</span></span><br><span class="line">            <span class="keyword">if</span> (direction.equals(<span class="string">&quot;R&quot;</span>)) &#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>] + <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeX[<span class="number">0</span>] &gt; <span class="number">850</span>) &#123;</span><br><span class="line">                    snakeX[<span class="number">0</span>] = <span class="number">25</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>] - <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeX[<span class="number">0</span>] &lt; <span class="number">25</span>) &#123;</span><br><span class="line">                    snakeX[<span class="number">0</span>] = <span class="number">850</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;U&quot;</span>)) &#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>] - <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeY[<span class="number">0</span>] &lt; <span class="number">75</span>) &#123;</span><br><span class="line">                    snakeY[<span class="number">0</span>] = <span class="number">650</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>] + <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeY[<span class="number">0</span>] &gt; <span class="number">650</span>) &#123;</span><br><span class="line">                    snakeY[<span class="number">0</span>] = <span class="number">75</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//吃食物</span></span><br><span class="line">            <span class="keyword">if</span>(snakeX[<span class="number">0</span>]==foodX &amp;&amp; snakeY[<span class="number">0</span>]==foodY)&#123;</span><br><span class="line">                length++;<span class="comment">//身体长度+1</span></span><br><span class="line">                <span class="comment">//再次随机生成食物</span></span><br><span class="line">                foodX=<span class="number">25</span>+<span class="number">25</span>*random.nextInt(<span class="number">34</span>);</span><br><span class="line">                foodY=<span class="number">75</span>+<span class="number">25</span>*random.nextInt(<span class="number">24</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();<span class="comment">//重绘</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();<span class="comment">//定时器开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="失败判定，积分系统"><a href="#失败判定，积分系统" class="headerlink" title="失败判定，积分系统"></a>失败判定，积分系统</h3><ul><li><p>GamePanel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.snake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/19 - 11:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//游戏面板</span></span><br><span class="line">    <span class="comment">//实现 KeyListener 接口,重写接口方法</span></span><br><span class="line">    <span class="comment">//实现 ActionListener(定时器)接口,重写接口方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>, <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义蛇的数据结构</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//🐍长度</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeX = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">600</span>];<span class="comment">//蛇的X坐标</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeY = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">500</span>];<span class="comment">//蛇的Y坐标</span></span><br><span class="line">    <span class="comment">//方向</span></span><br><span class="line">    String direction;<span class="comment">//初始方向向右</span></span><br><span class="line">    <span class="comment">//食物的坐标</span></span><br><span class="line">    <span class="keyword">int</span> foodX;</span><br><span class="line">    <span class="keyword">int</span> foodY;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//游戏当前的状态:开始，停止</span></span><br><span class="line">    <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;<span class="comment">//默认不开始</span></span><br><span class="line">    <span class="comment">//失败判定</span></span><br><span class="line">    <span class="keyword">boolean</span> isFall = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//定时器,200ms = 1s执行一次</span></span><br><span class="line">    Timer timer=<span class="keyword">new</span> Timer(<span class="number">200</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//分数定义</span></span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//获得焦点和键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//获得键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//游戏开始</span></span><br><span class="line">        timer.start();<span class="comment">//定时器开启</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        length=<span class="number">3</span>;</span><br><span class="line">        snakeX[<span class="number">0</span>]=<span class="number">100</span>; snakeY[<span class="number">0</span>]=<span class="number">100</span>;<span class="comment">//头坐标</span></span><br><span class="line">        snakeX[<span class="number">1</span>]=<span class="number">75</span>; snakeY[<span class="number">1</span>]=<span class="number">100</span>;<span class="comment">//第一个身体坐标</span></span><br><span class="line">        snakeX[<span class="number">2</span>]=<span class="number">50</span>; snakeY[<span class="number">2</span>]=<span class="number">100</span>;<span class="comment">//第二个身体坐标</span></span><br><span class="line">        direction =<span class="string">&quot;R&quot;</span>;<span class="comment">//初始方向向右</span></span><br><span class="line">        <span class="comment">//随机食物坐标</span></span><br><span class="line">        foodX=<span class="number">25</span>+<span class="number">25</span>*random.nextInt(<span class="number">34</span>);</span><br><span class="line">        foodY=<span class="number">75</span>+<span class="number">25</span>*random.nextInt(<span class="number">24</span>);</span><br><span class="line">        score=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制面板,游戏中所有东西都用这支画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="comment">//绘制静态面板</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.WHITE);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>,<span class="number">75</span>,<span class="number">850</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//积分绘制</span></span><br><span class="line">        g.setColor(Color.WHITE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">18</span>));</span><br><span class="line">        g.drawString(<span class="string">&quot;长度 &quot;</span>+length,<span class="number">750</span>,<span class="number">35</span>);</span><br><span class="line">        g.drawString(<span class="string">&quot;分数 &quot;</span>+score,<span class="number">750</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制食物</span></span><br><span class="line">        Data.food.paintIcon(<span class="keyword">this</span>,g,foodX,foodY);</span><br><span class="line">        <span class="comment">//把小蛇画上去,通过方向来判断</span></span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            Data.right.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//头初始化向右</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            Data.left.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向左</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            Data.up.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向上</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            Data.down.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]);<span class="comment">//方向向下</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//绘制身体坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Data.body.paintIcon(<span class="keyword">this</span>,g,snakeX[i],snakeY[i]);<span class="comment">//身体坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//游戏状态</span></span><br><span class="line">        <span class="keyword">if</span>(isStart==<span class="keyword">false</span>)&#123;</span><br><span class="line">            g.setColor(Color.WHITE);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">40</span>));<span class="comment">//设置字体</span></span><br><span class="line">            g.drawString(<span class="string">&quot;按下空格开始游戏&quot;</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//失败绘制</span></span><br><span class="line">        <span class="keyword">if</span>(isFall)&#123;</span><br><span class="line">            g.setColor(Color.RED);</span><br><span class="line">            g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.BOLD,<span class="number">60</span>));<span class="comment">//设置字体</span></span><br><span class="line">            g.drawString(<span class="string">&quot;GAME OVER&quot;</span>,<span class="number">280</span>,<span class="number">350</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘监听事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> keyCode = e.getKeyCode();<span class="comment">//获得键盘按键</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.VK_SPACE)&#123;</span><br><span class="line">          <span class="keyword">if</span>(isFall)&#123;</span><br><span class="line">              <span class="comment">//重新开始</span></span><br><span class="line">              isFall=<span class="keyword">false</span>;</span><br><span class="line">              init();</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              isStart = !isStart;<span class="comment">//取反</span></span><br><span class="line">          &#125;</span><br><span class="line">            repaint();<span class="comment">//重新绘制</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//控制小蛇上下左右移动,且小蛇不能直接回头</span></span><br><span class="line">        <span class="keyword">if</span>((keyCode == KeyEvent.VK_UP||keyCode == KeyEvent.VK_W)&amp;&amp;!direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;U&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_DOWN||keyCode == KeyEvent.VK_S)&amp;&amp;!direction.equals(<span class="string">&quot;U&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;D&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_LEFT||keyCode == KeyEvent.VK_A)&amp;&amp;!direction.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;L&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((keyCode == KeyEvent.VK_RIGHT||keyCode == KeyEvent.VK_D)&amp;&amp;!direction.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">            direction=<span class="string">&quot;R&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定时器监听</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isStart &amp;&amp; isFall==<span class="keyword">false</span>) &#123;  <span class="comment">//如果游戏开始,就让小蛇动起来</span></span><br><span class="line">            <span class="comment">//身体移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="comment">//移动，后一截移动到前一截</span></span><br><span class="line">                snakeX[i] = snakeX[i - <span class="number">1</span>];</span><br><span class="line">                snakeY[i] = snakeY[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//头控制身体移动</span></span><br><span class="line">            <span class="keyword">if</span> (direction.equals(<span class="string">&quot;R&quot;</span>)) &#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>] + <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeX[<span class="number">0</span>] &gt; <span class="number">850</span>) &#123;</span><br><span class="line">                    snakeX[<span class="number">0</span>] = <span class="number">25</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>] - <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeX[<span class="number">0</span>] &lt; <span class="number">25</span>) &#123;</span><br><span class="line">                    snakeX[<span class="number">0</span>] = <span class="number">850</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;U&quot;</span>)) &#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>] - <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeY[<span class="number">0</span>] &lt; <span class="number">75</span>) &#123;</span><br><span class="line">                    snakeY[<span class="number">0</span>] = <span class="number">650</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction.equals(<span class="string">&quot;D&quot;</span>))&#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>] + <span class="number">25</span>;</span><br><span class="line">                <span class="comment">//边界判断</span></span><br><span class="line">                <span class="keyword">if</span> (snakeY[<span class="number">0</span>] &gt; <span class="number">650</span>) &#123;</span><br><span class="line">                    snakeY[<span class="number">0</span>] = <span class="number">75</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//吃食物</span></span><br><span class="line">            <span class="keyword">if</span>(snakeX[<span class="number">0</span>]==foodX &amp;&amp; snakeY[<span class="number">0</span>]==foodY)&#123;</span><br><span class="line">                length+=<span class="number">1</span>;<span class="comment">//身体长度增加</span></span><br><span class="line">                score+=<span class="number">10</span>;<span class="comment">//分数增加</span></span><br><span class="line">                <span class="comment">//再次随机生成食物</span></span><br><span class="line">                foodX=<span class="number">25</span>+<span class="number">25</span>*random.nextInt(<span class="number">34</span>);</span><br><span class="line">                foodY=<span class="number">75</span>+<span class="number">25</span>*random.nextInt(<span class="number">24</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//失败事件,撞到身体</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(snakeX[<span class="number">0</span>]==snakeX[i]&amp;&amp;snakeY[<span class="number">0</span>]==snakeY[i])&#123;</span><br><span class="line">                    isFall=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();<span class="comment">//重绘</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();<span class="comment">//定时器开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="GUI阶段回顾与总结"><a href="#GUI阶段回顾与总结" class="headerlink" title="GUI阶段回顾与总结"></a>GUI阶段回顾与总结</h3><p><strong>贪吃蛇实现思路：</strong></p><ul><li><p>定义数据</p></li><li><p>画到面板上</p></li><li><p>监听事件</p><ul><li>键盘监听 </li><li>事件监听</li></ul></li><li><p>生成jar文件</p><ul><li>在CMD中输入<code>jar cvf 生成名称.jar 文件夹名/.</code></li><li>保证所有.class和资源文件都在该文件夹内</li></ul></li><li><p>游戏效果图</p><p><a href="https://imgtu.com/i/fbgAZd"><img src="https://z3.ax1x.com/2021/08/19/fbgAZd.png" alt="fbgAZd.png"></a></p></li></ul><p><strong>总结：</strong></p><p>  <a href="https://imgtu.com/i/fblN28"><img src="https://z3.ax1x.com/2021/08/19/fblN28.png" alt="fblN28.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaGUI】JavaGUI入门到小游戏实战(3)</title>
      <link href="/2021/08/18/javaGUI1_3/"/>
      <url>/2021/08/18/javaGUI1_3/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaGUI入门到小游戏实战-3"><a href="#JavaGUI入门到小游戏实战-3" class="headerlink" title="JavaGUI入门到小游戏实战(3)"></a>JavaGUI入门到小游戏实战(3)</h2><blockquote><p>前言：</p><p>推荐免费JavaGUI入门视频：<a href="https://www.bilibili.com/video/BV1DJ411B75F?p=14">【狂神说Java】GUI编程入门到游戏实战_哔哩哔哩_bilibili</a></p></blockquote><h3 id="Swing和JFrame窗体"><a href="#Swing和JFrame窗体" class="headerlink" title="Swing和JFrame窗体"></a>Swing和JFrame窗体</h3><p><strong>窗口,面板：</strong></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 9:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFrameDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyJframe2().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJframe2</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;这是Jlabel&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.add(label);</span><br><span class="line">        <span class="comment">//设置水平对齐</span></span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得容器</span></span><br><span class="line">       Container container =<span class="keyword">this</span>.getContentPane();</span><br><span class="line">       container.setBackground(Color.pink);</span><br><span class="line">        <span class="comment">//关闭事件</span></span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签居中：</p><p>​    <code>        label.setHorizontalAlignment(SwingConstants.CENTER);</code></p><h3 id="JDialog弹窗"><a href="#JDialog弹窗" class="headerlink" title="JDialog弹窗"></a>JDialog弹窗</h3><p><strong>JDialog：</strong></p><ul><li><p>用来被弹出，默认有关闭事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 10:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//主窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DialogDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JFrame 放东西 容器</span></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//绝对布局</span></span><br><span class="line">        container.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//按钮</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">&quot;点击弹出对话框&quot;</span>);</span><br><span class="line">        button.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line">        container.add(button);</span><br><span class="line">        <span class="comment">//点击这个按钮，弹出弹窗</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//弹窗</span></span><br><span class="line">                <span class="keyword">new</span> MyDialogDemo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DialogDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//弹窗的窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialogDemo</span> <span class="keyword">extends</span> <span class="title">JDialog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDialogDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 弹窗默认有关闭监听</span></span><br><span class="line">        <span class="comment">//  this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span></span><br><span class="line"></span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        con.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        con.add(<span class="keyword">new</span> Label(<span class="string">&quot;这就是一个弹窗&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Icon、ImageIcon标签"><a href="#Icon、ImageIcon标签" class="headerlink" title="Icon、ImageIcon标签"></a>Icon、ImageIcon标签</h3><p><strong>label:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> JLabel(<span class="string">&quot;标题&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>图标Icon:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 10:49</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageIconDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageIconDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取图片地址</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;imageIcon&quot;</span>);</span><br><span class="line">        URL url=ImageIconDemo.class.getResource(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ImageIcon imageIcon=<span class="keyword">new</span> ImageIcon(url);</span><br><span class="line">        label.setIcon(imageIcon);</span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">        Container con = getContentPane();</span><br><span class="line">        con.add(label);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ImageIconDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本域JScroll面板"><a href="#文本域JScroll面板" class="headerlink" title="文本域JScroll面板"></a>文本域JScroll面板</h3><p><strong>JPanel:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 11:11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPanelDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JPanelDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        con.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//有间距</span></span><br><span class="line"></span><br><span class="line">        JPanel jp = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        JPanel jp2 = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        JPanel jp3 = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">1</span>));</span><br><span class="line">        jp.add(<span class="keyword">new</span> JButton(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        jp.add(<span class="keyword">new</span> JButton(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        jp.add(<span class="keyword">new</span> JButton(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        jp2.add(<span class="keyword">new</span> JButton(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        jp2.add(<span class="keyword">new</span> JButton(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        jp3.add(<span class="keyword">new</span> JButton(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        jp3.add(<span class="keyword">new</span> JButton(<span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        con.add(jp);</span><br><span class="line">        con.add(jp2);</span><br><span class="line">        con.add(jp3);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JPanelDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JScrollPanel:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 11:16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrollDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JScrollDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        JTextArea textarea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">        textarea.setText(<span class="string">&quot;文本域&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Scroll面板</span></span><br><span class="line">        JScrollPane jScrollPane = <span class="keyword">new</span> JScrollPane(textarea);</span><br><span class="line">        con.add(jScrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JScrollDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片按钮、单选框、多选框"><a href="#图片按钮、单选框、多选框" class="headerlink" title="图片按钮、单选框、多选框"></a>图片按钮、单选框、多选框</h3><ul><li><p>图片按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 11:28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo1</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//将图片变为图标</span></span><br><span class="line">        URL url = JButtonDemo1.class.getResource(<span class="string">&quot;133.jpg&quot;</span>);</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把这个图标放在按钮</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton();</span><br><span class="line">        button.setIcon(icon);</span><br><span class="line">        button.setToolTipText(<span class="string">&quot;图片按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        con.add(button);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">1001</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span>  JButtonDemo1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单选按钮(需要分组ButtonGroup)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 11:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo2</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//将图片变为图标</span></span><br><span class="line">        URL url = JButtonDemo1.class.getResource(<span class="string">&quot;133.jpg&quot;</span>);</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单选框</span></span><br><span class="line">        JRadioButton jRadioButton1 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;JRadioButton1&quot;</span>);</span><br><span class="line">        JRadioButton jRadioButton2 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;JRadioButton1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于单选框只能选择一个，分组</span></span><br><span class="line">        ButtonGroup group =  <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        group.add(jRadioButton1);</span><br><span class="line">        group.add(jRadioButton2);</span><br><span class="line">        con.add(jRadioButton1,BorderLayout.NORTH);</span><br><span class="line">        con.add(jRadioButton2,BorderLayout.SOUTH);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">1001</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span>  JButtonDemo2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复选按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 11:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo3</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//将图片变为图标</span></span><br><span class="line">        URL url = JButtonDemo1.class.getResource(<span class="string">&quot;133.jpg&quot;</span>);</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(url);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//多选框</span></span><br><span class="line">        JCheckBox jCheckBox1 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;Chebox1&quot;</span>);</span><br><span class="line">        JCheckBox jCheckBox2 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;Chebox1&quot;</span>);</span><br><span class="line">        JCheckBox jCheckBox3 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;Chebox1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        con.add(jCheckBox1,BorderLayout.NORTH);</span><br><span class="line">        con.add(jCheckBox2,BorderLayout.CENTER);</span><br><span class="line">        con.add(jCheckBox3,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">1001</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JButtonDemo3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="下拉框、列表框"><a href="#下拉框、列表框" class="headerlink" title="下拉框、列表框"></a>下拉框、列表框</h3><ul><li><p>下拉框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 12:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComboxDemo1</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComboxDemo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//下拉框</span></span><br><span class="line">        JComboBox jComboBox = <span class="keyword">new</span> JComboBox();</span><br><span class="line"></span><br><span class="line">        jComboBox.addItem(<span class="keyword">null</span>);</span><br><span class="line">        jComboBox.addItem(<span class="string">&quot;正字热映&quot;</span>);</span><br><span class="line">        jComboBox.addItem(<span class="string">&quot;即将下架&quot;</span>);</span><br><span class="line">        jComboBox.addItem(<span class="string">&quot;已下架&quot;</span>);</span><br><span class="line">        con.add(jComboBox);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ComboxDemo1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>列表框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 12:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComboxDemo2</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComboxDemo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//列表框</span></span><br><span class="line">        String[]arge = &#123;<span class="string">&quot;1：&quot;</span>,<span class="string">&quot;2：&quot;</span>,<span class="string">&quot;3：&quot;</span>&#125;;</span><br><span class="line">        JList jList = <span class="keyword">new</span> JList(arge);</span><br><span class="line">        con.add(jList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ComboxDemo2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>应用场景：</strong></p><ul><li>选择地区，或一些单个选项。</li><li>列表用来展示信息，一般是动态扩容。</li></ul><h3 id="文本框、密码框、文本域"><a href="#文本框、密码框、文本域" class="headerlink" title="文本框、密码框、文本域"></a>文本框、密码框、文本域</h3><ul><li><p>文本框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 12:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextDemo1</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextDemo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本框</span></span><br><span class="line">        JTextField text1 = <span class="keyword">new</span> JTextField(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        JTextField text2 = <span class="keyword">new</span> JTextField(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        con.add(text1,BorderLayout.NORTH);</span><br><span class="line">        con.add(text2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TextDemo1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>密码框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 12:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextDemo2</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextDemo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码框</span></span><br><span class="line">        JPasswordField text1 = <span class="keyword">new</span> JPasswordField(<span class="string">&quot;输入密码&quot;</span>);</span><br><span class="line"></span><br><span class="line">        JPasswordField text2 = <span class="keyword">new</span> JPasswordField(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">//也可以自定义隐藏样式,默认是·</span></span><br><span class="line">        text2.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        con.add(text1,BorderLayout.NORTH);</span><br><span class="line">        con.add(text2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TextDemo2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/18 - 12:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextDemo3</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextDemo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container con = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        JTextArea text1 = <span class="keyword">new</span> JTextArea(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        text1.setText(<span class="string">&quot;文本域&quot;</span>);</span><br><span class="line">        <span class="comment">//通过面板显示</span></span><br><span class="line">        JScrollPane jScrollPane = <span class="keyword">new</span> JScrollPane(text1);</span><br><span class="line">        con.add(jScrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TextDemo3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaGUI】JavaGUI入门到小游戏实战(2)</title>
      <link href="/2021/08/17/javaGUI1_2/"/>
      <url>/2021/08/17/javaGUI1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaGUI入门到小游戏实战-2"><a href="#JavaGUI入门到小游戏实战-2" class="headerlink" title="JavaGUI入门到小游戏实战(2)"></a>JavaGUI入门到小游戏实战(2)</h2><blockquote><p>前言：</p><p>推荐免费JavaGUI入门视频：<a href="https://www.bilibili.com/video/BV1DJ411B75F?p=7">【狂神说Java】GUI编程入门到游戏实战_哔哩哔哩_bilibili</a></p></blockquote><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><ul><li><p>当某个事情发生的时候，干什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 21:14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按下按钮，触发事件</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        Button button = <span class="keyword">new</span> Button();</span><br><span class="line">        <span class="comment">//因为，addActionListener()需要一个ActionListener,我们需要构造ActionListener</span></span><br><span class="line">        MyActionListener myActionListener = <span class="keyword">new</span> MyActionListener();</span><br><span class="line">        button.addActionListener(myActionListener);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        windowClose(frame);<span class="comment">//关闭窗口</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭窗口</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowClose</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//关闭窗口</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按钮事件监听</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按钮点击事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>让两个按钮共用一个事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 21:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEventTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个按钮实现同一个监听</span></span><br><span class="line">        <span class="comment">//开始   停止</span></span><br><span class="line">        Frame frame =<span class="keyword">new</span> Frame(<span class="string">&quot;开始-停止&quot;</span>);</span><br><span class="line">        Button button1 = <span class="keyword">new</span> Button(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以显示的定义触发会返回的命令</span></span><br><span class="line">        button2.setActionCommand(<span class="string">&quot;定义事件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MyMonitor myMonitor = <span class="keyword">new</span> MyMonitor();</span><br><span class="line">        button1.addActionListener(myMonitor);</span><br><span class="line">        button2.addActionListener(myMonitor);</span><br><span class="line"></span><br><span class="line">        frame.add(button1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(button2,BorderLayout.SOUTH);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMonitor</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;按钮被点击了:msg&quot;</span>+e.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="输入框事件监听"><a href="#输入框事件监听" class="headerlink" title="输入框事件监听"></a>输入框事件监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 21:39</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestText01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> MyFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TextField();</span><br><span class="line">        add(textField);</span><br><span class="line">        <span class="comment">//监听这个文本框输入的文字</span></span><br><span class="line">        MyActionListener2 maction = <span class="keyword">new</span> MyActionListener2();</span><br><span class="line">        textField.addActionListener(maction);</span><br><span class="line">        <span class="comment">//设置替换编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得一些资源</span></span><br><span class="line">       TextField text1=(TextField) e.getSource();</span><br><span class="line">       text1.getText();<span class="comment">//获得输入框文本</span></span><br><span class="line">        System.out.println(text1.getText());</span><br><span class="line">        text1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简易计算器、回顾组合内部类"><a href="#简易计算器、回顾组合内部类" class="headerlink" title="简易计算器、回顾组合内部类"></a>简易计算器、回顾组合内部类</h3><ul><li><p>opp原则：组合大于继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="comment">//A用B功能，把B私有进来，降低耦合</span></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>制作简易计算器：</strong></p><ul><li><p>示例图：</p><p><a href="https://imgtu.com/i/f5xHIO"><img src="https://z3.ax1x.com/2021/08/17/f5xHIO.md.png" alt="f5xHIO.md.png"></a></p></li><li><p>效果图</p><p><a href="https://imgtu.com/i/fIPxyQ"><img src="https://z3.ax1x.com/2021/08/17/fIPxyQ.png" alt="fIPxyQ.png"></a></p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 21:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClac</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> Calculator().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    TextField text1,text2,text3;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Frame f=<span class="keyword">new</span> Frame(<span class="string">&quot;简易计算器&quot;</span>);</span><br><span class="line">        <span class="comment">//3个文本框</span></span><br><span class="line">        text1 = <span class="keyword">new</span> TextField(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        text2 = <span class="keyword">new</span> TextField(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        text3 = <span class="keyword">new</span> TextField(<span class="number">20</span>);<span class="comment">//字符数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 个按钮</span></span><br><span class="line">        Button button = <span class="keyword">new</span> Button(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="comment">//按钮监听事件</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> MyCalculatorListener(<span class="keyword">this</span>));</span><br><span class="line">        <span class="comment">//1 个标签</span></span><br><span class="line">        Label label = <span class="keyword">new</span> Label(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="comment">//布局</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> FlowLayout());<span class="comment">//流式布局</span></span><br><span class="line"></span><br><span class="line">        f.add(text1);</span><br><span class="line">        f.add(label);</span><br><span class="line">        f.add(text2);</span><br><span class="line">        f.add(button);</span><br><span class="line">        f.add(text3);</span><br><span class="line">        f.pack();<span class="comment">//自适应</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);<span class="comment">//显示布局</span></span><br><span class="line">        closeWindow(f);<span class="comment">//关闭窗口</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//关闭窗口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeWindow</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//关闭</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalculatorListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*用构造器获取三个变量</span></span><br><span class="line"><span class="comment">      private  TextField text1,text2,text3;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//获取计算器对象,在一个类中组合另一个类</span></span><br><span class="line">    Calculator cal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCalculatorListener</span><span class="params">(Calculator cal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cal = cal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获得加数和被加数</span></span><br><span class="line">        <span class="keyword">int</span> t1=Integer.parseInt(cal.text1.getText());</span><br><span class="line">        <span class="keyword">int</span> t2=Integer.parseInt(cal.text2.getText());</span><br><span class="line">        <span class="comment">//2.把值运算后放入第三个框</span></span><br><span class="line">        cal.text3.setText(<span class="string">&quot;&quot;</span>+(t1+t2));</span><br><span class="line">        <span class="comment">//3.清楚前两个框</span></span><br><span class="line">        cal.text1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        cal.text2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>内部类优势：</strong></p><ul><li><p>更好的包装</p></li><li><p>更畅通的访问外部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 21:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClac</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> Calculator().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    TextField text1,text2,text3;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Frame f=<span class="keyword">new</span> Frame(<span class="string">&quot;简易计算器&quot;</span>);</span><br><span class="line">        <span class="comment">//3个文本框</span></span><br><span class="line">        text1 = <span class="keyword">new</span> TextField(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        text2 = <span class="keyword">new</span> TextField(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        text3 = <span class="keyword">new</span> TextField(<span class="number">20</span>);<span class="comment">//字符数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 个按钮</span></span><br><span class="line">        Button button = <span class="keyword">new</span> Button(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="comment">//按钮监听事件</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> MyCalculatorListener());</span><br><span class="line">        <span class="comment">//1 个标签</span></span><br><span class="line">        Label label = <span class="keyword">new</span> Label(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="comment">//布局</span></span><br><span class="line">        f.setLayout(<span class="keyword">new</span> FlowLayout());<span class="comment">//流式布局</span></span><br><span class="line"></span><br><span class="line">        f.add(text1);</span><br><span class="line">        f.add(label);</span><br><span class="line">        f.add(text2);</span><br><span class="line">        f.add(button);</span><br><span class="line">        f.add(text3);</span><br><span class="line">        f.pack();<span class="comment">//自适应</span></span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);<span class="comment">//显示布局</span></span><br><span class="line">        closeWindow(f);<span class="comment">//关闭窗口</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭窗口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeWindow</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//关闭</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听器类</span></span><br><span class="line">    <span class="comment">//使用内部类简化代码</span></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculatorListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//1.获得加数和被加数</span></span><br><span class="line">            <span class="keyword">int</span> t1=Integer.parseInt(text1.getText());</span><br><span class="line">            <span class="keyword">int</span> t2=Integer.parseInt(text2.getText());</span><br><span class="line">            <span class="comment">//2.把值运算后放入第三个框</span></span><br><span class="line">            text3.setText(<span class="string">&quot;&quot;</span>+(t1+t2));</span><br><span class="line">            <span class="comment">//3.清楚前两个框</span></span><br><span class="line">            text1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            text2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="画笔Paint"><a href="#画笔Paint" class="headerlink" title="画笔Paint"></a>画笔Paint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 22:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPaint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyPaint().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画笔类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPaint</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//画笔</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">       <span class="comment">//画笔需要颜色，可以绘画</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.drawOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        g.setColor(Color.green);</span><br><span class="line">        g.fillRect(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//养成习惯，画笔用完，还原到最初哟啊色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标监听事件、模拟画图工具"><a href="#鼠标监听事件、模拟画图工具" class="headerlink" title="鼠标监听事件、模拟画图工具"></a>鼠标监听事件、模拟画图工具</h3><p><strong>目的：想要实现鼠标绘画:</strong></p><ul><li><p>流程图</p><p><a href="https://imgtu.com/i/fIuuvt"><img src="https://z3.ax1x.com/2021/08/17/fIuuvt.png" alt="fIuuvt.png"></a></p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 23:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMouseListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyFrame(<span class="string">&quot;画图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自己的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建ArrayList</span></span><br><span class="line">    ArrayList points;</span><br><span class="line">    <span class="comment">//绘画需要监听鼠标位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用数组存放鼠标的点</span></span><br><span class="line">       points = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//鼠标监听器，正对这个窗口</span></span><br><span class="line">        <span class="keyword">this</span>.addMouseListener(<span class="keyword">new</span> MyMouseListener());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画画需要监听鼠标,使用迭代器输出点Iterator</span></span><br><span class="line">        Iterator iterator = points.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Point point = (Point)iterator.next();</span><br><span class="line">            g.setColor(Color.BLACK);</span><br><span class="line">            g.fillOval(point.x,point.y,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一个点到界面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPoint</span><span class="params">(Point point)</span></span>&#123;</span><br><span class="line">        points.add(point);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//适配器模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMouseListener</span> <span class="keyword">extends</span> <span class="title">MouseAdapter</span></span>&#123;</span><br><span class="line">        <span class="comment">//鼠标 按下 弹起 按住不放</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//按压</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">           MyFrame frame=(MyFrame)e.getSource();</span><br><span class="line">           <span class="comment">//点击产生一个点,获取鼠标坐标画下点</span></span><br><span class="line">            frame.addPoint(<span class="keyword">new</span> Point(e.getX(),e.getY()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次点击重画一次</span></span><br><span class="line">            frame.repaint();<span class="comment">//刷新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="窗口监听事件"><a href="#窗口监听事件" class="headerlink" title="窗口监听事件"></a>窗口监听事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 23:28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> windowFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">windowFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">windowFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBackground(Color.BLUE);</span><br><span class="line">        setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">// addWindowListener(new MyWindowListener());</span></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="keyword">this</span>.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;windowClosing&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                windowFrame f = (windowFrame) e.getSource();</span><br><span class="line">                f.setTitle(<span class="string">&quot;被激活了&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;windowActivated&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//继承实现类，来避免实现接口重写太多方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyWindowListener</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//隐藏窗口</span></span><br><span class="line">            setVisible(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭窗口</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘监听事件"><a href="#键盘监听事件" class="headerlink" title="键盘监听事件"></a>键盘监听事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/17 - 23:43</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//键盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKeyboardListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> keyFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">keyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">keyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">1</span>,<span class="number">2</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line">          <span class="comment">//键盘按压</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获得键盘按下的键</span></span><br><span class="line">                <span class="keyword">int</span> keycode = e.getKeyCode();</span><br><span class="line">                System.out.println(keycode);</span><br><span class="line">                <span class="comment">//不需要可以去记录，使用VK_XX</span></span><br><span class="line">                <span class="keyword">if</span>(keycode==KeyEvent.VK_UP)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你按下了上键&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaGUI】JavaGUI入门到小游戏实战(1)</title>
      <link href="/2021/08/16/javaGUI1_1/"/>
      <url>/2021/08/16/javaGUI1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaGUI入门到小游戏实战-1"><a href="#JavaGUI入门到小游戏实战-1" class="headerlink" title="JavaGUI入门到小游戏实战(1)"></a>JavaGUI入门到小游戏实战(1)</h2><blockquote><p>前言：</p><p>推荐免费JavaGUI入门视频：<a href="https://www.bilibili.com/video/BV1DJ411B75F?p=1">【狂神说Java】GUI编程入门到游戏实战_哔哩哔哩_bilibili</a></p></blockquote><h3 id="GUI编程简介"><a href="#GUI编程简介" class="headerlink" title="GUI编程简介"></a>GUI编程简介</h3><p><strong>该怎么学？</strong></p><ul><li>这是什么？</li><li>它怎么玩？</li><li>该如何去使用</li></ul><p><strong>组件</strong>：</p><ul><li>窗口</li><li>弹窗</li><li>面板</li><li>文本框</li><li>列表框</li><li>按钮</li><li>图片</li><li>监听事件</li><li>鼠标</li><li>键盘事件</li></ul><p><strong>简介：</strong></p><ul><li><p>GUI的核心技术：Swing AWT,因为界面不美观，需要jre环境。</p></li><li><p>为什么我们要学习：</p><ul><li>写出一些想要的小工具。</li><li>工作时候可能需要维护swing，但概率很小</li><li><strong>了解MVC架构，了解监听！</strong></li></ul></li></ul><h3 id="AWT介绍"><a href="#AWT介绍" class="headerlink" title="AWT介绍"></a>AWT介绍</h3><p><strong>AWT:</strong></p><ol><li>Awt介绍：包含了很多类和接口！GUI</li><li>元素：窗口，按钮，文本框。</li><li>java.awt包</li></ol><p><strong>组件和容器:</strong></p><p><a href="https://imgtu.com/i/fWKnne"><img src="https://z3.ax1x.com/2021/08/16/fWKnne.png" alt="fWKnne.png"></a></p><h3 id="第一个Frame窗口"><a href="#第一个Frame窗口" class="headerlink" title="第一个Frame窗口"></a>第一个Frame窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/16 - 16:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//GUI的第一个界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Frame</span></span><br><span class="line">        Frame frame=<span class="keyword">new</span> Frame(<span class="string">&quot;我的第一个Java图像界面窗口&quot;</span>);</span><br><span class="line">        <span class="comment">//需要设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>));</span><br><span class="line">        <span class="comment">//弹出初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="comment">//设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尝试封装:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//窗口封装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//展示多个窗口</span></span><br><span class="line">        <span class="keyword">new</span> MyFrame(<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">400</span>, Color.BLUE);</span><br><span class="line">        <span class="keyword">new</span> MyFrame(<span class="number">600</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">400</span>, Color.YELLOW);</span><br><span class="line">        <span class="keyword">new</span> MyFrame(<span class="number">300</span>,<span class="number">600</span>,<span class="number">300</span>,<span class="number">400</span>, Color.BLACK);</span><br><span class="line">        <span class="keyword">new</span> MyFrame(<span class="number">600</span>,<span class="number">600</span>,<span class="number">300</span>,<span class="number">400</span>, Color.PINK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//窗口类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id=<span class="number">0</span>;<span class="comment">//可能有多个窗口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w,<span class="keyword">int</span> h,Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;MyFrame&quot;</span>+(++id));</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setBounds(x,y,w,h);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：发现窗口无法关闭</strong></p><h3 id="Panel面板讲解"><a href="#Panel面板讲解" class="headerlink" title="Panel面板讲解"></a>Panel面板讲解</h3><p><strong>解决窗口无法关闭：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/16 - 16:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//panel面板</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//布局概念</span></span><br><span class="line">       Panel panel= <span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//panel设置坐标小对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">60</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> Color(<span class="number">149</span>, <span class="number">57</span>, <span class="number">57</span>));</span><br><span class="line">        <span class="comment">//添加面板</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//监听事件 关闭窗口</span></span><br><span class="line">        <span class="comment">//适配器模式</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种布局管理器"><a href="#三种布局管理器" class="headerlink" title="三种布局管理器"></a>三种布局管理器</h3><ul><li><p>流式布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/16 - 16:36</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//流式布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFlowLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//组件按钮</span></span><br><span class="line">        Button button1 = <span class="keyword">new</span> Button(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        Button button3 = <span class="keyword">new</span> Button(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line">        <span class="comment">//设置流式布局</span></span><br><span class="line">        <span class="comment">//frame.setLayout(new FlowLayout());</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT));</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加按钮</span></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>东南西北中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/16 - 16:42</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//东西南北中布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBorderLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;东西南北中布局&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Button east = <span class="keyword">new</span> Button(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">        Button west = <span class="keyword">new</span> Button(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">        Button south = <span class="keyword">new</span> Button(<span class="string">&quot;South&quot;</span>);</span><br><span class="line">        Button north = <span class="keyword">new</span> Button(<span class="string">&quot;North&quot;</span>);</span><br><span class="line">        Button center = <span class="keyword">new</span> Button(<span class="string">&quot;Center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表格布局</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/16 - 16:47</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//表格布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGridLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;表格布局&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Button btn1 = <span class="keyword">new</span> Button(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        Button btn2 = <span class="keyword">new</span> Button(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">        Button btn3 = <span class="keyword">new</span> Button(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">        Button btn4= <span class="keyword">new</span> Button(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">        Button btn5 = <span class="keyword">new</span> Button(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">        Button btn6 = <span class="keyword">new</span> Button(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line"></span><br><span class="line">        frame.pack();<span class="comment">//java函数，自动最优</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习讲解及总结"><a href="#练习讲解及总结" class="headerlink" title="练习讲解及总结"></a>练习讲解及总结</h3><p><strong>练习：</strong></p><p><a href="https://imgtu.com/i/fWcKts"><img src="https://z3.ax1x.com/2021/08/16/fWcKts.png" alt="fWcKts.png"></a></p><p><strong>效果：</strong></p><p>  <img src="https://z3.ax1x.com/2021/08/16/fWcA6f.png" alt="fWcA6f.png"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/16 - 16:54</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//总布局</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;练习&quot;</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setLocation(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//4个面板</span></span><br><span class="line">        Panel p1 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        Panel p2 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        Panel p3 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        Panel p4 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个面板</span></span><br><span class="line">        p1.add(<span class="keyword">new</span> Button(<span class="string">&quot;East-1&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p1.add(<span class="keyword">new</span> Button(<span class="string">&quot;West-2&quot;</span>),BorderLayout.WEST);</span><br><span class="line">        <span class="comment">//第二个面板</span></span><br><span class="line">        p2.add(<span class="keyword">new</span> Button(<span class="string">&quot;2-btn-1&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> Button(<span class="string">&quot;2-btn-2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//p2放到p1中间</span></span><br><span class="line">        p1.add(p2,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三个面板</span></span><br><span class="line">        p3.add(<span class="keyword">new</span> Button(<span class="string">&quot;East-3&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p3.add(<span class="keyword">new</span> Button(<span class="string">&quot;West-4&quot;</span>),BorderLayout.WEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第四个面板</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            p4.add(<span class="keyword">new</span> Button(<span class="string">&quot;for-&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p4放到p3中</span></span><br><span class="line">        p3.add(p4,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将面板放入frame</span></span><br><span class="line">        frame.add(p1);</span><br><span class="line">        frame.add(p3,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束监听</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//结束</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><p>Frame是一个顶级窗口。</p></li><li><p>Panel无法单独显示，必须添加到某个容器中。</p></li><li><p>布局管理器：</p><ul><li>流式布局(FlowLayout)</li><li>东西南北中(BorderLayout)</li><li>表格布局(GridLayout)</li></ul></li><li><p>大小，定位，背景颜色，可见性，监听。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】JavaSE总结</title>
      <link href="/2021/08/16/javaSE1_x/"/>
      <url>/2021/08/16/javaSE1_x/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaSE总结"><a href="#JavaSE总结" class="headerlink" title="JavaSE总结"></a>JavaSE总结</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV1MJ411v7tJ">【狂神说Java】JavaSE阶段回顾总结_哔哩哔哩_bilibili</a></p><p>JavaSE基础笔记代码下载地址：</p><p>蓝奏云：<a href="https://wwa.lanzoui.com/itg1ssnyz9e">下载地址</a> 密码：joker</p><p>百度云：<a href="https://pan.baidu.com/s/1-b01f52gS_KP6SClOD1P_A">下载地址</a> 提取码：g4lx</p></blockquote><p><strong>正在努力更新中( •̀ ω •́ )✧</strong></p><p><strong>待更新内容：</strong></p><ul><li>常用类学习</li><li>I/O流详解</li><li>JavaSE总结</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java异常</title>
      <link href="/2021/08/15/javaSE1_8/"/>
      <url>/2021/08/15/javaSE1_8/</url>
      
        <content type="html"><![CDATA[<h2 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=76">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h3><p><strong>什么是异常：</strong></p><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求，你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或硬盘可能就满了…</li><li>软件程序在运行过程中，非常可能遇到刚刚提到这些异常问题，我们叫异常(Exception)，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</li></ul><ul><li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到，网络连接失败，非法参数等。</li><li>异常发生在程序运行期间，它影响了正常的程序执行流程。</li></ul><p><strong>异常体系结构：</strong></p><ul><li><p>Java把异常当作对象来处理，并定义一个基类<code>java.lang.Throwable</code>作为所有异常的超类。</p></li><li><p>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误<strong>Error</strong>和异常<strong>Exception</strong>。</p><p><a href="https://imgtu.com/i/fcxA4P"><img src="https://z3.ax1x.com/2021/08/15/fcxA4P.png" alt="fcxA4P.png"></a></p></li></ul><p><strong>Error：</strong></p><ul><li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误(Virtual MachineError)，当JVM不再继续执行操作所需的内存资源时，将出现<code>OutOfMemoryError</code>。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止。</li><li>还有发生在虚拟机试图执行应用是，如类定义错误(NoClassDefFoundError)、连接错误(LinkageError)。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li></ul><p><strong>Exception：</strong></p><ul><li>在Exception分支中有一个重要的子类RuntimeException(运行时异常)。</li><li>ArrayIndexOutOfBoundsException(数组下标越界)</li><li>NullPointerException(空指针异常)</li><li>ArithmeticException(算数异常)</li><li>MissingResourceException(丢失资源)</li><li>ClassNoFoundException(找不到类)等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</li><li>这些异常一般时由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</li><li>Error和Exception的区别：Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程；Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li></ul><h3 id="捕获和抛出异常"><a href="#捕获和抛出异常" class="headerlink" title="捕获和抛出异常"></a>捕获和抛出异常</h3><p><strong>异常处理机制：</strong></p><ul><li>抛出异常</li><li>捕获异常</li></ul><ul><li><p>异常处理五个关键字：</p><ul><li>try,catch,finally,throw,throws</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.opp.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/15 - 15:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//捕获异常</span></span><br><span class="line">        <span class="comment">//finally不是必须的</span></span><br><span class="line">        <span class="comment">//捕获多个异常，从小到大</span></span><br><span class="line">        <span class="comment">//快捷键 Ctrl+Alt+T</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123; <span class="comment">//catch里为想要捕获的异常最高为Throwable</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序异常，变量b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Test().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义异常及小结"><a href="#自定义异常及小结" class="headerlink" title="自定义异常及小结"></a>自定义异常及小结</h3><p><strong>自定义异常：</strong></p><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可分为以下几个步骤：<ul><li>创建自定义异常类。</li><li>在方法中通过throw关键字抛出异常对象。</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li><li>在出现异常方法的调用者中捕获并处理异常。</li></ul></li></ul><p><strong>实际应用中的总结：</strong></p><ul><li><p>处理运行时异常，采用逻辑去合理规避同时辅助<code>try-catch</code>处理。</p></li><li><p>在多重catch块后面，可以加一个catch(Exception)来处理可能会被遗漏的异常。</p></li><li><p>对于不确定的代码，也可以加上<code>try-catch</code>，处理潜在的异常。</p></li><li><p>尽量去处理异常，切忌只是简单地调用<code>printStackTrace()</code>去打印输出。</p></li><li><p>具体如何处理异常，要根据不同的业务需求和异常类型去决定。</p></li><li><p>尽量添加finally语句块去释放占用的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyException</span></span><br><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递数字&gt;10 抛出异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString ： 异常打印</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException：&quot;</span> + detail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">           <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            <span class="comment">//增加一些处理异常的代码</span></span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可能会有异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数：&quot;</span>+a);</span><br><span class="line">      <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);<span class="comment">//抛出</span></span><br><span class="line">      &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java面向对象(下)</title>
      <link href="/2021/08/15/javaSE1_7/"/>
      <url>/2021/08/15/javaSE1_7/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面向对象-下"><a href="#Java面向对象-下" class="headerlink" title="Java面向对象(下)"></a>Java面向对象(下)</h2><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=71">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p><h3 id="什么时多态"><a href="#什么时多态" class="headerlink" title="什么时多态"></a>什么时多态</h3><ul><li>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</li><li>一个对象的实际类型是正确的，但可以指向对象的引用的类型有很多。</li></ul><ul><li>多态存在的条件：<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li></ul><ul><li><p>多态注意：</p><ul><li>多态是方法的多态，属性没有多态性。</li><li>父类和子类，有联系，强转类型转换异常<code>ClassCastException</code></li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。</li></ul></li><li><p>重写注意：</p><ul><li>static 方法，属于类，不属于实例，无法重写。</li><li>final 一般修饰常量，无法重写。</li><li>private为私有，无法重写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//student类</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//new Person();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以只想的引用类型就不确定了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//person父类性，可以指向子类，但不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        s2.run();<span class="comment">//子类重写父类的方法，执行子类的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line"></span><br><span class="line">        s1.eat();</span><br><span class="line">        <span class="comment">//s2.eat();</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><ul><li><p>instanceof关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//instandeof</span></span><br><span class="line">       Object object = <span class="keyword">new</span> Student();</span><br><span class="line">       <span class="comment">//能否编译通过主要看X与Y有无父子关系</span></span><br><span class="line">      <span class="comment">// System.out.println(X instanceof Y);</span></span><br><span class="line">  </span><br><span class="line">       System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">       System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">       System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">       System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">       System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line">  </span><br><span class="line">       Person perosn = <span class="keyword">new</span> Person();</span><br><span class="line">       System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">       System.out.println(perosn <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">       System.out.println(perosn <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">       System.out.println(perosn <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">       System.out.println(perosn <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">// System.out.println(perosn instanceof String);//编译报错</span></span><br><span class="line">  </span><br><span class="line">       Student student = <span class="keyword">new</span> Student();</span><br><span class="line">       System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">       System.out.println(student <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">       System.out.println(student <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">       System.out.println(student <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">      <span class="comment">// System.out.println(student instanceof Teacher);//编译报错</span></span><br><span class="line">      <span class="comment">// System.out.println(student instanceof String);//编译报错</span></span><br></pre></td></tr></table></figure></li><li><p>类型转换</p><ul><li>父类引用指向子类的对象。</li><li>把子类转换位父类，向上转型。</li><li>把父类转换为子类，向下转型，强制转化。</li><li>方便方法的调用，减少重复的代码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类型之间的转换  父  子</span></span><br><span class="line">    <span class="comment">//高                   低</span></span><br><span class="line">    Person student = <span class="keyword">new</span> Student();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//student将这个对象转换为Student类型，我们就可以使用Student类型</span></span><br><span class="line">  </span><br><span class="line">    ((Student)student).go();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//子类转化为父类，可能丢失自己本来的方法</span></span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">    student1.go();</span><br><span class="line">    Person perosn = student1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h3><ul><li><p>匿名代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//匿名代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态代码块,只执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块，只执行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态导入包：<code>import static java.lang.Math.random;</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student</span></span><br><span class="line">/<span class="keyword">static</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;<span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;<span class="comment">//非静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        Student sq = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        System.out.println(sq.age);</span><br><span class="line">        System.out.println(sq.score);</span><br><span class="line"></span><br><span class="line">        Student.go();<span class="comment">//直接调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//匿名代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//静态代码块,只执行一次</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Test类</span></span><br><span class="line"><span class="keyword">package</span> com.opp.demo03;</span><br><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/15 - 13:28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><code>abstract</code>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li></ul><ul><li>抽象类，不能使用new关键字来创建对象，他是用来让子类继承的。</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li></ul><ul><li><p>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</p></li><li><p>思考： 抽象方法存在构造器吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//abstact 抽象类  extends 单继承(接口可以多继承)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">//约束，有人帮我们实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 不能new这个抽象类，只能考子类去实现它：约束。</span></span><br><span class="line">    <span class="comment">// 2. 抽象类中可以写普通方法</span></span><br><span class="line">    <span class="comment">// 3. 抽象方法必须在抽象类中</span></span><br><span class="line">    <span class="comment">//抽象的抽象：约束</span></span><br><span class="line">    <span class="comment">//思考： 抽象方法存在构造器吗？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test类</span></span><br><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类，都必须要实现它的方法，除非子类也是抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接口的定义与实现"><a href="#接口的定义与实现" class="headerlink" title="接口的定义与实现"></a>接口的定义与实现</h3><ul><li>普通类：只有具体实现</li><li>抽象类：具体实现和规范(抽象方法)都有。</li><li>接口：只有规范。</li></ul><ul><li><p>接口就是规范，定义的是一组规则，体现了现实世界中”如果你是…则必须能…”的思想(例如：如果你是车，则必须能跑)</p></li><li><p>接口的本质是七月，就像人类社会的法律一样。制定好后大家都遵守。</p></li><li><p>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言(如：C++,Java,C#等)，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</p></li><li><p><strong>声明类的关键字是<code>class</code>，声明接口的关键字是<code>interface</code></strong></p></li><li><p>接口的作用：</p><ul><li>约束</li><li>定义一些方法，让不同的人实现</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化，接口中没有构造方法</li><li>implements可以实现多个接口</li><li>必须要重写接口中方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserService接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口中所有对象都是抽象的 修饰符默认public</span></span><br><span class="line">    <span class="comment">//接口中定义的是常量，一般不会这样定义</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TimeService接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">time</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="N种内部类"><a href="#N种内部类" class="headerlink" title="N种内部类"></a>N种内部类</h3><ul><li>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类。</li></ul><ul><li><p>成员内部类</p></li><li><p>静态内部类</p></li><li><p>局部内部类</p></li><li><p>匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得外部类的私有属性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//没有名字初始化类,不用将实例保存到变量中</span></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> Apple().eat();</span><br><span class="line"></span><br><span class="line">       UserService us = <span class="keyword">new</span> UserService()&#123;</span><br><span class="line">            <span class="comment">//重写方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个java类中可以有多个class类，但只能有一个public的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application类main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer out = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//通过这个外部类来实例化内部类</span></span><br><span class="line">        Outer.Inner inner =out.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java面向对象(上)</title>
      <link href="/2021/08/14/javaSE1_6/"/>
      <url>/2021/08/14/javaSE1_6/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面向对象-上"><a href="#Java面向对象-上" class="headerlink" title="Java面向对象(上)"></a>Java面向对象(上)</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=60">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向过程思想：<ul><li>步骤清晰简单，第一步，第二布…</li><li>面对过程适合处理一些较为简单的问题。</li></ul></li><li>面向对象思想：<ul><li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题!</li></ul></li><li><strong>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，任然需要面向过程的思路去处理。</strong></li></ul><ul><li><p>面向对象编程(Object-Oriented Programming,OOP)</p></li><li><p>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的组织(封装)数据。</strong></p></li><li><p>抽象</p></li><li><p>三大特性：</p><ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul></li><li><p>从认知论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</p></li><li><p>从代码运行角度考虑是现有类后又对象。类是对象的模板。</p></li></ul><h3 id="回顾方法的定义"><a href="#回顾方法的定义" class="headerlink" title="回顾方法的定义"></a>回顾方法的定义</h3><ul><li><p>方法的定义：</p><ul><li>修饰符</li><li>返回类型</li><li>break和return的区别</li><li>方法名</li><li>参数列表</li><li>异常抛出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型 方法名(...)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a&gt;b?a:b; <span class="comment">//三元运算符</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//抛出异常</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="回顾方法的调用"><a href="#回顾方法的调用" class="headerlink" title="回顾方法的调用"></a>回顾方法的调用</h3><ul><li><p>方法的调用：</p><ul><li>静态方法</li><li>非静态方法</li><li>形参和实参</li><li>值传递和引用传递</li><li>this关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/14 - 18:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态方法 static</span></span><br><span class="line">    <span class="comment">//非静态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//  Student student = new Student();</span></span><br><span class="line">     <span class="comment">//  student.say();</span></span><br><span class="line">      <span class="keyword">int</span> a= add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">      System.out.println(a);</span><br><span class="line">      <span class="comment">//值传递</span></span><br><span class="line">      <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">      System.out.println(b);<span class="comment">//1</span></span><br><span class="line">      Demo02.change(b);</span><br><span class="line">      System.out.println(b);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//引用传递</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        Demo02.change(person);</span><br><span class="line">        System.out.println(person.name);<span class="comment">//引用传递值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//static和类一起加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//b();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//类实例化之后才存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//形参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//传递值,返回值为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        b=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="comment">//person是一个对象，修改类Person类里的全局变量name</span></span><br><span class="line">        person.name=<span class="string">&quot;引用传递值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个Person类，有一个属性 name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h3><p><strong>类与对象的关系：</strong></p><ul><li>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。<ul><li>动物、植物、手机、电脑….</li><li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为。</li></ul></li><li>对象是抽象概念的具体实例<ul><li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例。</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><p><strong>创建与初始化对象：</strong></p><ul><li><p><strong>使用new关键字创建对象</strong></p></li><li><p>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进项默认的初始化以及对类中构造器的调用。</p></li><li><p>类中的构造器也称为构造方法，实在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：</p><ul><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ul></li><li><p><strong>构造器必须要掌握</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Application类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类：抽象的，实例化new</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        student.name=<span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        student.age=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(student.name);</span><br><span class="line">        System.out.println(student.age);</span><br><span class="line"></span><br><span class="line">        student1.name=<span class="string">&quot;小红&quot;</span>;</span><br><span class="line">        student1.age=<span class="number">9</span>;</span><br><span class="line">        System.out.println(student1.name);</span><br><span class="line">        System.out.println(student1.age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生上课偷偷说话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="构造器详解"><a href="#构造器详解" class="headerlink" title="构造器详解"></a>构造器详解</h3><ul><li><p>构造器</p><ul><li>和类名相同</li><li>没有返回值</li></ul></li><li><p>作用：</p><ul><li>new 本质在调用构造方法</li><li>初始画对象的值</li></ul></li><li><p>注意：</p><ul><li>定义有参构造后，如果想用无参，显示的定义一个无参构造</li></ul></li><li><p>实例化初始值：</p><ul><li>使用new关键字，本质是在调用构造器</li><li>用来初始化值</li><li>alt+ins(insert) 生成构造器快捷键</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个类即使什么都不写，也会存在一个方法，为构造器</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//实例化初始值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Persons</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// this.name = &quot;构造器测试名字&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造  一旦定义有参构造，无参构造就必须显示定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Persons</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">       <span class="comment">// Persons person = new Persons();</span></span><br><span class="line">        Persons person = <span class="keyword">new</span> Persons(<span class="string">&quot;有参构造&quot;</span>);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h3><ul><li><p>创建对象内存简单分析</p><p><a href="https://imgtu.com/i/f612kt"><img src="https://z3.ax1x.com/2021/08/14/f612kt.png" alt="f612kt.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叫了一声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pet dog = <span class="keyword">new</span> Pet();</span><br><span class="line">        dog.name=<span class="string">&quot;二狗&quot;</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="简单小结类与对象"><a href="#简单小结类与对象" class="headerlink" title="简单小结类与对象"></a>简单小结类与对象</h3><ul><li>类与对象：<ul><li>类是一个模板：抽象，对象是一个具体的实例。</li></ul></li><li>方法：<ul><li>定义，调用</li></ul></li><li>对应的引用：<ul><li>引用类型：基本类型</li><li>对象是通过引用来操作的：栈 -&gt; 堆</li></ul></li><li>属性：字段Field  成员变量<ul><li>默认初始化：<ul><li>数字：0  0.0</li><li>char：u0000</li><li>boolean：false</li><li>引用：null</li></ul></li><li>修饰符：属性类型 属性名 =属性值</li></ul></li><li>对象的创建和使用<ul><li>必须使用new关键字创建对象，构造器 </li><li>对象的属性</li><li>对象的方法</li></ul></li><li>类：<ul><li>静态的属性</li><li>动态的方法</li></ul></li></ul><h3 id="封装详解"><a href="#封装详解" class="headerlink" title="封装详解"></a>封装详解</h3><ul><li><p>该露的露，该藏的藏</p><ul><li>我们程序设计要追求”<strong>高内聚，低耦合</strong>“。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用。</li></ul></li><li><p>封装（数据的隐藏）</p><ul><li>通常，应该禁止直接访问一个对象中数据的实际表示，而通过操作接口来访问，这称谓信息隐藏。</li></ul></li><li><p>记住这句话：<strong>属性私有，get/set</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//private 私有</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     封装的优势：</span></span><br><span class="line"><span class="comment">     1. 提高程序的安全性，保护数据</span></span><br><span class="line"><span class="comment">     2. 隐藏代码的实现细节</span></span><br><span class="line"><span class="comment">     3. 同意接口</span></span><br><span class="line"><span class="comment">     4. 系统可维护性增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;    <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> set;  <span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="comment">//get获取这个数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Students st = <span class="keyword">new</span> Students();</span><br><span class="line">        st.setName(<span class="string">&quot;通过set赋值name&quot;</span>);</span><br><span class="line">        System.out.println(st.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ul><li>继承的本质是对某一批类的抽象，从而实现对像是世界更好的建模。</li><li><code>extands</code>的意思是”扩展”。子类是父类的扩展。</li><li>Java中类只有单继承，没有多继承！</li></ul><ul><li>继承是类和类之前的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等</li><li>继承关系的两个类，一个为子类(派生类)，一个为父类(基类)。子类继承父类，使用关键字<code>extends</code>来表示。</li><li>子类和父类之间，从意义上将应该具有”is a”的关系。</li></ul><ul><li><p>object类(每个类都默认继承)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line">     Person01 per = <span class="keyword">new</span> Person01();</span><br><span class="line">     <span class="comment">//name是persons中定义的</span></span><br><span class="line">     <span class="comment">// 当person01继承persons时也可使用其中公共的方法等</span></span><br><span class="line">     per.name=<span class="string">&quot;222&quot;</span>;</span><br><span class="line">     System.out.println(per.name);</span><br><span class="line">     <span class="comment">//Java中所有的类都默认继承Object</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="super详解"><a href="#super详解" class="headerlink" title="super详解"></a>super详解</h3><ul><li><p>super </p><ul><li>super调用父类的构造方法，必须在构造方法的第一个。</li><li>super必须出现在子类的方法或构造方法中。</li><li>super和this不能同时调用构造方法。</li></ul></li><li><p>this</p><ul><li>代表的对象不同，this调用本对象，super调用父类的应用。</li><li>this没有继承也可以用，super只能在继承条件才可以使用。</li><li>  <code>this();</code>本类的构造，<code>super();</code>父类的构造。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person01</span> <span class="keyword">extends</span> <span class="title">Persons</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name1=<span class="string">&quot;子类super&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name1)</span></span>&#123;</span><br><span class="line">        System.out.println(name1);<span class="comment">//传输的值</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name1);<span class="comment">//当前类的值</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name1);<span class="comment">//父类的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类print方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法也可访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print();</span><br><span class="line">        <span class="keyword">this</span>.print();</span><br><span class="line">        <span class="keyword">super</span>.print();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//隐藏代码：调用了父类的无参构造</span></span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//这里默认隐藏了，必须在第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;person01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super</span></span><br><span class="line">        Person01 per = <span class="keyword">new</span> Person01();</span><br><span class="line">        per.test(<span class="string">&quot;main测试super&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><ul><li><p>重写需要有继承关系，子类重写父类的方法。</p></li><li><p>重写要求：</p><ul><li>方法名必须相同。</li><li>参数列表必须相同</li><li>修饰服：范围可扩大但不能缩小。(public&gt;protected&gt;default&gt;private)</li><li>抛出的异常：范围可以被缩小但不能扩大。</li></ul></li><li><p>重写子类的方法必须和父类一致，方法体不同。</p></li><li><p>重写原因：</p><ul><li>父类的功能，子类不一定需要或不能满足子类需求。</li><li>Alt+Ins ：override</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A-&gt;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写都是方法的重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B-&gt;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//方法重写</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();</span><br><span class="line">        <span class="comment">//有继承关系后，父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java数组</title>
      <link href="/2021/08/13/javaSE1_5/"/>
      <url>/2021/08/13/javaSE1_5/</url>
      
        <content type="html"><![CDATA[<h2 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=51">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><ul><li>数组是相同类型数据的有序集合。</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li></ul><h3 id="数组的声明和创建"><a href="#数组的声明和创建" class="headerlink" title="数组的声明和创建"></a>数组的声明和创建</h3><ul><li><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;  <span class="comment">//首选的方法</span></span><br><span class="line">dataType arrayRefVar[];  <span class="comment">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure></li><li><p>Java语言使用new操作符来创建数组，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure></li><li><p>数组的元素是通过索引访问的，数组索引从0开始。</p></li><li><p>获取数组长度：<code>arrays.length</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">       <span class="keyword">int</span> [] array;<span class="comment">//定义</span></span><br><span class="line">  </span><br><span class="line">       array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">  </span><br><span class="line">       array[<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">       array[<span class="number">1</span>]=<span class="number">11</span>;</span><br><span class="line">       array[<span class="number">2</span>]=<span class="number">13</span>;</span><br><span class="line">       array[<span class="number">3</span>]=<span class="number">21</span>;</span><br><span class="line">       array[<span class="number">4</span>]=<span class="number">22</span>;</span><br><span class="line">       array[<span class="number">5</span>]=<span class="number">11</span>;</span><br><span class="line">       System.out.println(array[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li></ul><h3 id="三种初始化及内存分析"><a href="#三种初始化及内存分析" class="headerlink" title="三种初始化及内存分析"></a>三种初始化及内存分析</h3><p><strong>内存分析：</strong></p><ul><li><p>Java内存分析：</p><p><a href="https://imgtu.com/i/fDacXF"><img src="https://z3.ax1x.com/2021/08/13/fDacXF.png" alt="fDacXF.png"></a></p></li><li><p>写代码画图分析内存</p><p><a href="https://imgtu.com/i/fDDcdg"><img src="https://z3.ax1x.com/2021/08/13/fDDcdg.md.png" alt="fDDcdg.md.png"></a></p></li></ul><p><strong>三种初始化：</strong></p><ul><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[]a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>数组的默认初始化：</p><ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li></ul></li></ul><h3 id="下表越界及小结"><a href="#下表越界及小结" class="headerlink" title="下表越界及小结"></a>下表越界及小结</h3><p><strong>数组的四个基本特点：</strong></p><ul><li>其长度是确定的。数组一旦被创建，它的大小就是不可改变的。</li><li>其元素必须是相同类型，不允许出现混合类型。</li><li>数组中的元素可以是任何数组类型，包括基本类型和引用类型。</li><li>数组变量为引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</li></ul><p><strong>数组边界：</strong></p><ul><li><p>下标的合法区间：[0,length-1],如果越界就会报错；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[]a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>ArrayIndexOutOfBoundsException</code>:数组下标越界异常！</strong></p></li><li><p>小结：</p><ul><li>数组是相同数据类型(数组类型可以为任意类型)的有序集合。</li><li>数组也是对象。数组元素相当于对象的成员变量。</li><li>数组长度是确定的、不可变的。如果越界，则报异常：<code>ArrayIndexOutofBounds</code></li></ul></li></ul><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><ul><li><p>普通循环遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[]arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//打印全部数组元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.println(arrays[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            sum+=arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;和：&quot;</span>+sum);</span><br><span class="line">        <span class="comment">//查找最大元素</span></span><br><span class="line">        <span class="keyword">int</span> max = arrays[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[i]&gt;max)&#123;</span><br><span class="line">                max=arrays[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大数：&quot;</span>+max);</span><br></pre></td></tr></table></figure></li><li><p>For-Each循环</p></li><li><p>数组作方法入参</p></li><li><p>数组作返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[]arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//增强for循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> array : arrays) &#123;</span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line">    printArray(arrays);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span>[] arrayR=reverse(arrays);</span><br><span class="line">    printArray(arrayR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[]arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.println(arrays[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[]arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span>[]arrayR = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">    <span class="comment">//一个for循环定义两个变量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j = arrayR.length-<span class="number">1</span>; i &lt;arrays.length ; i++,j--) &#123;</span><br><span class="line">       arrayR[j]=arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrayR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二位数组"><a href="#二位数组" class="headerlink" title="二位数组"></a>二位数组</h3><ul><li><p>多维数组可以看成是数组的数组，比如二位数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</p></li><li><p>二位数组</p><p><code>int a[][] = new int [2][5];</code></p></li><li><p>解析：二位数组a可以看成一个两行三列的数组。</p></li><li><p>思考：多维数组的使用？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组使用</span></span><br><span class="line">       <span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">               System.out.println(array[i][j]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Arrays类讲解"><a href="#Arrays类讲解" class="headerlink" title="Arrays类讲解"></a>Arrays类讲解</h3><ul><li><p>数组的工具类<code>java.util.Arrays</code></p></li><li><p>用于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</p></li><li><p>查看JDK帮助文档。</p></li><li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用”对象来调用(不用!=不能)。</p></li><li><p>具有以下常用功能：</p><ul><li>给数组赋值：通过fill方法。</li><li>对数组排序：通过sort方法，按升序。</li><li>比较数组：通过equals方法比较数组中元素值是否相等。</li><li>查找数组元素：通过<code>binarySearch</code>方法能对排序好的数组进行二分查找法操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> []a=&#123;<span class="number">12312</span>,<span class="number">451241</span>,<span class="number">3</span>,<span class="number">422</span>,<span class="number">3</span>,<span class="number">66</span>,<span class="number">12312</span>,<span class="number">534534</span>,<span class="number">98</span>&#125;;</span><br><span class="line">       <span class="comment">//打印数组元素Arrays.toString()</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        printArray(a);<span class="comment">//调用方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组排序  Arrays.sort() 升序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组填充  Arrays.fill</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        Arrays.fill(a,<span class="number">0</span>);</span><br><span class="line">        Arrays.fill(a,<span class="number">2</span>,<span class="number">5</span>,<span class="number">66</span>);<span class="comment">//2~5之间被66填充</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Arrays.toString()打印数组方法</span></span><br><span class="line">    <span class="comment">//不要重复造轮子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; arr.length;i++) &#123;</span><br><span class="line">             <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                 System.out.print(arr[i]+<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                 System.out.print(<span class="string">&quot;[&quot;</span>+arr[i]+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 System.out.print(arr[i]+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li><p>冒泡排序无疑是最为出名的排序算法之一，总共有八大排序。</p><p><a href="https://imgtu.com/i/frWj2D"><img src="https://z3.ax1x.com/2021/08/13/frWj2D.gif" alt="frWj2D.gif"></a></p></li><li><p>冒泡的代码还是相当简单的，两层训话你，外层冒泡轮数，里层依次比较，几乎人尽皆知。</p></li><li><p>我们看到嵌套循环，应该立马就可以得出这个算法的<strong>时间的复杂度为O(n^2)。</strong></p></li><li><p><strong>思考：如何优化？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] a=&#123;<span class="number">3</span>,<span class="number">42</span>,<span class="number">6</span>,<span class="number">56</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">4</span>,<span class="number">32</span>,<span class="number">9</span>&#125;;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">int</span> []sort=sort(a);</span><br><span class="line">       System.out.println(Arrays.toString(sort));</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line">       <span class="comment">//冒泡排序</span></span><br><span class="line">       <span class="comment">//1.比较数组中两个相领的元素，第二个比第一个大，就交换位置</span></span><br><span class="line">       <span class="comment">//2.每次比较都会产生一个最大或者最小的数字</span></span><br><span class="line">       <span class="comment">//3.下一轮则可以少一次排序，依次循环</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[]array)&#123;</span><br><span class="line">       <span class="comment">//临时变量</span></span><br><span class="line">       <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">       <span class="comment">//外层循环</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="comment">//内层循环，如果第一个比第二个大，则交换位置</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(array[j+<span class="number">1</span>]&lt;array[j])&#123;</span><br><span class="line">                   temp=array[j];</span><br><span class="line">                   array[j]=array[j+<span class="number">1</span>];</span><br><span class="line">                   array[j+<span class="number">1</span>]=temp;</span><br><span class="line">                   flag=<span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//简单优化，减少不必要的循环</span></span><br><span class="line">           <span class="keyword">if</span>(flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> array;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul><li><p>需求：编写五子棋游戏中，有存盘退出和续上盘的功能。</p><p><a href="https://imgtu.com/i/frDbUe"><img src="https://z3.ax1x.com/2021/08/13/frDbUe.png" alt="frDbUe.png"></a></p></li><li><p>分析问题：因为该二位数组的很多值默认为0，因此记录了很多没有意义的数据。</p></li><li><p>解决：稀疏数组。</p></li></ul><p><strong>稀疏数组介绍：</strong></p><ul><li><p>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</p></li><li><p>稀疏数组的处理方式时：</p><ul><li>记录数组一共有几行几列，有多少个不同值。</li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</li></ul></li><li><p>如下图：左边是原始数组，右边是稀疏数组。</p><p><a href="https://imgtu.com/i/fryq5F"><img src="https://z3.ax1x.com/2021/08/13/fryq5F.png" alt="fryq5F.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创一个二位数组11*11  0：没旗子 1：黑棋 2：白棋</span></span><br><span class="line">       <span class="keyword">int</span> [][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">       array1[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">       array1[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2</span>;</span><br><span class="line">       <span class="comment">//输出原始数组</span></span><br><span class="line">       System.out.println(<span class="string">&quot;输出原始数组&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">               System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//转换为稀疏数组</span></span><br><span class="line">       <span class="comment">//1.获取有效值个数</span></span><br><span class="line">       <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                   sum++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;有效值的个数：&quot;</span>+sum);</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//2. 创建一个稀疏数组</span></span><br><span class="line">       <span class="keyword">int</span>[][] array2= <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">  </span><br><span class="line">       array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">       array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">       array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//遍历二维数组，将非零的值存入稀疏数组</span></span><br><span class="line">       <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                   count++;</span><br><span class="line">                   array2[count][<span class="number">0</span>]=i;</span><br><span class="line">                   array2[count][<span class="number">1</span>]=j;</span><br><span class="line">                   array2[count][<span class="number">2</span>]=array1[i][j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;输出稀疏数组&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">           System.out.println(array2[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                   array2[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                   array2[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line">       <span class="comment">//1.读取稀疏数组</span></span><br><span class="line">       <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span> [array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">       <span class="comment">//2. 给其中的元素还原值</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">           array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]]=array2[i][<span class="number">2</span>];</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//输出原始数组</span></span><br><span class="line">       System.out.println(<span class="string">&quot;输出原始数组&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">               System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java方法</title>
      <link href="/2021/08/12/javaSE1_4/"/>
      <url>/2021/08/12/javaSE1_4/</url>
      
        <content type="html"><![CDATA[<h2 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=45">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><ul><li><p><code>System.out.println()</code>,那么它是什么呢？</p></li><li><p>Java方法是语句的集合，它们在一起执行一个功能</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li><p>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，<strong>就是一个方法只完成1个功能，这样利于我们后期的扩展。</strong></p></li><li><p>回顾：方法的命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      int sum=  add(1,2);</span></span><br><span class="line"><span class="comment">//        System.out.println(sum);</span></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//练习2：用while或for循环输出1~1000之间能被5整除的数，并且每行输出3个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i%(<span class="number">5</span>*<span class="number">3</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();<span class="comment">//换行</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h3><p><strong>方法的定义：</strong></p><ul><li><p>Java的方法类似于其他语言的函数，<strong>是一段用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语法：</p></li><li><p>方法包含一个方法头和一个方法体，下面是一个方法的所有部分:</p><ul><li>修饰符：修饰符是可选的，告诉编译如何调用该方阿飞，定义了该方法的访问类型。</li><li>返回值类型：方法可能会有返回值，<code>returnValueType</code>是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。这种情况下，<code>returnValueType</code>是关键字<code>void</code></li><li>方法名：是方法的实际名称，方法名和参数表共同构成方法签名。</li><li>参数类型：参数像是一个占位符。当方法被调用时，传递值给参数，这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。<ul><li>形式参数：在方法被调用时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li>方法体：方法体包含具体的语句，定义该方法的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰服 返回值类型 参数名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = max(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> number1,<span class="keyword">int</span> number2)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(number1&gt;number2)&#123;</span><br><span class="line">            result = number1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number1&lt;number2)&#123;</span><br><span class="line">            result= number2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二者相等&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>方法调用：</strong></p><ul><li><p>调用方法：对象名.方法名(实参列表)。</p></li><li><p>Java支持两种调用方法的方式，根据方法是否返回值来选择。</p></li><li><p>当方法返回一个值的时候，方法调用通常被当作一个值，例如：</p><p><code>int larger = max(30,40);</code></p></li><li><p>如果方法返回值时<code>void</code>,方法调用一定时一条语句。</p><p><code>System.out.println(&quot;Hello World&quot;);</code></p></li><li><p>拓展：值传递(Java)和引用传递</p></li></ul><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p></li><li><p>方法重载的规则：</p><ul><li>方法名称必须相同</li><li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等）</li><li>方法的返回类型可以相同也可以不同</li><li>仅仅返回类型不同不足以称谓方法的重载</li></ul></li><li><p>实现理论：</p><ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int max = max(20,30);</span></span><br><span class="line">    <span class="keyword">double</span> max = max(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">    System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> number1,<span class="keyword">double</span> number2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(number1&gt;number2)&#123;</span><br><span class="line">        result = number1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number1&lt;number2)&#123;</span><br><span class="line">        result= number2;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;二者相等&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> number1,<span class="keyword">int</span> number2)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(number1&gt;number2)&#123;</span><br><span class="line">        result = number1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number1&lt;number2)&#123;</span><br><span class="line">        result= number2;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;二者相等&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="命令行传递参数"><a href="#命令行传递参数" class="headerlink" title="命令行传递参数"></a>命令行传递参数</h3><ul><li><p>有时候你希望运行一个程序的时候再传递给它消息。这要靠传递命令行参数给main()实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLine</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []ages)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;args[&quot;</span>+i+<span class="string">&quot;]:&quot;</span>+args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul><li><p>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</p></li><li><p>再方法声明中，再指定参数类型后加一个省略号(…)。</p></li><li><p>一个方法中只能指定一个可变参数，它必须时方法的最后一个参数。任何普通的参数必须在它之前声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers.length ==<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[i]&gt;result)&#123;</span><br><span class="line">            result = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;The max value is&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="递归讲解"><a href="#递归讲解" class="headerlink" title="递归讲解"></a>递归讲解</h3><ul><li>A方法调用B方法，我们很容易理解。</li><li>递归就是：A方法调用A方法。就是自己调用自己。</li></ul><ul><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少程序的代码量。递归的能力在于用有限的语句来定义对象的无线集合。</li></ul><ul><li><p>递归结构包括两个部分：</p><ul><li>递归头：什么时候部调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候需要调用自身方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5!  阶乘</span></span><br><span class="line">        System.out.println(f(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="拓展作业："><a href="#拓展作业：" class="headerlink" title="拓展作业："></a>拓展作业：</h3><ul><li>写一个计算器，要求实现加减乘除功能，并且能够循环接收新的数据，通过用户交互实现。</li></ul><ul><li><p>思路：</p><ul><li>写4方法：加减乘除</li><li>利用循环+switch进行用户交互</li><li>传递需要操作的两个数</li><li>输出结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入第一个数字&quot;</span>);</span><br><span class="line">       <span class="keyword">int</span> oneN = scanner.nextInt();</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入第二个数字&quot;</span>);</span><br><span class="line">       <span class="keyword">int</span> twoN = scanner.nextInt();</span><br><span class="line">       System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;1.加&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;2.减&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;3.乘&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;4.除&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;输入数字选择计算方式&quot;</span>);</span><br><span class="line">       <span class="keyword">int</span> put = scanner.nextInt();</span><br><span class="line">       <span class="keyword">if</span>(put==<span class="number">1</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;和为：&quot;</span>+(oneN+twoN));</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(put==<span class="number">2</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;差为：&quot;</span>+(oneN-twoN));</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(put==<span class="number">3</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;积为：&quot;</span>+(oneN*twoN));</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(put==<span class="number">4</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;商为：&quot;</span>+(oneN/twoN));</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;输入不合法&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java流控制</title>
      <link href="/2021/08/11/javaSE1_3/"/>
      <url>/2021/08/11/javaSE1_3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java流控制"><a href="#Java流控制" class="headerlink" title="Java流控制"></a>Java流控制</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=33">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h3><p><strong>Scanner对象：</strong></p><ul><li><p>之前学习基本语法中我们并没有实现程序和人的交互，但是Java给我们提供了这样一个工具类，我们可以获取用户的输入，java.util.Scanner是Java5的新特征，可以通过Scanner类来获取用户的输入。</p></li><li><p>基本语法：</p><p><code>Scanner scanner = new Scanner(System.in);</code></p></li><li><p>通过Scanner类的next()与nextLine()方法获取输入的字符串，再读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。</p></li></ul><ul><li><strong>next():</strong><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li><strong>next()不能得到带有空格的字符串</strong>。</li></ul></li></ul><ul><li><p><strong>nextLine():</strong></p><ul><li>1、以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。</li><li>2、可以获得空白内容。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 14:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="comment">//hasNextLine 为判断接收的内容是否有下一行</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="comment">//使用next接收</span></span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出内容：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用完关闭io流</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Scanner进阶使用"><a href="#Scanner进阶使用" class="headerlink" title="Scanner进阶使用"></a>Scanner进阶使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 15:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            i=scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span>+i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextFloat())&#123;</span><br><span class="line">            f=scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span>+f);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是小数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 15:19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我们可以输入多个数字，并求其综合与平均数，每输入一个数字用回车确认，通过输入非数字结束输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数据：&quot;</span>);</span><br><span class="line">        <span class="comment">//和</span></span><br><span class="line">        <span class="keyword">double</span> sum =<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算输入了多少数字</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//通过循环判断你是否还有输入，并再里面对每一次进行求和</span></span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> x = scanner.nextDouble();</span><br><span class="line">            m++;<span class="comment">//m=++m  m=m+1</span></span><br><span class="line">            sum = sum+x;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入第&quot;</span>+m+<span class="string">&quot;个数据，结果sum为&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m+<span class="string">&quot;个数的和为&quot;</span>+sum);</span><br><span class="line">        System.out.println(m+<span class="string">&quot;个数的平均值是&quot;</span>+(sum / m));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><ul><li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li></ul><ul><li>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是有若干依次执行的处理步骤组成的，<strong>它是任何一个算法都离不开的一种基本算法结构。</strong></li></ul><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><ul><li><p>if单选择结构</p><ul><li>我们很多时候都要去判断一个东西是否可行，然后我们才会去执行，这样一个过程在程序中用if语句来表示。</li></ul><ul><li><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 16:19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">        String s = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals:判断你字符传是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;Hello&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;不等&quot;</span>);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if双选择结构</p><ul><li><p>某公司要收购一款软件，成功了，给人支付100w，失败了，自己研发。这样的需求用一个if就搞不定了，我们需要有两个判断，需要一个双选择结构if-else</p></li><li><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>练习：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 16:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//考试分数大于60就及格，小于60就不及格</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(score&gt;<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>if多选择结构</p><ul><li><p>我们发现刚才代码不符合实际，真是情况可能存在ABCD，存在区间多级判断，比如90-100就是A，80-90就是B等等，生活中我们需要一个多选择结构来处理这类问题。</p></li><li><p><strong>语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式1值为true,执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式2值为true,执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;</span><br><span class="line">     <span class="comment">//如果布尔表达式3值为true,执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式都不为true,执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>练习：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 16:47</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//考试分数大于60就及格，小于60就不及格</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜满分&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">100</span> &amp;&amp; score &gt;=<span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">90</span> &amp;&amp; score &gt;=<span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">80</span> &amp;&amp; score &gt;=<span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">70</span> &amp;&amp; score &gt;=<span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;D级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">60</span> &amp;&amp; score &gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;成绩不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>嵌套的if结构</p><ul><li><p>使用嵌套的if…else…语句是合法的，也就是说你可以在另一个if或者else if语句中使用if或者else if语句，可以像if语句一样嵌套else if..else</p></li><li><p><strong>语法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果不二表达式 1的值为true执行代码</span></span><br><span class="line">    <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思考？我们需要寻找一个数，在1~100之间</p></li></ul></li></ul><h3 id="Switch选择结构"><a href="#Switch选择结构" class="headerlink" title="Switch选择结构"></a>Switch选择结构</h3><ul><li><p>多选择结构还有一个实现方式就是switch case语句。</p></li><li><p>switch case语句判断哪一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你个一有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">//可选</span></span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch语句中的变量类型可以是：</p><ul><li>byte、short、int或者char</li><li>从JavaSE 7开始</li><li>switch支持字符串String类型了</li><li>同时case标签必须为字符串常量或字面量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 17:12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//switch练习</span></span><br><span class="line">       <span class="comment">// char grade = &#x27;A&#x27;;</span></span><br><span class="line">        String grade =<span class="string">&quot;A&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩等级：&quot;</span>);</span><br><span class="line">        grade=scanner.next();</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反编译  java----class(字节码文件) ----反编译(IDEA)方法：直接把class文件放到IDEA项目</span></span><br><span class="line">        <span class="keyword">switch</span>(grade)&#123;<span class="comment">//这里String类型通过.hashCode找到相应的数字编码</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;一般&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;D&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;再接再厉&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;E&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知等级&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="While循环详解"><a href="#While循环详解" class="headerlink" title="While循环详解"></a>While循环详解</h3><ul><li><p>while循环</p><ul><li><p>while是最基本的循环，它的结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只要布尔表达式为true，循环就会一直执行下去。</p></li><li><p>我们大多数情况会让循环停下来的，需要一个让表达式失效的方式来结束循环。</p></li><li><p>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</p></li><li><p>循环条件一直为ture就会造成无限循环(死循环)，我们正常的业务编程中应该尽量避免死循环，会影响程序性能或者造成程序卡死奔溃。</p></li><li><p>思考：计算1+2+3+…+100=?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            sum=sum+i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br></pre></td></tr></table></figure></li><li><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出1~100</span></span><br><span class="line">       <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">           i++;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="DoWhile循环"><a href="#DoWhile循环" class="headerlink" title="DoWhile循环"></a>DoWhile循环</h3><ul><li><p>对于while语句而言，如果不满足条件，则不能进入循环，但有时候我们需要即使不满足条件，叶子很少执行一次。</p></li><li><p>do…while循环和while循环相似，不同的是，do…while循环至少会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式)</span><br></pre></td></tr></table></figure></li><li><p>while和do-while的区别：</p><ul><li>while先判断后执行，dowhile是先执行判断。</li><li>do…while总是保证循环体会被至少执行一次，这是他们的主要差别。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> a =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        a++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(a&lt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="For循环详解"><a href="#For循环详解" class="headerlink" title="For循环详解"></a>For循环详解</h3><ul><li><p>虽然所有循环结构都可以用while或者do…while表示，但Java提供了另一种语句for循环，使一些循环结构变得更加简单。</p></li><li><p>for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。</p></li><li><p>for循环执行的次数是在执行前就确定的，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">//初始化条件</span></span><br><span class="line">  </span><br><span class="line">       <span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">           System.out.println(a);</span><br><span class="line">           a+=<span class="number">2</span>;<span class="comment">//迭代</span></span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;while循环结束&quot;</span>);</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//100.for</span></span><br><span class="line">       System.out.println(<span class="string">&quot;for循环结束&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>练习1：计算0~100之间的奇数和偶数的和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习1 计算0~100之间的奇数和偶数的和</span></span><br><span class="line">      <span class="keyword">int</span> oddSum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> evenSum =<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">              oddSum+=i;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              evenSum+=i;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;奇数的和&quot;</span>+oddSum);</span><br><span class="line">      System.out.println(<span class="string">&quot;偶数的和&quot;</span>+evenSum);</span><br></pre></td></tr></table></figure></li><li><p>练习2：用while或for循环输出1~1000之间能被5整除的数，并且每行输出3个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习2：用while或for循环输出1~1000之间能被5整除的数，并且每行输出3个</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">               System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(i%(<span class="number">5</span>*<span class="number">3</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">               System.out.println();<span class="comment">//换行</span></span><br><span class="line">           &#125;</span><br><span class="line">  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>练习3：打印九九乘法表</p></li></ul><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印九九乘法表</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) &#123;</span><br><span class="line">               System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(j*i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><ul><li><p>Java5引入了一种主要用于数组或集合的增强型for循环。</p></li><li><p>Java增强for循环语法格式如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句：表达式)&#123;</span><br><span class="line">    <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明语句：声明新的局部变量，该变形量的类型必须和数组元素的类型匹配，其作用域限定在循环语句块，其值与此时数组元素的值相等。</p></li><li><p>表达式：表达式是要访问的数组名，或者是返回值的数组的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//遍历数组的元素</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x:numbers)&#123;</span><br><span class="line">          System.out.println(x);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="break、continue、goto"><a href="#break、continue、goto" class="headerlink" title="break、continue、goto"></a>break、continue、goto</h3><ul><li>break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语句也在switch语句中使用)</li><li>continue用在循环语句中，主要用来终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</li></ul><ul><li><p><strong>关于goto关键字</strong></p><ul><li>goto关键字很早就在程序设计语言中出现，尽管goto仍是Java的一个保留字，但并未在语言中得到正式使用；Java没有goto。然而，在break和continue这两个关键字身上，我们仍然能看出一些goto的影子，带标签的break和continue。</li><li>“标签”是指后面跟一个冒号的标识符，例如：<code>label:</code></li><li>对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，若将它们同标签使用，它们就会中断到存在标签的地方。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 20:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//break</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">30</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出循环，程序未终止</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//continue</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//跳到循环开始</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印101~150之间的所有 质数(大于1的自然数中，除了1和它本身外不在有其他因素的自然数)</span></span><br><span class="line">        <span class="comment">// 标签写法</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        outer:<span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">101</span>; i1 &lt; <span class="number">150</span>; i1++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">2</span>; i2 &lt; i1/<span class="number">2</span>; i2++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i1 % i2 ==<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">continue</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i1+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="打印三角形及Debug"><a href="#打印三角形及Debug" class="headerlink" title="打印三角形及Debug"></a>打印三角形及Debug</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/11 - 20:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印三角形  5行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">5</span>; j &gt;= i; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印三角形 5行  第二种方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">5</span>-i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;=<span class="number">2</span>*i-<span class="number">1</span>; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java基础</title>
      <link href="/2021/08/10/javaSE1_2/"/>
      <url>/2021/08/10/javaSE1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=21">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>Java中的注释有三种</p><ul><li><p>单行注释 </p></li><li><p>多行注释</p></li><li><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//单行注释</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    文档注释</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *               ii.                                         ;9ABH,          </span></span><br><span class="line"><span class="comment"> *              SA391,                                    .r9GG35&amp;G          </span></span><br><span class="line"><span class="comment"> *              &amp;#ii13Gh;                               i3X31i;:,rB1         </span></span><br><span class="line"><span class="comment"> *              iMs,:,i5895,                         .5G91:,:;:s1:8A         </span></span><br><span class="line"><span class="comment"> *               33::::,,;5G5,                     ,58Si,,:::,sHX;iH1        </span></span><br><span class="line"><span class="comment"> *                Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG        </span></span><br><span class="line"><span class="comment"> *                .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8        </span></span><br><span class="line"><span class="comment"> *               :SB9s:,............................,,,.,,,SASh53h,1G.       </span></span><br><span class="line"><span class="comment"> *            .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX,       </span></span><br><span class="line"><span class="comment"> *          ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi       </span></span><br><span class="line"><span class="comment"> *        i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1       </span></span><br><span class="line"><span class="comment"> *       59;.....,.     .,,,,,,,,,,,...        .............,..:1;.:&amp;s       </span></span><br><span class="line"><span class="comment"> *      s8,..;53S5S3s.   .,,,,,,,.,..      i15S5h1:.........,,,..,,:99       </span></span><br><span class="line"><span class="comment"> *      93.:39s:rSGB@A;  ..,,,,.....    .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83      </span></span><br><span class="line"><span class="comment"> *      G5.G8  9#@@@@<span class="doctag">@X</span>. .,,,,,,.....  iA9,.S&amp;B###@<span class="doctag">@Mr</span>...,,,,,,,,..,.;Xh     </span></span><br><span class="line"><span class="comment"> *      Gs.X8 S@@@@@@<span class="doctag">@B</span>:..,,,,,,,,,,. rA1 ,A@@@@@@@@<span class="doctag">@H</span>:........,,,,,,.iX:    </span></span><br><span class="line"><span class="comment"> *     ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@<span class="doctag">@M</span>;    ....,,,,,,,,S8    </span></span><br><span class="line"><span class="comment"> *     X3    iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@<span class="doctag">@Hs</span>       ...,,,,,,,:Gs   </span></span><br><span class="line"><span class="comment"> *    r8,        ,,,...,,,,,,,,,,.....  ,h8XABMMHX3r.          .,,,,,,,.rX:  </span></span><br><span class="line"><span class="comment"> *   :9, .    .:,..,:;;;::,.,,,,,..          .,,.               ..,,,,,,.59  </span></span><br><span class="line"><span class="comment"> *  .Si      ,:.i8HBMMMMMB&amp;5,....                    .            .,,,,,.sMr</span></span><br><span class="line"><span class="comment"> *  SS       :: h@@@@@@@@@@#; .                     ...  .         ..,,,,iM5</span></span><br><span class="line"><span class="comment"> *  91  .    ;:.,1&amp;@@@@@<span class="doctag">@MXs</span>.                            .          .,,:,:&amp;S</span></span><br><span class="line"><span class="comment"> *  hS ....  .:;,,,i3MMS1;..,..... .  .     ...                     ..,:,.99</span></span><br><span class="line"><span class="comment"> *  ,8; ..... .,:,..,8Ms:;,,,...                                     .,::.83</span></span><br><span class="line"><span class="comment"> *   s&amp;: ....  .sS553B@<span class="doctag">@HX</span>3s;,.    .,;13h.                            .:::&amp;1</span></span><br><span class="line"><span class="comment"> *    SXr  .  ...;s3G99XA&amp;X88Shss11155hi.                             ,;:h&amp;,</span></span><br><span class="line"><span class="comment"> *     iH8:  . ..   ,;iiii;,::,,,,,.                                 .;irHA  </span></span><br><span class="line"><span class="comment"> *      ,8X5;   .     .......                                       ,;iihS8Gi</span></span><br><span class="line"><span class="comment"> *         1831,                                                 .,;irrrrrs&amp;@</span></span><br><span class="line"><span class="comment"> *           ;5A8r.                                            .:;iiiiirrss1H</span></span><br><span class="line"><span class="comment"> *             :X@H3s.......                                .,:;iii;iiiiirsrh</span></span><br><span class="line"><span class="comment"> *              r#h:;,...,,.. .,,:;;;;;:::,...              .:;;;;;;iiiirrss1</span></span><br><span class="line"><span class="comment"> *             ,M8 ..,....,.....,,::::::,,...         .     .,;;;iiiiiirss11h</span></span><br><span class="line"><span class="comment"> *             8B;.,,,,,,,.,.....          .           ..   .:;;;;iirrsss111h</span></span><br><span class="line"><span class="comment"> *            i@5,:::,,,,,,,,.... .                   . .:::;;;;;irrrss111111</span></span><br><span class="line"><span class="comment"> *            9Bi,:,,,,......                        ..r91;;;;;iirrsss1ss1111</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><p><strong>常见关键字：</strong></p><table><thead><tr><th align="center">abstract</th><th align="center">assert</th><th align="center">boolean</th><th align="center">break</th><th align="center">byte</th></tr></thead><tbody><tr><td align="center">case</td><td align="center">catch</td><td align="center">char</td><td align="center">class</td><td align="center">const</td></tr><tr><td align="center">continue</td><td align="center">default</td><td align="center">do</td><td align="center">double</td><td align="center">else</td></tr><tr><td align="center">enum</td><td align="center">extends</td><td align="center">final</td><td align="center">finally</td><td align="center">float</td></tr><tr><td align="center">for</td><td align="center">goto</td><td align="center">if</td><td align="center">implements</td><td align="center">import</td></tr><tr><td align="center">instanceof</td><td align="center">int</td><td align="center">interfact</td><td align="center">long</td><td align="center">native</td></tr><tr><td align="center">new</td><td align="center">package</td><td align="center">private</td><td align="center">protected</td><td align="center">public</td></tr><tr><td align="center">return</td><td align="center">strictfp</td><td align="center">short</td><td align="center">static</td><td align="center">super</td></tr><tr><td align="center">switch</td><td align="center">synchronized</td><td align="center">this</td><td align="center">throw</td><td align="center">throws</td></tr><tr><td align="center">transient</td><td align="center">try</td><td align="center">void</td><td align="center">volatile</td><td align="center">while</td></tr></tbody></table><p><strong>标识符注意点</strong></p><ul><li>所有标识服都应该是以字母，$，_ 开始。</li><li>首字母之后可以是字母，$，_，或数字的任何字符组合。</li><li><strong>不能使用关键字作为变量名和方法名。</strong></li><li><strong>严格区分大小写</strong>。</li></ul><h3 id="数据类型讲解"><a href="#数据类型讲解" class="headerlink" title="数据类型讲解"></a>数据类型讲解</h3><ul><li>强类型语言<ul><li>要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用。</li></ul></li><li>弱类型语言</li></ul><ul><li><p>Java的数据类型分为两大类</p><ul><li><p>基本类型(primitive type)</p><p><a href="https://imgtu.com/i/fYSCkt"><img src="https://z3.ax1x.com/2021/08/10/fYSCkt.png" alt="fYSCkt.png"></a></p></li><li><p>引用类型(reference type)：类，接口，数组</p></li></ul></li></ul><p><strong>什么是字节</strong></p><ul><li><p>位(bit)：是计算机内部数据储存的最小单位，11001100是一个八位二进制数。</p></li><li><p>字节(byte)：是计算机中数据处理的基本单位，习惯上用大写B来表示。</p></li><li><p>1B(byte,字节) = 8bit(位)。</p></li><li><p>字符：是指计算机中使用的字母、数字、字和符号。</p></li></ul><ul><li>1bit表示1位,</li><li>1Byte表示1字节1B=8b，</li><li>1024B=1KB</li><li>1024M=1G</li></ul><h3 id="数据类型扩展及面试题讲解"><a href="#数据类型扩展及面试题讲解" class="headerlink" title="数据类型扩展及面试题讲解"></a>数据类型扩展及面试题讲解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//整数拓展：    进制   二进制0b  十进制  八进制0  十六进制0x</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">010</span>; <span class="comment">//八进制0</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">0x10</span>; <span class="comment">//十六进制0x  0~9 A~F 16</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="comment">//====================================</span></span><br><span class="line">        <span class="comment">//浮点数拓展？  银行业务怎么表示？$/￥</span></span><br><span class="line">        <span class="comment">// BigDecimal   数学工具类</span></span><br><span class="line">        <span class="comment">//====================================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//float    有限   离散  舍入误差   大约  接近但不等于</span></span><br><span class="line">        <span class="comment">//double</span></span><br><span class="line">        <span class="comment">//最好完全用浮点数比较</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.1f</span>;  <span class="comment">//0.1</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.0</span>/<span class="number">10</span>;  <span class="comment">//0.1</span></span><br><span class="line">        System.out.println(f==d); <span class="comment">//false</span></span><br><span class="line">        System.out.println(f);</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> d1 = <span class="number">2321312312321f</span>;</span><br><span class="line">        <span class="keyword">float</span> d2 = d1+<span class="number">1</span>;</span><br><span class="line">        System.out.println(d1==d2); <span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//====================================</span></span><br><span class="line">        <span class="comment">//字符拓展？</span></span><br><span class="line">        <span class="comment">//====================================</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;人&#x27;</span>;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)c1); <span class="comment">//强制转换</span></span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)c2); <span class="comment">//强制转换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有的字符本质还是数字</span></span><br><span class="line">        <span class="comment">// 编码  Unicode 表：(97=a 65=A) 2字节   0 - 65536 Excel  2^16 = 65536</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// U0000 UFFFF</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;\u0062&#x27;</span>;</span><br><span class="line">        System.out.println(c3); <span class="comment">//b</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转义字符</span></span><br><span class="line">        <span class="comment">// \t  制表符</span></span><br><span class="line">        <span class="comment">// \n  换行</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello\nWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        String sa = <span class="keyword">new</span> String(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        String sb = <span class="keyword">new</span> String(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        System.out.println(sa==sb);</span><br><span class="line"></span><br><span class="line">        String sc = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        String sd = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        System.out.println(sc==sd);</span><br><span class="line">        <span class="comment">//对象 从内存分析</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔值扩展</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="keyword">true</span>)&#123;&#125; <span class="comment">//新手</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;&#125; <span class="comment">//老手</span></span><br><span class="line">        <span class="comment">//less is More  代码简介易读</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换。</li></ul><p><code>低 ---------------------------------------------高</code></p><p><code>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</code></p><ul><li>运算中，不同类型的数组先转换为同一类型，然后进行运算。</li><li>强制类型转换</li><li>自动类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i; <span class="comment">//造成内存溢出</span></span><br><span class="line">        <span class="keyword">double</span> c = i;</span><br><span class="line">        <span class="comment">//强制转换 (类型)变量名  高-&gt;低</span></span><br><span class="line">        <span class="comment">//自动转换  低-&gt;高</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         注意点：</span></span><br><span class="line"><span class="comment">          1. 不能对布尔值进行转换</span></span><br><span class="line"><span class="comment">          2. 不能把对象类型转换为不相干的类型</span></span><br><span class="line"><span class="comment">          3. 再把高容量转换到低容量的时候，需要强制转换</span></span><br><span class="line"><span class="comment">          4. 转换的时候可能存在内存溢出或精度问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)<span class="number">23.6</span>);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>)-<span class="number">45.99f</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> d = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> e =d+<span class="number">1</span>;</span><br><span class="line">        System.out.println(e);<span class="comment">//98</span></span><br><span class="line">        System.out.println((<span class="keyword">char</span>)e); <span class="comment">//b</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作比较大的数字，注意溢出问题</span></span><br><span class="line">        <span class="comment">//jdk7特性  数字之间可以用下划线分割</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line">       <span class="comment">// System.out.println(money);</span></span><br><span class="line">        <span class="keyword">int</span> years = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> total = money*years; <span class="comment">//-1474836480 溢出</span></span><br><span class="line">        System.out.println(total);</span><br><span class="line">        <span class="keyword">long</span> total2 = money*years;<span class="comment">//默认是int 在转换前就已经溢出了</span></span><br><span class="line">        System.out.println(total2);</span><br><span class="line">        <span class="keyword">long</span> total3 = money*(<span class="keyword">long</span>)years;<span class="comment">//单独对可能溢出的内容进行转换</span></span><br><span class="line">        System.out.println(total3);</span><br><span class="line">       <span class="comment">// L多用大写 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量、常量、作用域"><a href="#变量、常量、作用域" class="headerlink" title="变量、常量、作用域"></a>变量、常量、作用域</h3><p><strong>变量：</strong></p><ul><li><p>变量是什么：就是可以变化的量。</p></li><li><p>Java是一种强类型语言，每个变量都必须声明其类型。</p></li><li><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和<strong>作用域</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type varName [=value] [&#123;,varName[=value]&#125;];</span><br><span class="line"><span class="comment">//数据类型  变量名 = 值; 可以使用逗号隔开来声明多个同类型变量</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li><li>变量名必须是合法的标识符。</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.operator;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 16:53</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性：变量</span></span><br><span class="line">    <span class="comment">//实例变量：从属于对象 不初始化为默认值</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int a b c</span></span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>;<span class="comment">//不推荐这种写法</span></span><br><span class="line">        String name = <span class="string">&quot;game&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> x = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">        <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">        <span class="comment">//局部变量 必须声明和初始胡</span></span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new 对象</span></span><br><span class="line">        Demo04 demo4 = <span class="keyword">new</span> Demo04();</span><br><span class="line">        System.out.println(demo4.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>常量：</strong></p><ul><li><p>常量(Constant): 初始化(initialize)后不能再改变值！不会变动的值。</p></li><li><p>所谓常量可以理解成一种特殊的变量，他的值被设定后，再程序运行过程中不允许被改变。</p><p><code>final 常量名 = 值</code></p><p><code>final double PI=3.14;</code></p></li><li><p>常量名一般使用大写字符。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 17:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="comment">//修饰符 不存在先后顺序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量的命名规范</strong></p><ul><li>所有变量、方法、类名：<strong>见名知意</strong>。</li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量：首字母小写和驼峰原则。</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Man,GoodMan</li><li>方法名：首字母小写和驼峰原则：run(), runRun()</li></ul><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><ul><li><p>Java<strong>语言支持如下运算符</strong></p><ul><li>算数运算符：<code>+,-,*,/,%,++,--</code></li><li>赋值运算符：<code>=</code></li><li>关系运算符：<code>&gt;,&lt;,&gt;=,&lt;=,==,!= instanceof</code></li><li>逻辑运算符：<code>&amp;&amp;,||,!</code></li><li>位运算符：<code>&amp;,|,^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;</code>(仅了解)</li><li>条件运算符：<code>?,:</code></li><li>扩展赋值运算符：<code>+=,-=,*=,/=</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 20:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//二元运算符</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">        System.out.println(a - b);</span><br><span class="line">        System.out.println(a * b);</span><br><span class="line">        System.out.println(a / (<span class="keyword">double</span>) b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展</span></span><br><span class="line">        <span class="keyword">long</span> c = <span class="number">23123123213L</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">short</span> e = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">byte</span> f = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(c + d + e + f);<span class="comment">//Long</span></span><br><span class="line">        System.out.println(d + e + f);<span class="comment">//int</span></span><br><span class="line">        System.out.println(e + f);<span class="comment">//int</span></span><br><span class="line">        <span class="comment">//============================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关系运算符返回结果：正确，错误，布尔值</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">21</span>;</span><br><span class="line">        System.out.println(a1&gt;b1);</span><br><span class="line">        System.out.println(a1&lt;b1);</span><br><span class="line">        System.out.println(a1==b1);</span><br><span class="line">        System.out.println(a1!=b1);</span><br><span class="line">        System.out.println(c1%a1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="自增自减运算符、初始Math类"><a href="#自增自减运算符、初始Math类" class="headerlink" title="自增自减运算符、初始Math类"></a>自增自减运算符、初始Math类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 20:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ++ --  自增 自减 一元运算符</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b = a++; <span class="comment">//执行完代码后，先赋值给b，再自增</span></span><br><span class="line">        <span class="keyword">int</span> c = ++a;<span class="comment">//执行完代码后，先自增，在赋值给c</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展 幂运算 2^3  2*2*2=8 (基本数学运算，Java中用Math)</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//pow返回一个double类型</span></span><br><span class="line">        <span class="comment">//很多运算使用一些工具类来实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符、位运算符"><a href="#逻辑运算符、位运算符" class="headerlink" title="逻辑运算符、位运算符"></a>逻辑运算符、位运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 20:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//逻辑运算符</span></span><br><span class="line">        <span class="comment">//  与&amp;  或|  非!</span></span><br><span class="line">        <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a &amp;&amp; b:&quot;</span>+(a&amp;&amp;b));</span><br><span class="line">        System.out.println(<span class="string">&quot;a || b:&quot;</span>+(a||b));</span><br><span class="line">        System.out.println(<span class="string">&quot;!(a&amp;&amp;b):&quot;</span>+!(a&amp;&amp;b));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路运算</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">boolean</span> d = (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//位运算符</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          A = 0011 1100;</span></span><br><span class="line"><span class="comment">          B = 0000 1101;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          A&amp;B = 0000 1100;</span></span><br><span class="line"><span class="comment">          A/B = 0011 1101;</span></span><br><span class="line"><span class="comment">          A^B = 0011 0001</span></span><br><span class="line"><span class="comment">          ~B  = 1111 0010</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          2*8 = 16   2*2*2*2</span></span><br><span class="line"><span class="comment">          &lt;&lt;左移  *2</span></span><br><span class="line"><span class="comment">          &gt;&gt;右移  /2</span></span><br><span class="line"><span class="comment">          0000 0000   0</span></span><br><span class="line"><span class="comment">          0000 0001   1</span></span><br><span class="line"><span class="comment">          0000 0010   2</span></span><br><span class="line"><span class="comment">          0000 0011   3</span></span><br><span class="line"><span class="comment">          0000 0100   4</span></span><br><span class="line"><span class="comment">          0000 1000   8</span></span><br><span class="line"><span class="comment">          0001 0000   16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符及小结"><a href="#三元运算符及小结" class="headerlink" title="三元运算符及小结"></a>三元运算符及小结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 20:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        a+=b;  <span class="comment">//a=a+b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        a-=b;  <span class="comment">//a=a-b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串连接符  +  ,  String</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>+a+b);<span class="comment">//先拼接</span></span><br><span class="line">        System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//先运算</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//三元运算符</span></span><br><span class="line">        <span class="comment">//  x ? y :z</span></span><br><span class="line">        <span class="comment">//如果x== true, 则结果为y,否则结果为z</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">80</span>;</span><br><span class="line">        String type = score&lt;<span class="number">60</span>?<span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>;</span><br><span class="line">        System.out.println(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><ul><li><p>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</p></li><li><p>包语法的语法格是为：</p><p><code>package pkg1[. pkg2[.pkg3...]]</code></p></li><li><p><strong>一般利用公司域名倒置作为包名</strong>。</p></li><li><p>为了能够使用某一个包的成员，我们需要再Java程序中明确导入该包。使用”import”来导入。</p><p><code>import package1[.package2...].(classname|*)</code></p></li></ul><h3 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h3><ul><li>JavaDoc命令使用来生成自己API文档的。</li></ul><ul><li><p>参数信息</p><ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的JDK版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul><p><strong>dos命令生成doc文档：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">javadoc</span> <span class="string">-encoding</span> <span class="string">UTF-8</span> <span class="string">-charset</span> <span class="string">UTF-8</span> <span class="string">类名.java</span></span><br></pre></td></tr></table></figure><p><strong>IDEA如何生成JavaDoc文档</strong></p><ul><li><p>准备需要生成JavaDoc文档的类</p></li><li><p>tools-&gt;GenerateJavaDoc，配置local为``zh_CN<code>，OCLA为：</code>-encoding UTF-8 -charset UTF-8`</p></li><li><p>点击OK便可以生成JavaDoc文档</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jokerdig.base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joker大雄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2021/8/10 - 21:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】Java入门</title>
      <link href="/2021/08/09/javaSE1_1/"/>
      <url>/2021/08/09/javaSE1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h2><blockquote><p>前言：</p><p>推荐免费Java基础入门视频：<a href="https://www.bilibili.com/video/BV12J41137hu?p=13">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩_bilibili</a></p></blockquote><h3 id="Java帝国的诞生"><a href="#Java帝国的诞生" class="headerlink" title="Java帝国的诞生"></a>Java帝国的诞生</h3><blockquote><p>前言：</p><p>1972年C诞生</p><p>  贴近硬件，运行快，效率高</p><p>  操作系统，编译器，数据库，网络系统等</p><p>  指针和内存管理</p><p>1982年C++诞生</p><p>  面向对象，兼容C，主要用于图形和游戏领域</p></blockquote><p>基于Java开发的开源内容：</p><ul><li>构建工具：Ant,<strong>Maven</strong>,Jekis</li><li>应用服务器：<strong>Tomcat</strong>,Jetty,Jboss,Websphere,weblogic</li><li>Web开发：Struts,<strong>Spring</strong>,Hibernate,<strong>myBatis</strong></li><li>开发工具：Eclipse,Netbean,<strong>Intellij idea</strong>,Jbuilder</li><li>……</li><li>2006: Hadoop(大数据领域)</li><li>2008：Android(手机端)</li><li>一个伟大的帝国诞生了</li></ul><h3 id="Java的特性和优势"><a href="#Java的特性和优势" class="headerlink" title="Java的特性和优势"></a>Java的特性和优势</h3><ul><li>简单性</li><li>面向对象</li><li>可移植型</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>见状性</li></ul><h3 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h3><ul><li><p>Write Once、Run Anywhere</p></li><li><p>JavaSE：标准版（桌面程序，控制台开发…）</p></li><li><p><del>JavaME</del>：嵌入式开发（手机，小家电…）<em>基本用不到了</em></p></li><li><p>JavaEE：企业级开发（web段，服务器开发…）</p></li></ul><h3 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h3><ul><li><p>JDK：Java Development Kit</p></li><li><p>JRE：Java Runtime Environment</p></li><li><p>JVM：Java Virtual Machine</p><p><a href="https://imgtu.com/i/fGEgu8"><img src="https://z3.ax1x.com/2021/08/09/fGEgu8.png" alt="fGEgu8.png"></a></p></li></ul><h3 id="Java安装开发环境"><a href="#Java安装开发环境" class="headerlink" title="Java安装开发环境"></a>Java安装开发环境</h3><ul><li><p>JDK下载与安装</p><blockquote><p>JDK8：<a href="https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html">下载地址</a><strong>（推荐）</strong></p><p>JDK11：<a href="https://www.oracle.com/cn/java/technologies/javase-jdk11-downloads.html">下载地址</a></p><p>JDK16：<a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html">下载地址</a></p></blockquote></li><li><p>配置环境变量</p><ul><li>创建JAVA_HOME中为JDK安装路径</li><li>在path中添加<code>%JAVA_HOME%\bin;</code>和<code>%JAVA_HOME%\jre\bin;</code></li></ul></li><li><p>JDK目录介绍</p></li><li><p>HelloWorld 及 简单语法规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Notepad++安装和使用</p><blockquote><p><a href="https://notepad.software/download/">下载 – Notepad++</a></p></blockquote></li></ul><h3 id="Hello-World详解"><a href="#Hello-World详解" class="headerlink" title="Hello World详解"></a>Hello World详解</h3><ul><li>javac 编译java文件</li><li>java 运行class文件</li></ul><h3 id="编译型和解释型"><a href="#编译型和解释型" class="headerlink" title="编译型和解释型"></a>编译型和解释型</h3><ul><li>编译型</li><li>解释型</li></ul><ul><li><p>程序运行机制</p><p><img src="https://z3.ax1x.com/2021/08/09/fG1Zmn.png" alt="运行机制"></p></li></ul><h3 id="使用IDEA开发"><a href="#使用IDEA开发" class="headerlink" title="使用IDEA开发"></a>使用IDEA开发</h3><p><a href="https://www.jetbrains.com/zh-cn/idea/">IntelliJ IDEA官网</a>（正版需付费购买）<strong>推荐</strong></p><p><a href="https://www.eclipse.org/downloads/packages/release/2021-06/r/eclipse-ide-enterprise-java-and-web-developers">Eclipse IDE </a>（免费开发工具）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【表情包】第一款自制表情包</title>
      <link href="/2021/08/09/wechatgif1/"/>
      <url>/2021/08/09/wechatgif1/</url>
      
        <content type="html"><![CDATA[<h2 id="第一款自制表情包"><a href="#第一款自制表情包" class="headerlink" title="第一款自制表情包"></a>第一款自制表情包</h2><p>微信：<a href="https://sticker.weixin.qq.com/cgi-bin/mmemoticon-bin/emoticonview?oper=single&t=shop/detail&productid=aL2PCfwK/89qO7sF6/+I+UDhfwEjhec2ZNvdnLLJRd/PJaOeyx9/XgIYWtFGqudPoKs80CBjLeEn0X3VkF4oZoTql1NlHztcT14P6yN2brYs=">【像素小方】微信表情 - 来自微信表情商店，扫二维码下载表情 (qq.com)</a></p><p>QQ：<a href="#">敬请期待</a></p><p>表情包部分截图：<a href="https://imgtu.com/i/f8OU0K"><img src="https://z3.ax1x.com/2021/08/09/f8OU0K.png" alt="f8OU0K.png"></a></p><p>感兴趣小伙伴欢迎下载使用哦( •̀ ω •́ )✧</p><p><em>像素风</em></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信表情包 </tag>
            
            <tag> pixelart </tag>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dos】Windows常见的dos命令</title>
      <link href="/2021/08/09/dos/"/>
      <url>/2021/08/09/dos/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows常见的dos命令"><a href="#Windows常见的dos命令" class="headerlink" title="Windows常见的dos命令"></a>Windows常见的dos命令</h2><p><strong>Dos：Disk Operating System 磁盘操作系统</strong></p><ol><li>切换盘符 <code>cd</code>（Tab键可以自动补全）</li><li>查看当前目录下的所有文件 <code>dir</code></li><li>清理屏幕 <code>cls</code></li><li>返回上一级目录 <code>cd ../</code> </li><li>查看电脑IP <code>ipconfig</code></li><li>诊断网络连接 <code>ping jokerdig.com</code></li><li>打开计算器 <code>calc</code></li><li>打开画板 <code>mspaint</code></li><li>打开记事本 <code>notepad</code></li><li>新建目录 <code>md +目录名</code></li><li>新建文件 <code>cd &gt; 文件名</code> </li><li>删除文件 <code>del + 文件名</code> </li><li>移除目录 <code>rd +目录名</code> </li><li>查看本机系统信息 <code>systeminfo</code></li><li>设置定时关机 <code>shutdown -s -t +秒数</code></li><li>取消定时关机 <code>shutdown -a</code></li><li>查看当前系统进程及端口号 <code>netstat -ano</code></li><li>退出Dos窗口 <code>exit</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dos命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mybatis】Mybatis逆向工程</title>
      <link href="/2021/06/25/mybatisReverse/"/>
      <url>/2021/06/25/mybatisReverse/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis逆向工程-使用MySQL"><a href="#Mybatis逆向工程-使用MySQL" class="headerlink" title="Mybatis逆向工程(使用MySQL)"></a>Mybatis逆向工程(使用MySQL)</h2><h3 id="什么是逆向工程"><a href="#什么是逆向工程" class="headerlink" title="什么是逆向工程"></a>什么是逆向工程</h3><p>   逆向工程需要程序员自己编写sql语句，mybatis官方提供逆向工程，可以针对单表自动生成mybatis执行所需要的代码（mapper，xml，pojo等）</p><p>   企业实际开发中，常用的逆向工程方式：由数据库的表生成java代码。</p><blockquote><p>   配置文件下载：</p><p>   蓝奏云：<a href="https://wwa.lanzoui.com/ighM0qoeybe">下载地址</a> 密码:joker</p><p>   百度云：<a href="https://pan.baidu.com/s/1SAUPJAxOX6IzrMV7JqrFWQ">下载地址</a> 提取码：bf2f</p></blockquote><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>   a)    新建Java Project,导入包(在下方配置文件中)。</p><p>   b)    引入log4j.properties,逆向工程需要的配置文件及生成代码程序。(如下图)</p><p>​    <a href="https://imgtu.com/i/RlwvZt"><img src="https://z3.ax1x.com/2021/06/25/RlwvZt.png" alt="RlwvZt.png"></a></p><p>   c)    修改db.properties数据库用户名和密码</p><p><a href="https://imgtu.com/i/Rl0hlQ"><img src="https://z3.ax1x.com/2021/06/25/Rl0hlQ.md.png" alt="Rl0hlQ.md.png"></a></p><p>  d）   在src下创建lib文件夹，导入配置文件中给的所有包（记得将包导入开发工具）。</p><p><a href="https://imgtu.com/i/RlrALd"><img src="https://z3.ax1x.com/2021/06/25/RlrALd.md.png" alt="RlrALd.md.png"></a></p><h3 id="生成代码配置文件"><a href="#生成代码配置文件" class="headerlink" title="生成代码配置文件"></a>生成代码配置文件</h3><p>创建<strong>generatorConfig.xml</strong>：拷贝该文件到<strong>src</strong>目录下（配置如下）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;testTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/数据库名&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--高版本MySQL--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line"><span class="comment">connectionURL=&quot;jdbc:mysql://localhost:3306/数据库名?characterEncoding=utf8&quot;                       userId=&quot;root&quot; password=&quot;密码&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ORACLE--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;</span></span><br><span class="line"><span class="comment">connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot; </span></span><br><span class="line"><span class="comment">userId=&quot;scott&quot;</span></span><br><span class="line"><span class="comment">password=&quot;tiger&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/jdbcConnection&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 </span></span><br><span class="line"><span class="comment">NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- targetProject:生成PO类的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.hp.pojo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.hp.mapper&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">&quot;com.hp.mapper&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定要生成数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;table2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;table3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意将xml配置文件改为自己的。</p><p><a href="https://imgtu.com/i/Rls04P"><img src="https://z3.ax1x.com/2021/06/25/Rls04P.md.png" alt="Rls04P.md.png"></a><br><a href="https://imgtu.com/i/RlsD9f"><img src="https://z3.ax1x.com/2021/06/25/RlsD9f.md.png" alt="RlsD9f.md.png"></a></p><h3 id="创建生成程序"><a href="#创建生成程序" class="headerlink" title="创建生成程序"></a>创建生成程序</h3><p>在<strong>src</strong>目录下创建<strong>GeneratorSqlmap.java</strong>，并执行。（代码如下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSqlmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//指定 逆向工程配置文件</span></span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">&quot;src/generatorConfig.xml&quot;</span>); </span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">GeneratorSqlmap generatorSqlmap = <span class="keyword">new</span> GeneratorSqlmap();</span><br><span class="line">generatorSqlmap.generator();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成后的目录结构"><a href="#生成后的目录结构" class="headerlink" title="生成后的目录结构"></a>生成后的目录结构</h3><p>如下图所示，为逆向生成的实体类和mapper配置文件。</p><p><a href="https://imgtu.com/i/Rl30fI"><img src="https://z3.ax1x.com/2021/06/25/Rl30fI.png" alt="Rl30fI.png"></a></p><h3 id="报错及总结"><a href="#报错及总结" class="headerlink" title="报错及总结"></a>报错及总结</h3><p>注意:MySQL高版本的URL地址为：jdbc:mysql://localhost:3306/youyougou?characterEncoding=utf8</p><p>结束。( •̀ ω •́ )✧（有什么问题你请在下方评论区友好交流）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 逆向工程 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日常】发现一段有趣的话</title>
      <link href="/2021/06/12/life1/"/>
      <url>/2021/06/12/life1/</url>
      
        <content type="html"><![CDATA[<h2 id="每周分享（一）"><a href="#每周分享（一）" class="headerlink" title="每周分享（一）"></a>每周分享（一）</h2><p>​      我们总是容易用一种自虐的方式制造出一种痴情的假象来使得自己站在感情的道德制高点上，获得一种畸形的满足感和安全感。其实无论是雪夜去对方家楼下站会儿或者是冒着大雨给她送一杯奶茶什么的，自己回想起来往往觉得如乔峰大战聚贤庄、关羽千里走单骑一样壮怀激烈，而对于对方来说，一杯奶茶就是一杯奶茶，无法承载起你想要在上面寄托的山崩地裂的情怀。</p><p>​      少年的时候，总是迫不及待地将自己的满腔爱意表达出来，而结果往往是陷入表演之中而不自知。所以两个人的记忆才会出现偏差，那些你觉得刻骨铭心的过去，对方往往没有同样的感觉，甚至茫然不知。</p><p>​      成长的标志就是懂得克制自己。</p><p>​      克制自己的情绪，克制自己的表演欲，甚至克制自己的喜欢。少年时候，喜欢一个人恨不能把她变成自己身体的一部分，她刚说冷，我这边心里已经结冰了，她说难过，我立马如丧考妣，比她还难过，唯恐无法将自己的爱意表达出来。</p><p>​      而事实上，谁也无法承担起另一个人的价值寄托，只有做一个独立、有价值的人，才能真正学会去爱另一个人。也千万不要尝试改变另一个人，这注定是徒劳的。做自己就好，爱情的真谛在于相互的吸引、志趣相投的同行，而不是追逐和依附以及自我感动</p><blockquote><p>内容转载于小黑盒评论区，如果你是内容原创请在评论区留言或致电首页邮箱。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑盒圣经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Oracle】Oracle删除</title>
      <link href="/2021/06/07/oracleDelete/"/>
      <url>/2021/06/07/oracleDelete/</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle数据库删除"><a href="#Oracle数据库删除" class="headerlink" title="Oracle数据库删除"></a>Oracle数据库删除</h2><h3 id="1-关闭oracle"><a href="#1-关闭oracle" class="headerlink" title="1. 关闭oracle"></a>1. 关闭oracle</h3><p>   ​    先关掉oralce，<em>net stop OracleServiceORCL</em>(ORCL是我的实例名字，换成你的)，或者去我的电脑服务中关闭。</p><h3 id="2-卸载oracle"><a href="#2-卸载oracle" class="headerlink" title="2. 卸载oracle"></a>2. 卸载oracle</h3><p>   ​    开始－＞程序－＞Oracle - oracle的版本号，我的是10ghome－＞Oracle Installation Products－＞ Universal Installer 卸载oracle。</p><h3 id="3-删除注册表"><a href="#3-删除注册表" class="headerlink" title="3. 删除注册表"></a>3. 删除注册表</h3><p>   ​    进注册表，win+R -&gt; regedit，删除选择HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE下所有的key。</p><p>   <strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services、HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application</strong></p><p>   这个里面所有oracle字眼的内容进行删除。</p><h3 id="4-删除C盘下oracle文件"><a href="#4-删除C盘下oracle文件" class="headerlink" title="4. 删除C盘下oracle文件"></a>4. 删除C盘下oracle文件</h3><p>   ​    删除c盘\Program Files\Oracle目录的东西以及oracle安装目录下所有的文件以及文件夹。</p><h3 id="5-删除环境变量"><a href="#5-删除环境变量" class="headerlink" title="5. 删除环境变量"></a>5. 删除环境变量</h3><p>   ​    环境变量中删除有关oracle的classpath和path。</p><p>   到这里就大功告成了，完毕( •̀ ω •́ )✧</p>]]></content>
      
      
      <categories>
          
          <category> geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【派大星】一个关于正常人的故事</title>
      <link href="/2021/04/27/video1/"/>
      <url>/2021/04/27/video1/</url>
      
        <content type="html"><![CDATA[<p>  推荐刷过的一个视频，假装再更博，使用b站的分享，所有播放量都归视频原作者，博主仅转载。</p><div class="bili_video"><iframe src="https://player.bilibili.com/player.html?aid=60731116&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="544" height="452" allowfullscreen="true"> </iframe></div>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鬼畜视频 </tag>
            
            <tag> 派大星 </tag>
            
            <tag> 哔哩哔哩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【博客搭建】hexo+Github搭建静态个人博客</title>
      <link href="/2021/02/21/hexo/"/>
      <url>/2021/02/21/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-Github搭建静态个人博客"><a href="#hexo-Github搭建静态个人博客" class="headerlink" title="hexo+Github搭建静态个人博客"></a>hexo+Github搭建静态个人博客</h2><ol><li><p>下载nodeJS：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></li><li><p>安装 一键式</p></li><li><p> cmd &gt;查询node和npm的版本，确认安装成功</p></li></ol>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">node</span> <span class="string">-v</span>  <span class="comment">#查询node版本</span></span><br><span class="line"><span class="string">npm</span> <span class="string">-v</span>  <span class="comment">#查询npm版本</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用npm安装cnpm（国内使用淘宝镜像加速下载）</li></ol>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">cnpm</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">-v</span>    <span class="comment">#确认版本号（安装结束后）</span></span><br></pre></td></tr></table></figure><ol start="5"><li>全局安装hexo（Git或cmd）</li></ol>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span>  <span class="comment">#全局安装hexo</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">-v</span> <span class="comment">#确认hexo版本号（安装结束后）</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>在c或d 盘建立一个空文件夹（下方以d:/blog为例）</p></li><li><p>cmd进入该文件夹后，用hexo生成博客</p></li></ol>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">init</span>  <span class="comment">#初始化hexo  （此建议处用git窗口）</span></span><br></pre></td></tr></table></figure><ol start="8"><li>本地预览生成的默认博客</li></ol>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">s</span> <span class="comment">#本地预览</span></span><br><span class="line"><span class="string">localhost:4000</span> <span class="comment">#本地地址复制到浏览器即可 （ctrl+c关闭）</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>发布到github</p></li><li><p>创建github账号</p></li><li><p>并创建一个仓库，命名为：<strong>你的github昵称.github.io</strong></p></li><li><p>在本地blog文件安装一个git部署插件</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span>  <span class="comment">#在git或cmd到blog目录下输入</span></span><br></pre></td></tr></table></figure><ol start="11"><li>设置blog目录下_config.yml文件_最后的deploy如下</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你新建的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment">#注意，main是现在github的默认分支，每个冒号后有一个空格 </span></span><br></pre></td></tr></table></figure><p>​    </p><ol start="12"><li>将博客部署到GitHub仓库</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">在blog下打开cmd或git</span> <span class="string">输入：</span></span><br><span class="line"> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment">#清除</span></span><br><span class="line"> <span class="string">hexo</span> <span class="string">g</span> <span class="comment">#生成</span></span><br><span class="line"> <span class="string">hexo</span> <span class="string">d</span> <span class="comment">#部署</span></span><br></pre></td></tr></table></figure><p>最后，输入你的仓库名称到浏览器即可访问<br>​    </p><p>  这只是搭建完成，还可以更改主题，美化博客！</p><p>  网上有相当多美化博客教程可以参考</p><p>  暂时挖个坑，有时间在填 。<del>绝对不是因为我懒</del></p><hr><blockquote><p>作者：JokerDaxiong </p><p>博客：<a href="%22Hey,Joker%22">Jokerdig.com</a></p><p>时间：2021-2-18</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSM】jdbcType关系映射对应表</title>
      <link href="/2021/02/21/jdbcType/"/>
      <url>/2021/02/21/jdbcType/</url>
      
        <content type="html"><![CDATA[<h2 id="jdbcType关系映射对应表"><a href="#jdbcType关系映射对应表" class="headerlink" title="jdbcType关系映射对应表"></a>jdbcType关系映射对应表</h2><table><thead><tr><th align="center"></th><th align="center"><strong>JdbcType</strong></th><th align="center"><strong>Oracle</strong></th><th align="center"><strong>MySql</strong></th></tr></thead><tbody><tr><td align="center">JdbcType</td><td align="center">ARRAY</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">BIGINT</td><td align="center"></td><td align="center">BIGINT</td></tr><tr><td align="center">JdbcType</td><td align="center">BINARY</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">BIT</td><td align="center"></td><td align="center">BIT</td></tr><tr><td align="center">JdbcType</td><td align="center">BLOB</td><td align="center">BLOB</td><td align="center">BLOB</td></tr><tr><td align="center">JdbcType</td><td align="center">BOOLEAN</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">CHAR</td><td align="center">CHAR</td><td align="center">CHAR</td></tr><tr><td align="center">JdbcType</td><td align="center">CLOB</td><td align="center">CLOB</td><td align="center">修改为TEXT</td></tr><tr><td align="center">JdbcType</td><td align="center">CURSOR</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">DATE</td><td align="center">DATE</td><td align="center">DATE</td></tr><tr><td align="center">JdbcType</td><td align="center">DECIMAL</td><td align="center">DECIMAL</td><td align="center">DECIMAL</td></tr><tr><td align="center">JdbcType</td><td align="center">DOUBLE</td><td align="center">NUMBER</td><td align="center">DOUBLE</td></tr><tr><td align="center">JdbcType</td><td align="center">FLOAT</td><td align="center">FLOAT</td><td align="center">FLOAT</td></tr><tr><td align="center">JdbcType</td><td align="center">INTEGER</td><td align="center">INTEGER</td><td align="center">INTEGER</td></tr><tr><td align="center">JdbcType</td><td align="center">LONGVARBINARY</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">LONGVARCHAR</td><td align="center">LONG VARCHAR</td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">NCHAR</td><td align="center">NCHAR</td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">NCLOB</td><td align="center">NCLOB</td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">NULL</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">NUMERIC</td><td align="center">NUMERIC/NUMBER</td><td align="center">NUMERIC</td></tr><tr><td align="center">JdbcType</td><td align="center">NVARCHAR</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">OTHER</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">REAL</td><td align="center">REAL</td><td align="center">REAL</td></tr><tr><td align="center">JdbcType</td><td align="center">SMALLINT</td><td align="center">SMALLINT</td><td align="center">SMALLINT</td></tr><tr><td align="center">JdbcType</td><td align="center">STRUCT</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">TIME</td><td align="center"></td><td align="center">TIME</td></tr><tr><td align="center">JdbcType</td><td align="center">TIMESTAMP</td><td align="center">TIMESTAMP</td><td align="center">TIMESTAMP/DATETIME</td></tr><tr><td align="center">JdbcType</td><td align="center">TINYINT</td><td align="center"></td><td align="center">TINYINT</td></tr><tr><td align="center">JdbcType</td><td align="center">UNDEFINED</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">VARBINARY</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">JdbcType</td><td align="center">VARCHAR</td><td align="center">VARCHAR</td><td align="center">VARCHAR</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbcType </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文档</title>
      <link href="/2021/02/21/test/"/>
      <url>/2021/02/21/test/</url>
      
        <content type="html"><![CDATA[<h3 id="这是一个测试文档"><a href="#这是一个测试文档" class="headerlink" title="这是一个测试文档"></a>这是一个测试文档</h3><ul><li><input checked="" disabled="" type="checkbox"> 测试</li><li><input checked="" disabled="" type="checkbox"> 睡觉</li><li><input checked="" disabled="" type="checkbox"> 背单词</li><li><input checked="" disabled="" type="checkbox"> 写代码</li></ul><p>测试图片</p><p><a href="https://jokerdig.com/" title="一个神奇的网站">Hey,Joker</a></p><p><img src="https://cdn.jsdelivr.net/gh/JokerDaxiong/JokerDaxiong.github.io@main/images/avatar.png" title="测试图片"></p><blockquote><p>作者：JokerDaxiong</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
